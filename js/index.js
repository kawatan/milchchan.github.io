!function(e){var t={};function n(a){if(t[a])return t[a].exports;var r=t[a]={i:a,l:!1,exports:{}};return e[a].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,a){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(n.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(a,r,function(t){return e[t]}.bind(null,r));return a},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/js",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);var a={update:null,begin:null,loopBegin:null,changeBegin:null,change:null,changeComplete:null,loopComplete:null,complete:null,loop:1,direction:"normal",autoplay:!0,timelineOffset:0},r={duration:1e3,delay:0,endDelay:0,easing:"easeOutElastic(1, .5)",round:0},i=["translateX","translateY","translateZ","rotate","rotateX","rotateY","rotateZ","scale","scaleX","scaleY","scaleZ","skew","skewX","skewY","perspective","matrix","matrix3d"],o={CSS:{},springs:{}};function s(e,t,n){return Math.min(Math.max(e,t),n)}function c(e,t){return e.indexOf(t)>-1}function u(e,t){return e.apply(null,t)}var l={arr:function(e){return Array.isArray(e)},obj:function(e){return c(Object.prototype.toString.call(e),"Object")},pth:function(e){return l.obj(e)&&e.hasOwnProperty("totalLength")},svg:function(e){return e instanceof SVGElement},inp:function(e){return e instanceof HTMLInputElement},dom:function(e){return e.nodeType||l.svg(e)},str:function(e){return"string"==typeof e},fnc:function(e){return"function"==typeof e},und:function(e){return void 0===e},nil:function(e){return l.und(e)||null===e},hex:function(e){return/(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(e)},rgb:function(e){return/^rgb/.test(e)},hsl:function(e){return/^hsl/.test(e)},col:function(e){return l.hex(e)||l.rgb(e)||l.hsl(e)},key:function(e){return!a.hasOwnProperty(e)&&!r.hasOwnProperty(e)&&"targets"!==e&&"keyframes"!==e}};function d(e){var t=/\(([^)]+)\)/.exec(e);return t?t[1].split(",").map((function(e){return parseFloat(e)})):[]}function h(e,t){var n=d(e),a=s(l.und(n[0])?1:n[0],.1,100),r=s(l.und(n[1])?100:n[1],.1,100),i=s(l.und(n[2])?10:n[2],.1,100),c=s(l.und(n[3])?0:n[3],.1,100),u=Math.sqrt(r/a),h=i/(2*Math.sqrt(r*a)),p=h<1?u*Math.sqrt(1-h*h):0,f=h<1?(h*u-c)/p:-c+u;function g(e){var n=t?t*e/1e3:e;return n=h<1?Math.exp(-n*h*u)*(1*Math.cos(p*n)+f*Math.sin(p*n)):(1+f*n)*Math.exp(-n*u),0===e||1===e?e:1-n}return t?g:function(){var t=o.springs[e];if(t)return t;for(var n=0,a=0;;)if(1===g(n+=1/6)){if(++a>=16)break}else a=0;var r=n*(1/6)*1e3;return o.springs[e]=r,r}}function p(e){return void 0===e&&(e=10),function(t){return Math.ceil(s(t,1e-6,1)*e)*(1/e)}}var f,g,m=function(){function e(e,t){return 1-3*t+3*e}function t(e,t){return 3*t-6*e}function n(e){return 3*e}function a(a,r,i){return((e(r,i)*a+t(r,i))*a+n(r))*a}function r(a,r,i){return 3*e(r,i)*a*a+2*t(r,i)*a+n(r)}return function(e,t,n,i){if(0<=e&&e<=1&&0<=n&&n<=1){var o=new Float32Array(11);if(e!==t||n!==i)for(var s=0;s<11;++s)o[s]=a(.1*s,e,n);return function(r){return e===t&&n===i||0===r||1===r?r:a(c(r),t,i)}}function c(t){for(var i=0,s=1;10!==s&&o[s]<=t;++s)i+=.1;--s;var c=i+.1*((t-o[s])/(o[s+1]-o[s])),u=r(c,e,n);return u>=.001?function(e,t,n,i){for(var o=0;o<4;++o){var s=r(t,n,i);if(0===s)return t;t-=(a(t,n,i)-e)/s}return t}(t,c,e,n):0===u?c:function(e,t,n,r,i){var o,s,c=0;do{(o=a(s=t+(n-t)/2,r,i)-e)>0?n=s:t=s}while(Math.abs(o)>1e-7&&++c<10);return s}(t,i,i+.1,e,n)}}}(),y=(f={linear:function(){return function(e){return e}}},g={Sine:function(){return function(e){return 1-Math.cos(e*Math.PI/2)}},Circ:function(){return function(e){return 1-Math.sqrt(1-e*e)}},Back:function(){return function(e){return e*e*(3*e-2)}},Bounce:function(){return function(e){for(var t,n=4;e<((t=Math.pow(2,--n))-1)/11;);return 1/Math.pow(4,3-n)-7.5625*Math.pow((3*t-2)/22-e,2)}},Elastic:function(e,t){void 0===e&&(e=1),void 0===t&&(t=.5);var n=s(e,1,10),a=s(t,.1,2);return function(e){return 0===e||1===e?e:-n*Math.pow(2,10*(e-1))*Math.sin((e-1-a/(2*Math.PI)*Math.asin(1/n))*(2*Math.PI)/a)}}},["Quad","Cubic","Quart","Quint","Expo"].forEach((function(e,t){g[e]=function(){return function(e){return Math.pow(e,t+2)}}})),Object.keys(g).forEach((function(e){var t=g[e];f["easeIn"+e]=t,f["easeOut"+e]=function(e,n){return function(a){return 1-t(e,n)(1-a)}},f["easeInOut"+e]=function(e,n){return function(a){return a<.5?t(e,n)(2*a)/2:1-t(e,n)(-2*a+2)/2}},f["easeOutIn"+e]=function(e,n){return function(a){return a<.5?(1-t(e,n)(1-2*a))/2:(t(e,n)(2*a-1)+1)/2}}})),f);function v(e,t){if(l.fnc(e))return e;var n=e.split("(")[0],a=y[n],r=d(e);switch(n){case"spring":return h(e,t);case"cubicBezier":return u(m,r);case"steps":return u(p,r);default:return u(a,r)}}function w(e){try{return document.querySelectorAll(e)}catch(e){return}}function b(e,t){for(var n=e.length,a=arguments.length>=2?arguments[1]:void 0,r=[],i=0;i<n;i++)if(i in e){var o=e[i];t.call(a,o,i,e)&&r.push(o)}return r}function M(e){return e.reduce((function(e,t){return e.concat(l.arr(t)?M(t):t)}),[])}function k(e){return l.arr(e)?e:(l.str(e)&&(e=w(e)||e),e instanceof NodeList||e instanceof HTMLCollection?[].slice.call(e):[e])}function x(e,t){return e.some((function(e){return e===t}))}function D(e){var t={};for(var n in e)t[n]=e[n];return t}function L(e,t){var n=D(e);for(var a in e)n[a]=t.hasOwnProperty(a)?t[a]:e[a];return n}function S(e,t){var n=D(e);for(var a in t)n[a]=l.und(e[a])?t[a]:e[a];return n}function I(e){return l.rgb(e)?(n=/rgb\((\d+,\s*[\d]+,\s*[\d]+)\)/g.exec(t=e))?"rgba("+n[1]+",1)":t:l.hex(e)?function(e){var t=e.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i,(function(e,t,n,a){return t+t+n+n+a+a})),n=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(t);return"rgba("+parseInt(n[1],16)+","+parseInt(n[2],16)+","+parseInt(n[3],16)+",1)"}(e):l.hsl(e)?function(e){var t,n,a,r=/hsl\((\d+),\s*([\d.]+)%,\s*([\d.]+)%\)/g.exec(e)||/hsla\((\d+),\s*([\d.]+)%,\s*([\d.]+)%,\s*([\d.]+)\)/g.exec(e),i=parseInt(r[1],10)/360,o=parseInt(r[2],10)/100,s=parseInt(r[3],10)/100,c=r[4]||1;function u(e,t,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?e+6*(t-e)*n:n<.5?t:n<2/3?e+(t-e)*(2/3-n)*6:e}if(0==o)t=n=a=s;else{var l=s<.5?s*(1+o):s+o-s*o,d=2*s-l;t=u(d,l,i+1/3),n=u(d,l,i),a=u(d,l,i-1/3)}return"rgba("+255*t+","+255*n+","+255*a+","+c+")"}(e):void 0;var t,n}function P(e){var t=/[+-]?\d*\.?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?(%|px|pt|em|rem|in|cm|mm|ex|ch|pc|vw|vh|vmin|vmax|deg|rad|turn)?$/.exec(e);if(t)return t[1]}function R(e,t){return l.fnc(e)?e(t.target,t.id,t.total):e}function T(e,t){return e.getAttribute(t)}function C(e,t,n){if(x([n,"deg","rad","turn"],P(t)))return t;var a=o.CSS[t+n];if(!l.und(a))return a;var r=document.createElement(e.tagName),i=e.parentNode&&e.parentNode!==document?e.parentNode:document.body;i.appendChild(r),r.style.position="absolute",r.style.width=100+n;var s=100/r.offsetWidth;i.removeChild(r);var c=s*parseFloat(t);return o.CSS[t+n]=c,c}function E(e,t,n){if(t in e.style){var a=t.replace(/([a-z])([A-Z])/g,"$1-$2").toLowerCase(),r=e.style[t]||getComputedStyle(e).getPropertyValue(a)||"0";return n?C(e,r,n):r}}function A(e,t){return l.dom(e)&&!l.inp(e)&&(!l.nil(T(e,t))||l.svg(e)&&e[t])?"attribute":l.dom(e)&&x(i,t)?"transform":l.dom(e)&&"transform"!==t&&E(e,t)?"css":null!=e[t]?"object":void 0}function q(e){if(l.dom(e)){for(var t,n=e.style.transform||"",a=/(\w+)\(([^)]*)\)/g,r=new Map;t=a.exec(n);)r.set(t[1],t[2]);return r}}function j(e,t,n,a){var r=c(t,"scale")?1:0+function(e){return c(e,"translate")||"perspective"===e?"px":c(e,"rotate")||c(e,"skew")?"deg":void 0}(t),i=q(e).get(t)||r;return n&&(n.transforms.list.set(t,i),n.transforms.last=t),a?C(e,i,a):i}function O(e,t,n,a){switch(A(e,t)){case"transform":return j(e,t,a,n);case"css":return E(e,t,n);case"attribute":return T(e,t);default:return e[t]||0}}function H(e,t){var n=/^(\*=|\+=|-=)/.exec(e);if(!n)return e;var a=P(e)||0,r=parseFloat(t),i=parseFloat(e.replace(n[0],""));switch(n[0][0]){case"+":return r+i+a;case"-":return r-i+a;case"*":return r*i+a}}function B(e,t){if(l.col(e))return I(e);if(/\s/g.test(e))return e;var n=P(e),a=n?e.substr(0,e.length-n.length):e;return t?a+t:a}function $(e,t){return Math.sqrt(Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2))}function Q(e){for(var t,n=e.points,a=0,r=0;r<n.numberOfItems;r++){var i=n.getItem(r);r>0&&(a+=$(t,i)),t=i}return a}function G(e){if(e.getTotalLength)return e.getTotalLength();switch(e.tagName.toLowerCase()){case"circle":return function(e){return 2*Math.PI*T(e,"r")}(e);case"rect":return function(e){return 2*T(e,"width")+2*T(e,"height")}(e);case"line":return function(e){return $({x:T(e,"x1"),y:T(e,"y1")},{x:T(e,"x2"),y:T(e,"y2")})}(e);case"polyline":return Q(e);case"polygon":return function(e){var t=e.points;return Q(e)+$(t.getItem(t.numberOfItems-1),t.getItem(0))}(e)}}function N(e,t){var n=t||{},a=n.el||function(e){for(var t=e.parentNode;l.svg(t)&&l.svg(t.parentNode);)t=t.parentNode;return t}(e),r=a.getBoundingClientRect(),i=T(a,"viewBox"),o=r.width,s=r.height,c=n.viewBox||(i?i.split(" "):[0,0,o,s]);return{el:a,viewBox:c,x:c[0]/1,y:c[1]/1,w:o,h:s,vW:c[2],vH:c[3]}}function W(e,t,n){function a(n){void 0===n&&(n=0);var a=t+n>=1?t+n:0;return e.el.getPointAtLength(a)}var r=N(e.el,e.svg),i=a(),o=a(-1),s=a(1),c=n?1:r.w/r.vW,u=n?1:r.h/r.vH;switch(e.property){case"x":return(i.x-r.x)*c;case"y":return(i.y-r.y)*u;case"angle":return 180*Math.atan2(s.y-o.y,s.x-o.x)/Math.PI}}function U(e,t){var n=/[+-]?\d*\.?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?/g,a=B(l.pth(e)?e.totalLength:e,t)+"";return{original:a,numbers:a.match(n)?a.match(n).map(Number):[0],strings:l.str(e)||t?a.split(n):[]}}function z(e){return b(e?M(l.arr(e)?e.map(k):k(e)):[],(function(e,t,n){return n.indexOf(e)===t}))}function F(e){var t=z(e);return t.map((function(e,n){return{target:e,id:n,total:t.length,transforms:{list:q(e)}}}))}function V(e,t){var n=D(t);if(/^spring/.test(n.easing)&&(n.duration=h(n.easing)),l.arr(e)){var a=e.length;2===a&&!l.obj(e[0])?e={value:e}:l.fnc(t.duration)||(n.duration=t.duration/a)}var r=l.arr(e)?e:[e];return r.map((function(e,n){var a=l.obj(e)&&!l.pth(e)?e:{value:e};return l.und(a.delay)&&(a.delay=n?0:t.delay),l.und(a.endDelay)&&(a.endDelay=n===r.length-1?t.endDelay:0),a})).map((function(e){return S(e,n)}))}function _(e,t){var n=[],a=t.keyframes;for(var r in a&&(t=S(function(e){for(var t=b(M(e.map((function(e){return Object.keys(e)}))),(function(e){return l.key(e)})).reduce((function(e,t){return e.indexOf(t)<0&&e.push(t),e}),[]),n={},a=function(a){var r=t[a];n[r]=e.map((function(e){var t={};for(var n in e)l.key(n)?n==r&&(t.value=e[n]):t[n]=e[n];return t}))},r=0;r<t.length;r++)a(r);return n}(a),t)),t)l.key(r)&&n.push({name:r,tweens:V(t[r],e)});return n}function Z(e,t){var n;return e.tweens.map((function(a){var r=function(e,t){var n={};for(var a in e){var r=R(e[a],t);l.arr(r)&&1===(r=r.map((function(e){return R(e,t)}))).length&&(r=r[0]),n[a]=r}return n.duration=parseFloat(n.duration),n.delay=parseFloat(n.delay),n}(a,t),i=r.value,o=l.arr(i)?i[1]:i,s=P(o),c=O(t.target,e.name,s,t),u=n?n.to.original:c,d=l.arr(i)?i[0]:u,h=P(d)||P(c),p=s||h;return l.und(o)&&(o=u),r.from=U(d,p),r.to=U(H(o,d),p),r.start=n?n.end:0,r.end=r.start+r.delay+r.duration+r.endDelay,r.easing=v(r.easing,r.duration),r.isPath=l.pth(i),r.isPathTargetInsideSVG=r.isPath&&l.svg(t.target),r.isColor=l.col(r.from.original),r.isColor&&(r.round=1),n=r,r}))}var J={css:function(e,t,n){return e.style[t]=n},attribute:function(e,t,n){return e.setAttribute(t,n)},object:function(e,t,n){return e[t]=n},transform:function(e,t,n,a,r){if(a.list.set(t,n),t===a.last||r){var i="";a.list.forEach((function(e,t){i+=t+"("+e+") "})),e.style.transform=i}}};function X(e,t){F(e).forEach((function(e){for(var n in t){var a=R(t[n],e),r=e.target,i=P(a),o=O(r,n,i,e),s=H(B(a,i||P(o)),o),c=A(r,n);J[c](r,n,s,e.transforms,!0)}}))}function Y(e,t){return b(M(e.map((function(e){return t.map((function(t){return function(e,t){var n=A(e.target,t.name);if(n){var a=Z(t,e),r=a[a.length-1];return{type:n,property:t.name,animatable:e,tweens:a,duration:r.end,delay:a[0].delay,endDelay:r.endDelay}}}(e,t)}))}))),(function(e){return!l.und(e)}))}function K(e,t){var n=e.length,a=function(e){return e.timelineOffset?e.timelineOffset:0},r={};return r.duration=n?Math.max.apply(Math,e.map((function(e){return a(e)+e.duration}))):t.duration,r.delay=n?Math.min.apply(Math,e.map((function(e){return a(e)+e.delay}))):t.delay,r.endDelay=n?r.duration-Math.max.apply(Math,e.map((function(e){return a(e)+e.duration-e.endDelay}))):t.endDelay,r}var ee=0;var te=[],ne=function(){var e;function t(n){for(var a=te.length,r=0;r<a;){var i=te[r];i.paused?(te.splice(r,1),a--):(i.tick(n),r++)}e=r>0?requestAnimationFrame(t):void 0}return"undefined"!=typeof document&&document.addEventListener("visibilitychange",(function(){re.suspendWhenDocumentHidden&&(ae()?e=cancelAnimationFrame(e):(te.forEach((function(e){return e._onDocumentVisibility()})),ne()))})),function(){e||ae()&&re.suspendWhenDocumentHidden||!(te.length>0)||(e=requestAnimationFrame(t))}}();function ae(){return!!document&&document.hidden}function re(e){void 0===e&&(e={});var t,n=0,i=0,o=0,c=0,u=null;function l(e){var t=window.Promise&&new Promise((function(e){return u=e}));return e.finished=t,t}var d=function(e){var t=L(a,e),n=L(r,e),i=_(n,e),o=F(e.targets),s=Y(o,i),c=K(s,n),u=ee;return ee++,S(t,{id:u,children:[],animatables:o,animations:s,duration:c.duration,delay:c.delay,endDelay:c.endDelay})}(e);l(d);function h(){var e=d.direction;"alternate"!==e&&(d.direction="normal"!==e?"normal":"reverse"),d.reversed=!d.reversed,t.forEach((function(e){return e.reversed=d.reversed}))}function p(e){return d.reversed?d.duration-e:e}function f(){n=0,i=p(d.currentTime)*(1/re.speed)}function g(e,t){t&&t.seek(e-t.timelineOffset)}function m(e){for(var t=0,n=d.animations,a=n.length;t<a;){var r=n[t],i=r.animatable,o=r.tweens,c=o.length-1,u=o[c];c&&(u=b(o,(function(t){return e<t.end}))[0]||u);for(var l=s(e-u.start-u.delay,0,u.duration)/u.duration,h=isNaN(l)?1:u.easing(l),p=u.to.strings,f=u.round,g=[],m=u.to.numbers.length,y=void 0,v=0;v<m;v++){var w=void 0,M=u.to.numbers[v],k=u.from.numbers[v]||0;w=u.isPath?W(u.value,h*M,u.isPathTargetInsideSVG):k+h*(M-k),f&&(u.isColor&&v>2||(w=Math.round(w*f)/f)),g.push(w)}var x=p.length;if(x){y=p[0];for(var D=0;D<x;D++){p[D];var L=p[D+1],S=g[D];isNaN(S)||(y+=L?S+L:S+" ")}}else y=g[0];J[r.type](i.target,r.property,y,i.transforms),r.currentValue=y,t++}}function y(e){d[e]&&!d.passThrough&&d[e](d)}function v(e){var a=d.duration,r=d.delay,f=a-d.endDelay,v=p(e);d.progress=s(v/a*100,0,100),d.reversePlayback=v<d.currentTime,t&&function(e){if(d.reversePlayback)for(var n=c;n--;)g(e,t[n]);else for(var a=0;a<c;a++)g(e,t[a])}(v),!d.began&&d.currentTime>0&&(d.began=!0,y("begin")),!d.loopBegan&&d.currentTime>0&&(d.loopBegan=!0,y("loopBegin")),v<=r&&0!==d.currentTime&&m(0),(v>=f&&d.currentTime!==a||!a)&&m(a),v>r&&v<f?(d.changeBegan||(d.changeBegan=!0,d.changeCompleted=!1,y("changeBegin")),y("change"),m(v)):d.changeBegan&&(d.changeCompleted=!0,d.changeBegan=!1,y("changeComplete")),d.currentTime=s(v,0,a),d.began&&y("update"),e>=a&&(i=0,d.remaining&&!0!==d.remaining&&d.remaining--,d.remaining?(n=o,y("loopComplete"),d.loopBegan=!1,"alternate"===d.direction&&h()):(d.paused=!0,d.completed||(d.completed=!0,y("loopComplete"),y("complete"),!d.passThrough&&"Promise"in window&&(u(),l(d)))))}return d.reset=function(){var e=d.direction;d.passThrough=!1,d.currentTime=0,d.progress=0,d.paused=!0,d.began=!1,d.loopBegan=!1,d.changeBegan=!1,d.completed=!1,d.changeCompleted=!1,d.reversePlayback=!1,d.reversed="reverse"===e,d.remaining=d.loop,t=d.children;for(var n=c=t.length;n--;)d.children[n].reset();(d.reversed&&!0!==d.loop||"alternate"===e&&1===d.loop)&&d.remaining++,m(d.reversed?d.duration:0)},d._onDocumentVisibility=f,d.set=function(e,t){return X(e,t),d},d.tick=function(e){o=e,n||(n=o),v((o+(i-n))*re.speed)},d.seek=function(e){v(p(e))},d.pause=function(){d.paused=!0,f()},d.play=function(){d.paused&&(d.completed&&d.reset(),d.paused=!1,te.push(d),f(),ne())},d.reverse=function(){h(),d.completed=!d.reversed,f()},d.restart=function(){d.reset(),d.play()},d.remove=function(e){oe(z(e),d)},d.reset(),d.autoplay&&d.play(),d}function ie(e,t){for(var n=t.length;n--;)x(e,t[n].animatable.target)&&t.splice(n,1)}function oe(e,t){var n=t.animations,a=t.children;ie(e,n);for(var r=a.length;r--;){var i=a[r],o=i.animations;ie(e,o),o.length||i.children.length||a.splice(r,1)}n.length||a.length||t.pause()}re.version="3.2.1",re.speed=1,re.suspendWhenDocumentHidden=!0,re.running=te,re.remove=function(e){for(var t=z(e),n=te.length;n--;){oe(t,te[n])}},re.get=O,re.set=X,re.convertPx=C,re.path=function(e,t){var n=l.str(e)?w(e)[0]:e,a=t||100;return function(e){return{property:e,el:n,svg:N(n),totalLength:G(n)*(a/100)}}},re.setDashoffset=function(e){var t=G(e);return e.setAttribute("stroke-dasharray",t),t},re.stagger=function(e,t){void 0===t&&(t={});var n=t.direction||"normal",a=t.easing?v(t.easing):null,r=t.grid,i=t.axis,o=t.from||0,s="first"===o,c="center"===o,u="last"===o,d=l.arr(e),h=d?parseFloat(e[0]):parseFloat(e),p=d?parseFloat(e[1]):0,f=P(d?e[1]:e)||0,g=t.start||0+(d?h:0),m=[],y=0;return function(e,t,l){if(s&&(o=0),c&&(o=(l-1)/2),u&&(o=l-1),!m.length){for(var v=0;v<l;v++){if(r){var w=c?(r[0]-1)/2:o%r[0],b=c?(r[1]-1)/2:Math.floor(o/r[0]),M=w-v%r[0],k=b-Math.floor(v/r[0]),x=Math.sqrt(M*M+k*k);"x"===i&&(x=-M),"y"===i&&(x=-k),m.push(x)}else m.push(Math.abs(o-v));y=Math.max.apply(Math,m)}a&&(m=m.map((function(e){return a(e/y)*y}))),"reverse"===n&&(m=m.map((function(e){return i?e<0?-1*e:-e:Math.abs(y-e)})))}return g+(d?(p-h)/y:h)*(Math.round(100*m[t])/100)+f}},re.timeline=function(e){void 0===e&&(e={});var t=re(e);return t.duration=0,t.add=function(n,a){var i=te.indexOf(t),o=t.children;function s(e){e.passThrough=!0}i>-1&&te.splice(i,1);for(var c=0;c<o.length;c++)s(o[c]);var u=S(n,L(r,e));u.targets=u.targets||e.targets;var d=t.duration;u.autoplay=!1,u.direction=t.direction,u.timelineOffset=l.und(a)?d:H(a,d),s(t),t.seek(u.timelineOffset);var h=re(u);s(h),o.push(h);var p=K(o,e);return t.delay=p.delay,t.endDelay=p.endDelay,t.duration=p.duration,t.seek(0),t.reset(),t.autoplay&&t.play(),t},t},re.easing=v,re.penner=y,re.random=function(e,t){return Math.floor(Math.random()*(t-e+1))+e};var se=re;firebase.initializeApp({apiKey:"AIzaSyDTVxDJj7rqG9L-Clvba2Tao9B0hkcxjcE",authDomain:"milchchan.firebaseapp.com",databaseURL:"https://milchchan.firebaseio.com",projectId:"milchchan",storageBucket:"milchchan.appspot.com",messagingSenderId:"355698971889",appId:"1:355698971889:web:e3653c5c31bd7289cd4550",measurementId:"G-3998FJYNWX"}),firebase.analytics();let ce=firebase.database(),ue=firebase.storage();window.addEventListener("load",e=>{var t=Vue.createApp({data:()=>({user:null,isDarkMode:!1,capturedStream:null,mediaRecorder:null,isRecording:!1,recordedData:null,maxRecordTime:60,isPlaying:!1,playbackQueue:[],playData:null,timeElapsed:0,isUploading:!1,progress:0,isCompleted:!1,isBlinded:!1,presetImages:[{fps:3,dark:!1,images:[{width:64,height:64,source:"/images/PixelatedLuna-Lolita-Glad1.png"},{width:64,height:64,source:"/images/PixelatedLuna-Lolita-Glad2.png"},{width:64,height:64,source:"/images/PixelatedLuna-Lolita-Glad1.png"}]},{fps:3,density:2,dark:!1,images:[{width:64,height:64,source:"/images/PixelatedLuna-Lolita-Glad1@2x.png"},{width:64,height:64,source:"/images/PixelatedLuna-Lolita-Glad2@2x.png"},{width:64,height:64,source:"/images/PixelatedLuna-Lolita-Glad1@2x.png"}]},{fps:3,density:3,dark:!1,images:[{width:64,height:64,source:"/images/PixelatedLuna-Lolita-Glad1@3x.png"},{width:64,height:64,source:"/images/PixelatedLuna-Lolita-Glad2@3x.png"},{width:64,height:64,source:"/images/PixelatedLuna-Lolita-Glad1@3x.png"}]},{fps:3,dark:!0,images:[{width:64,height:64,source:"/images/PixelatedLuna-Witch-Glad1.png"},{width:64,height:64,source:"/images/PixelatedLuna-Witch-Glad2.png"},{width:64,height:64,source:"/images/PixelatedLuna-Witch-Glad1.png"}]},{fps:3,density:2,dark:!0,images:[{width:64,height:64,source:"/images/PixelatedLuna-Witch-Glad1@2x.png"},{width:64,height:64,source:"/images/PixelatedLuna-Witch-Glad2@2x.png"},{width:64,height:64,source:"/images/PixelatedLuna-Witch-Glad1@2x.png"}]},{fps:3,density:3,dark:!0,images:[{width:64,height:64,source:"/images/PixelatedLuna-Witch-Glad1@3x.png"},{width:64,height:64,source:"/images/PixelatedLuna-Witch-Glad2@3x.png"},{width:64,height:64,source:"/images/PixelatedLuna-Witch-Glad1@3x.png"}]}],backgroundImages:[],preloadImages:[],queryQueue:[],sounds:{},soundCache:{},recentSounds:[],isRevealed:!1,input:"",inputHasError:!1,notifications:[],notificationsHeight:0,animatedNotificationsHeight:0,tickerWidth:0,animatedTickerWidth:0,stars:-1,animatedStars:0,words:[],character:null,states:{},map:null,layer:null,isExpanded:!1,isLoading:!1,isMuted:!1,isCollapsed:!0,isUpdating:!1,backgroundImagesQueue:[],isPopup:!1,isLearning:!0,isAnimating:!1,mode:null,feedQueue:[],animatedInputLength:0,maxInputLength:100,messages:[],maxMessages:10,word:null,tags:[],maxTags:10,scrollTimeoutID:void 0,tickIntervalID:void 0,screenshot:null}),watch:{isMuted(e){try{localStorage.setItem("bot",JSON.stringify({mute:e}))}catch(e){localStorage.removeItem("bot")}},words:{handler:()=>{t.$nextTick(()=>{for(const e of document.body.querySelectorAll("#ticker>.columns>.column>.control .clip")){let n=0;for(const t of e.querySelectorAll(":scope .ticker-wrap .ticker .item"))n+=t.getBoundingClientRect().width;n>0&&(t.tickerWidth=Math.min(n/2,document.body.querySelector("#ticker>.columns>.column>.control .level:first-child").getBoundingClientRect().width),e.querySelector(":scope .ticker-wrap .ticker").style.width=n+"px")}})},deep:!0},tickerWidth(e){const t=this,n={width:this.animatedTickerWidth};se({targets:n,width:e,round:1,duration:500,easing:"linear",update:()=>{t.animatedTickerWidth=n.width}})},backgroundImages:{handler:()=>{t.$nextTick(()=>{const e=document.body.querySelectorAll(".background>div");if(e.length>1){const t=e.length-1,n=3;for(const a of e)a.animate([{transform:"translate3d(0, 0, 0)"},{transform:"translate3d(-"+100*t+"%, 0, 0)"}],{fill:"forwards",easing:"steps("+t+")",duration:1e3/n*e.length,iterations:1/0})}})},deep:!0},notifications:{handler:()=>{t.$nextTick(()=>{t.notificationsHeight=t.$refs.notifications.getBoundingClientRect().height})},deep:!0},notificationsHeight(e){if(e>this.animatedNotificationsHeight){const t={height:this.animatedNotificationsHeight};se({targets:t,height:e,round:1,duration:500,easing:"linear",update:()=>{this.animatedNotificationsHeight=t.height}})}else this.animatedNotificationsHeight=e},stars(e){const t={count:this.animatedStars};se({targets:t,count:e,round:1,duration:500,easing:"linear",update:()=>{this.animatedStars=t.count}})},input:{handler:()=>{t.$nextTick(()=>{const e={count:t.animatedInputLength};se({targets:e,count:t.input.length,round:1,duration:500,easing:"linear",update:()=>{t.animatedInputLength=e.count}})})},deep:!0}},methods:{signIn:function(){firebase.auth().signInWithPopup(new firebase.auth.TwitterAuthProvider).then(e=>{var t=e.credential;try{localStorage.setItem("credential",JSON.stringify({providerId:t.providerId,accessToken:t.accessToken,secret:t.secret}))}catch(e){localStorage.removeItem("credential")}}).catch(e=>{console.error(e.code,e.message)})},signOut:function(){firebase.auth().signOut().then(()=>{localStorage.removeItem("credential"),firebase.auth().signInAnonymously().catch(e=>{console.error(e.code,e.message)})}).catch(e=>{console.error(e.code,e.message)})},update:async function(){const e=this,t=this.map.getCenter(),n=this.encodeGeohash(t.latitude,t.longitude,{1:2,2:2,3:2,4:2,5:2,6:2,7:2,8:2,9:2,10:3,11:3,12:4,13:4,14:4,15:5,16:5,17:5,18:6,19:6,20:6}[this.map.getZoom()]),a=this.getNeighbors(n);let r=[n],i=[],o=[],s=this.decodeGeohash(n);const c=Math.floor(new Date/1e3);let u={},l=!1,d=[];o.push(new Microsoft.Maps.Polygon([new Microsoft.Maps.Location(s.topleft.latitude,s.topleft.longitude),new Microsoft.Maps.Location(s.topright.latitude,s.topright.longitude),new Microsoft.Maps.Location(s.bottomright.latitude,s.bottomright.longitude),new Microsoft.Maps.Location(s.bottomleft.latitude,s.bottomleft.longitude),new Microsoft.Maps.Location(s.topleft.latitude,s.topleft.longitude)],{fillColor:"rgba(255, 0, 0, 0.5)",strokeColor:"red",strokeThickness:1}));for(const e in a)r.push(a[e]),s=this.decodeGeohash(a[e]),o.push(new Microsoft.Maps.Polygon([new Microsoft.Maps.Location(s.topleft.latitude,s.topleft.longitude),new Microsoft.Maps.Location(s.topright.latitude,s.topright.longitude),new Microsoft.Maps.Location(s.bottomright.latitude,s.bottomright.longitude),new Microsoft.Maps.Location(s.bottomleft.latitude,s.bottomleft.longitude),new Microsoft.Maps.Location(s.topleft.latitude,s.topleft.longitude)],{fillColor:"rgba(255, 0, 0, 0.5)",strokeColor:"red",strokeThickness:1}));this.layer.setPrimitives(o),this.queryQueue.push(t);for(const e of r){if(e in this.soundCache&&c-this.soundCache[e].timestamp<60){for(const t of this.soundCache[e].sounds)i.push(t);continue}const t=await ce.ref("wonderland/sounds").orderByChild("geohash").limitToLast(50).startAt(e).endAt(e+"").once("value");if(u[e]={timestamp:c,sounds:[]},t.exists()){const n=t.val();for(const t in n)n[t].id=t,i.push(n[t]),u[e].sounds.push(n[t])}}if(this.queryQueue.shift(),!(this.queryQueue.length>0)){for(const e in u)this.soundCache[e]=u[e];for(const t of this.take(i.sort((e,t)=>t.timestamp-e.timestamp),100)){let n=!0;for(const e in this.sounds)if(t.id===this.sounds[e].id){n=!1;break}if(n){let n;const a=new Date(1e3*t.timestamp).getHours(),r=a>=6&&a<18?"/images/Marker-Light.svg":"/images/Marker-Dark.svg";"tags"in t&&t.tags.length>0?(n=t.tags.join("/"),d.push({tokens:t.tags,timestamp:t.timestamp})):n="";const i=new Microsoft.Maps.Pushpin(new Microsoft.Maps.Location(t.location.latitude,t.location.longitude),{title:n,icon:r});this.setImage(i,r,t),this.sounds[i.id]=t,this.sounds[i.id].pushpin=i,this.sounds[i.id].handlers=[Microsoft.Maps.Events.addHandler(i,"click",async t=>{const n=new Date(1e3*e.sounds[t.target.id].timestamp).getHours();for(let t=e.playbackQueue.length-1;t>=0;t--)"generator"in e.playbackQueue[t]&&e.playbackQueue.splice(t,1);if(null!==e.playData&&"id"in e.playData&&e.playData.id in e.sounds){const t=new Date(1e3*e.sounds[e.playData.id].timestamp).getHours();e.setImage(e.sounds[e.playData.id].pushpin,t>=6&&t<18?"/images/Marker-Light.svg":"/images/Marker-Dark.svg",e.sounds[e.playData.id])}if(t.target.id in e.sounds){e.setImage(e.sounds[t.target.id].pushpin,n>=6&&n<18?"/images/Marker-Light-Selected.svg":"/images/Marker-Dark-Selected.svg",e.sounds[t.target.id]);try{e.playData={id:t.target.id,type:e.sounds[t.target.id].type,url:await ue.ref().child("sounds/"+e.sounds[t.target.id].name).getDownloadURL()},e.$refs.player.src=e.playData.url,e.$refs.player.play()}catch(e){console.error(e.message)}}}),Microsoft.Maps.Events.addHandler(i,"dblclick",t=>{window.location.hash=e.sounds[t.target.id].id})],this.map.entities.push(i),l=!0}else"tags"in t&&t.tags.length>0&&d.push({tokens:t.tags,timestamp:t.timestamp})}if(Object.keys(this.sounds).forEach((function(t){if(!i.some(n=>n.id===e.sounds[t].id)&&(null===e.playData||"id"in e.playData==!1||e.playData.id!==t)){for(const n of e.sounds[t].handlers)Microsoft.Maps.Events.removeHandler(n);e.map.entities.remove(e.sounds[t].pushpin),delete e.sounds[t],l=!0}})),Object.keys(this.soundCache).forEach((function(t){c-e.soundCache[t].timestamp>=60&&delete e.soundCache[t]})),null!==this.playData&&"id"in this.playData&&this.playData.id in this.sounds==!1&&(this.playData=null),l)try{const e=await new Promise(e=>{const t=Math.pow(10,-6);let n=[],a=[],r={};const i=Math.floor((new Date).getTime()/1e3)-86400;let o={},s=[],c=t;for(const e of d){let t=[];for(const n of e.tokens)t.includes(n)||(n in r?r[n]+=1:r[n]=1,t.push(n))}for(const e in r)r[e]=Math.log(d.length/(r[e]+t));for(const e of d)e.timestamp>i&&n.push(e);if(n.length<10){const e=Math.max(d.length-10,0);n.splice(0);for(let t=d.length-1;t>=e;t--)n.unshift(d[t])}for(const e of n){let t={};for(const n of e.tokens)n in t?t[n]+=1:t[n]=1;for(const n in t)t[n]/=e.tokens.length,n in o||(o[n]=0);a.push(t)}for(const e in o)for(const t of a)if(e in t){const n=t[e]*r[e];n>o[e]&&(o[e]=n)}for(const e in o)s.push({term:e,value:o[e]});s.sort((e,t)=>t.value-e.value);for(const e of s)e.value>c&&(c=e.value);for(const e of s)e.value/=c;e(s)});let t=0,n=!1;for(const n of this.prepare(this.character.ticker.filter(e=>"Alert"===e.name),e.length))"Message"===n.type&&(e.splice(t,0,{term:n.text,image:this.character.image,value:null}),t++);if(this.words.length===e.length){for(let t=0;t<e.length;t++)if(e[t].term!==this.words[t].name){n=!0;break}}else n=!0;if(n){this.words.splice(0);for(let t=0;t<e.length;t++)"image"in e[t]?this.words.push({index:t,name:e[t].term,image:e[t].image,score:e[t].value}):this.words.push({index:t,name:e[t].term,score:e[t].value})}}catch(e){console.error(e)}}},locate:function(e){const t=this;navigator.geolocation.getCurrentPosition(e=>{t.map.setView({center:new Microsoft.Maps.Location(e.coords.latitude,e.coords.longitude),zoom:16})},e=>{t.notify({text:e.message,accent:t.character.accent,image:t.character.image}),console.error(e)},{enableHighAccuracy:!0,timeout:5e3,maximumAge:0})},backward:function(e){for(let e=this.playbackQueue.length-1;e>=0;e--)"generator"in this.playbackQueue[e]&&"recent"!==this.playbackQueue[e].generator&&this.playbackQueue.splice(e,1);if(0===this.playbackQueue.length){const e=25;for(let t=this.recentSounds.length-1,n=Math.max(0,this.recentSounds.length-e);t>=n;t--){const e=Object.assign({},this.recentSounds[t]);e.generator="recent",this.playbackQueue.push(e)}}this.forward()},forward:async function(){const e=this.playbackQueue.shift();let t=null;if(null!==this.playData&&"id"in this.playData&&this.playData.id in this.sounds){const e=new Date(1e3*this.sounds[this.playData.id].timestamp).getHours();this.setImage(this.sounds[this.playData.id].pushpin,e>=6&&e<18?"/images/Marker-Light.svg":"/images/Marker-Dark.svg",this.sounds[this.playData.id])}for(const n in this.sounds)if(e.id===this.sounds[n].id){const e=new Date(1e3*this.sounds[n].timestamp).getHours();this.setImage(this.sounds[n].pushpin,e>=6&&e<18?"/images/Marker-Light-Selected.svg":"/images/Marker-Dark-Selected.svg",this.sounds[n]),t=n;break}if(null===t){const n=this,a=new Date(1e3*e.timestamp).getHours(),r=a>=6&&a<18?"/images/Marker-Light-Selected.svg":"/images/Marker-Dark-Selected.svg",i=new Microsoft.Maps.Pushpin(new Microsoft.Maps.Location(e.location.latitude,e.location.longitude),{title:"tags"in e?e.tags.join("/"):"",icon:r});this.setImage(i,r,e),t=i.id,this.sounds[i.id]=e,this.sounds[i.id].id=e.id,this.sounds[i.id].pushpin=i,this.sounds[i.id].handlers=[Microsoft.Maps.Events.addHandler(i,"click",async e=>{const t=new Date(1e3*n.sounds[e.target.id].timestamp).getHours();for(let e=n.playbackQueue.length-1;e>=0;e--)"generator"in n.playbackQueue[e]&&n.playbackQueue.splice(e,1);if(null!==n.playData&&"id"in n.playData&&n.playData.id in n.sounds){const e=new Date(1e3*n.sounds[n.playData.id].timestamp).getHours();n.setImage(n.sounds[n.playData.id].pushpin,e>=6&&e<18?"/images/Marker-Light.svg":"/images/Marker-Dark.svg",n.sounds[n.playData.id])}if(e.target.id in n.sounds){n.setImage(n.sounds[e.target.id].pushpin,t>=6&&t<18?"/images/Marker-Light-Selected.svg":"/images/Marker-Dark-Selected.svg",n.sounds[e.target.id]);try{n.playData={id:e.target.id,type:n.sounds[e.target.id].type,url:await ue.ref().child("sounds/"+n.sounds[e.target.id].name).getDownloadURL()},n.$refs.player.src=n.playData.url,n.$refs.player.play()}catch(e){console.error(e.message)}}}),Microsoft.Maps.Events.addHandler(i,"dblclick",e=>{window.location.hash=n.sounds[e.target.id].id})],this.map.entities.push(i)}this.playData={id:t,type:e.type,url:await ue.ref().child("sounds/"+e.name).getDownloadURL()},this.$refs.player.src=this.playData.url,this.$refs.player.play(),this.map.setView({center:new Microsoft.Maps.Location(e.location.latitude,e.location.longitude),zoom:16})},shuffle:function(e){for(let e=this.playbackQueue.length-1;e>=0;e--)"generator"in this.playbackQueue[e]&&"shuffle"!==this.playbackQueue[e].generator&&this.playbackQueue.splice(e,1);if(0===this.playbackQueue.length){const e=25;for(const t of this.take(function(e){let t=[].concat(e),n=e.length;for(;n>1;){const e=(a=0,r=n,a=Math.ceil(a),r=Math.floor(r),Math.floor(Math.random()*(r-a))+a);n--;const i=t[n];t[n]=t[e],t[e]=i}var a,r;return t}(this.recentSounds),e)){const e=Object.assign({},t);e.generator="shuffle",this.playbackQueue.push(e)}}this.forward()},playSound:async function(e){if(this.playbackQueue.length>0)this.forward();else{if(null===this.playData){const e=this.map.getCenter();let t=Number.MAX_SAFE_INTEGER,n=null;for(const a in this.sounds){const r=this.getDistance(e.latitude,e.longitude,this.sounds[a].location.latitude,this.sounds[a].location.longitude);r<t&&(n=a,t=r)}if(null===n)return void this.$refs.playback.animate([{transform:"translate3d(0, 0, 0)"},{transform:"translate3d(8px, 0, 0)"},{transform:"translate3d(-8px, 0, 0)"},{transform:"translate3d(7px, 0, 0)"},{transform:"translate3d(-7px, 0, 0)"},{transform:"translate3d(6px, 0, 0)"},{transform:"translate3d(-6px, 0, 0)"},{transform:"translate3d(5px, 0, 0)"},{transform:"translate3d(-5px, 0, 0)"},{transform:"translate3d(4px, 0, 0)"},{transform:"translate3d(-4px, 0, 0)"},{transform:"translate3d(3px, 0, 0)"},{transform:"translate3d(-3px, 0, 0)"},{transform:"translate3d(2px, 0, 0)"},{transform:"translate3d(-2px, 0, 0)"},{transform:"translate3d(1px, 0, 0)"},{transform:"translate3d(-1px, 0, 0)"},{transform:"translate3d(0, 0, 0)"}],{duration:1e3,iterations:1});{const e=new Date(1e3*this.sounds[n].timestamp).getHours();this.setImage(this.sounds[n].pushpin,e>=6&&e<18?"/images/Marker-Light-Selected.svg":"/images/Marker-Dark-Selected.svg",this.sounds[n]),this.playData={id:n,type:this.sounds[n].type,url:await ue.ref().child("sounds/"+this.sounds[n].name).getDownloadURL()},this.$refs.player.src=this.playData.url}}this.$refs.player.play()}},stopSound:function(e){this.$refs.player.pause(),this.$refs.player.currentTime=0},startRecording:async function(e){const t=this;if(null!==this.playData&&"id"in this.playData&&this.playData.id in this.sounds){const e=new Date(1e3*this.sounds[this.playData.id].timestamp).getHours();this.setImage(this.sounds[this.playData.id].pushpin,e>=6&&e<18?"/images/Marker-Light.svg":"/images/Marker-Dark.svg",this.sounds[this.playData.id])}try{this.capturedStream=await navigator.mediaDevices.getUserMedia({video:!1,audio:{echoCancellation:!0,volume:.5}})}catch(e){return void console.error(e)}if(MediaRecorder.isTypeSupported("audio/mp4"))this.mediaRecorder=new MediaRecorder(this.capturedStream,{mimeType:"audio/mp4"}),this.mediaRecorder.onstop=e=>{t.playData={type:t.recordedData.type,url:window.URL.createObjectURL(new Blob(t.recordedData.blobs,{type:t.recordedData.type}))},t.$refs.player.src=t.playData.url,t.isRecording=!1,t.timeElapsed=0,t.capturedStream.getTracks().forEach(e=>{e.stop()})},this.mediaRecorder.ondataavailable=e=>{const n=Math.floor(new Date/1e3);e.data&&(t.recordedData.blobs.push(e.data),"recording"===t.mediaRecorder.state&&(t.timeElapsed+=n-t.recordedData.timestamp,t.timeElapsed>=t.maxRecordTime&&t.mediaRecorder.stop())),t.recordedData.timestamp=n};else{const e=new AudioContext,t=e.createMediaStreamSource(this.capturedStream);e.resume(),this.mediaRecorder=new Recorder(t,{})}if(this.isPlaying&&(this.$refs.player.pause(),this.$refs.player.currentTime=0),this.isRecording=!0,this.mediaRecorder instanceof MediaRecorder)this.recordedData={timestamp:Math.floor(new Date/1e3),type:this.mediaRecorder.mimeType,blobs:[]},this.mediaRecorder.start(1e3);else{const e=()=>{if(t.isRecording){const n=Math.floor(new Date/1e3);t.timeElapsed+=n-t.recordedData.timestamp,t.recordedData.timestamp=n,t.timeElapsed>=t.maxRecordTime?(t.mediaRecorder.stop(),t.mediaRecorder.exportWAV(e=>{t.recordedData.blobs.push(e),t.playData={type:t.recordedData.type,url:window.URL.createObjectURL(new Blob(t.recordedData.blobs,{type:t.recordedData.type}))},t.$refs.player.src=t.playData.url}),t.mediaRecorder.clear(),t.isRecording=!1,t.timeElapsed=0,t.capturedStream.getTracks().forEach(e=>{e.stop()})):window.setTimeout(e,1e3)}};this.recordedData={timestamp:Math.floor(new Date/1e3),type:"audio/wav",blobs:[]},this.mediaRecorder.record(),window.setTimeout(e,1e3)}},stopRecording:function(e){if(this.mediaRecorder.stop(),this.mediaRecorder instanceof Recorder){const e=this;this.mediaRecorder.exportWAV(t=>{e.recordedData.blobs.push(t),e.playData={type:e.recordedData.type,url:window.URL.createObjectURL(new Blob(e.recordedData.blobs,{type:e.recordedData.type}))},e.$refs.player.src=e.playData.url}),this.mediaRecorder.clear(),this.isRecording=!1,this.timeElapsed=0,this.capturedStream.getTracks().forEach(e=>{e.stop()})}},uploadSound:function(e){const t=this,n=ue.ref();let a=[];if(this.input.length>0){let e,t=/(?:(?:"(.*?)")|([^\s]+))\s*/g;for(;null!==(e=t.exec(this.input));)void 0===e[1]&&a.push(e[2]),void 0===e[2]&&e[1].length>0&&a.push(e[1])}this.isUploading=!0,navigator.geolocation.getCurrentPosition(e=>{const r=n.child("sounds/"+t.generateUuid()).put(new Blob(t.recordedData.blobs,{type:t.recordedData.type}));r.on("state_changed",(function(e){t.progress=e.bytesTransferred/e.totalBytes}),(function(e){t.notify({text:e.message,accent:t.character.accent,image:t.character.image}),console.error(e),t.progress=0,t.isUploading=!1}),(function(){const n={name:r.snapshot.ref.name,type:t.recordedData.type,location:{latitude:e.coords.latitude,longitude:e.coords.longitude},geohash:t.encodeGeohash(e.coords.latitude,e.coords.longitude),tags:a,timestamp:Math.floor(new Date/1e3),user:{id:t.user.uid,name:t.user.displayName,image:t.user.photoURL}};var i=ce.ref("wonderland/sounds").push();i.set(n,(function(e){e&&(t.notify({text:e.message,accent:t.character.accent,image:t.character.image}),console.error(e))})),ce.ref("wonderland/stars").transaction((function(e){return(e||0)+1}));const o=a.length>0?a.join("/"):"",s=new Date(1e3*n.timestamp).getHours(),c=s>=6&&s<18?"/images/Marker-Light-Selected.svg":"/images/Marker-Dark-Selected.svg",u=new Microsoft.Maps.Pushpin(new Microsoft.Maps.Location(n.location.latitude,n.location.longitude),{title:o,icon:c});t.setImage(u,c,n),t.recordedData=null,t.sounds[u.id]=n,t.sounds[u.id].id=i.key,t.sounds[u.id].pushpin=u,t.sounds[u.id].handlers=[Microsoft.Maps.Events.addHandler(u,"click",async e=>{const n=new Date(1e3*t.sounds[e.target.id].timestamp).getHours();for(let e=t.playbackQueue.length-1;e>=0;e--)"generator"in t.playbackQueue[e]&&t.playbackQueue.splice(e,1);if(null!==t.playData&&"id"in t.playData&&t.playData.id in t.sounds){const e=new Date(1e3*t.sounds[t.playData.id].timestamp).getHours();t.setImage(t.sounds[t.playData.id].pushpin,e>=6&&e<18?"/images/Marker-Light.svg":"/images/Marker-Dark.svg",t.sounds[t.playData.id])}if(e.target.id in t.sounds){t.setImage(t.sounds[e.target.id].pushpin,n>=6&&n<18?"/images/Marker-Light-Selected.svg":"/images/Marker-Dark-Selected.svg",t.sounds[e.target.id]);try{t.playData={id:e.target.id,type:t.sounds[e.target.id].type,url:await ue.ref().child("sounds/"+t.sounds[e.target.id].name).getDownloadURL()},t.$refs.player.src=t.playData.url,t.$refs.player.play()}catch(e){console.error(e.message)}}}),Microsoft.Maps.Events.addHandler(u,"dblclick",e=>{window.location.hash=t.sounds[e.target.id].id})],t.map.entities.push(u),t.map.setView({center:new Microsoft.Maps.Location(n.location.latitude,n.location.longitude),zoom:t.map.getZoom()});for(let e=0;e<n.geohash.length;e++){const a=n.geohash.substring(0,n.geohash.length-e);a in t.soundCache&&delete t.soundCache[a]}t.progress=0,t.isUploading=!1,t.isBlinded=!0}))},e=>{t.notify({text:e.message,accent:t.character.accent,image:t.character.image}),console.error(e),t.isUploading=!1},{enableHighAccuracy:!0,timeout:5e3,maximumAge:0})},notify:function(e){const t=this;e.id=window.setTimeout(e=>{for(let n=0;n<t.notifications.length;n++)if(t.notifications[n].id==e.id){t.notifications.splice(n,1);break}},3e3,e),this.notifications.unshift(e)},inputChanged:function(e){this.input.length>0&&this.input.split(/\s/).length>10?this.inputHasError=!0:this.inputHasError=!1},blinded:async function(){this.preloadImages.splice(0),this.backgroundImages.splice(0);const e=function(e){let t=[].concat(e),n=e.length;for(;n>1;){const e=(a=0,r=n,a=Math.ceil(a),r=Math.floor(r),Math.floor(Math.random()*(r-a))+a);n--;const i=t[n];t[n]=t[e],t[e]=i}var a,r;return t}(this.presetImages);if(window.devicePixelRatio>0)for(const t of e)if("density"in t&&t.density===Math.floor(window.devicePixelRatio)&&t.dark===this.isDarkMode){for(const e of t.images)"width"in e&&"height"in e?this.preloadImages.push({width:e.width,height:e.height,url:e.source}):this.preloadImages.push({url:e.source});break}if(0===this.preloadImages.length)for(const t of e)if("density"in t==!1&&t.dark!==this.isDarkMode){for(const e of t.images)"width"in e&&"height"in e?this.preloadImages.push({width:e.width,height:e.height,url:e.source}):this.preloadImages.push({url:e.source});break}},load:function(e){let t=!0;for(let n of this.preloadImages)n.url==e?n.isLoaded=!0:"isLoaded"in n||(t=!1);if(t){const e=this;let t=0;for(const e of this.preloadImages)e.isLoaded&&("width"in e&&"height"in e?this.backgroundImages.push({index:t,width:e.width,height:e.height,url:e.url}):this.backgroundImages.push({index:t,url:e.url}),t++);this.preloadImages.splice(0),this.isBlinded=!1,this.$refs.sunrise.animate([{transform:"rotate(0deg)"},{transform:"rotate(360deg)"}],{duration:1e4,iterations:1}),this.isCompleted=!0,window.setTimeout(()=>{e.isCompleted=!1},5e3)}},error:function(e){let t=!0;for(let n of this.preloadImages)n.url==e?n.isLoaded=!0:"isLoaded"in n||(t=!1);if(t){for(const e of this.preloadImages)e.isLoaded&&this.backgroundImages.push(e.url);this.preloadImages.splice(0),this.isBlinded=!1}},setImage:function(e,t,n){const a=new Image;a.src=t,a.onload=()=>{if("image"in n.user){const t=new Image;t.crossOrigin="Anonymous",t.src=n.user.image,t.onload=()=>{const n=document.createElement("canvas"),r=n.getContext("2d");n.width=a.width,n.height=a.height+24+4,r.save(),r.arc(n.width/2,n.height-12,12,0,2*Math.PI,!1),r.clip(),r.drawImage(t,(n.width-24)/2,n.height-24,24,24),r.restore(),r.drawImage(a,0,0,a.width,a.height),e.setOptions({icon:n.toDataURL()})}}else{const t=document.createElement("canvas"),n=t.getContext("2d");t.width=a.width,t.height=a.height,n.drawImage(a,0,0,a.width,a.height),e.setOptions({icon:t.toDataURL()})}}},formatTime:function(e){const t=Math.floor(e),n=t%60;return("0"+Math.floor(t/60)).slice(-1)+":"+("00"+n).slice(-2)},animationStart:function(e){},animationEnd:function(e){const t=this;this.$nextTick(()=>{t.notificationsHeight=t.$refs.notifications.getBoundingClientRect().height})},tickerUpdated:function(e){const t=this;this.$nextTick(()=>{for(const e of document.body.querySelectorAll("#ticker>.columns>.column>.control .clip")){let n=0;for(const t of e.querySelectorAll(":scope .ticker-wrap .ticker .item"))n+=t.getBoundingClientRect().width;n>0&&(t.tickerWidth=Math.min(n/2,document.body.querySelector("#ticker>.columns>.column>.control .level:first-child").getBoundingClientRect().width),e.querySelector(":scope .ticker-wrap .ticker").style.width=n+"px")}})},take:function(e,t){if(e.length>t){let n=[].concat(e);return n.splice(t),n}return e},reverse:function(e){return[].concat(e).reverse()},getDistance:function(e,t,n,a){var r=this.deg2rad(n-e),i=this.deg2rad(a-t),o=Math.sin(r/2)*Math.sin(r/2)+Math.cos(this.deg2rad(e))*Math.cos(this.deg2rad(n))*Math.sin(i/2)*Math.sin(i/2);return 6371*(2*Math.atan2(Math.sqrt(o),Math.sqrt(1-o)))},deg2rad:function(e){return e*(Math.PI/180)},encodeGeohash:function(e,t,n=12){const a=[16,8,4,2,1];var r=1,i=[],o=[],s=0,c=0;let u="";for(i[0]=-90,i[1]=90,o[0]=-180,o[1]=180;u.length<n;){if(r){const e=(o[0]+o[1])/2;t>e?(c|=a[s],o[0]=e):o[1]=e}else{const t=(i[0]+i[1])/2;e>t?(c|=a[s],i[0]=t):i[1]=t}r=!r,s<4?s++:(u+="0123456789bcdefghjkmnpqrstuvwxyz"[c],s=0,c=0)}return u},decodeGeohash:function(e){const t=[16,8,4,2,1];var n=1,a=[],r=[];a[0]=-90,a[1]=90,r[0]=-180,r[1]=180;for(var i=0;i<e.length;i++)for(var o=e[i],s="0123456789bcdefghjkmnpqrstuvwxyz".indexOf(o),c=0;c<5;c++){const e=t[c];n?(2,s&e?r[0]=(r[0]+r[1])/2:r[1]=(r[0]+r[1])/2):(2,s&e?a[0]=(a[0]+a[1])/2:a[1]=(a[0]+a[1])/2),n=!n}return a[2]=(a[0]+a[1])/2,r[2]=(r[0]+r[1])/2,{latitude:a[2],longitude:r[2],topleft:{latitude:a[0],longitude:r[0]},topright:{latitude:a[1],longitude:r[0]},bottomright:{latitude:a[1],longitude:r[1]},bottomleft:{latitude:a[0],longitude:r[1]}}},getNeighbors:function(e){const t=this.calculateAdjacent(e,"right"),n=this.calculateAdjacent(e,"left");return{top:this.calculateAdjacent(e,"top"),bottom:this.calculateAdjacent(e,"bottom"),right:t,left:n,topleft:this.calculateAdjacent(n,"top"),topright:this.calculateAdjacent(t,"top"),bottomright:this.calculateAdjacent(t,"bottom"),bottomleft:this.calculateAdjacent(n,"bottom")}},calculateAdjacent:function(e,t){const n={right:{even:"bc01fg45238967deuvhjyznpkmstqrwx"},left:{even:"238967debc01fg45kmstqrwxuvhjyznp"},top:{even:"p0r21436x8zb9dcf5h7kjnmqesgutwvy"},bottom:{even:"14365h7k9dcfesgujnmqp0r2twvyx8zb"}},a={right:{even:"bcfguvyz"},left:{even:"0145hjnp"},top:{even:"prxz"},bottom:{even:"028b"}};n.bottom.odd=n.left.even,n.top.odd=n.right.even,n.left.odd=n.bottom.even,n.right.odd=n.top.even,a.bottom.odd=a.left.even,a.top.odd=a.right.even,a.left.odd=a.bottom.even,a.right.odd=a.top.even;var r=(e=e.toLowerCase()).charAt(e.length-1),i=e.length%2?"odd":"even",o=e.substring(0,e.length-1);return-1!=a[t][i].indexOf(r)&&(o=this.calculateAdjacent(o,t)),o+"0123456789bcdefghjkmnpqrstuvwxyz"[n[t][i].indexOf(r)]},generateUuid:function(){let e="xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".split("");for(let t=0,n=e.length;t<n;t++)switch(e[t]){case"x":e[t]=Math.floor(16*Math.random()).toString(16);break;case"y":e[t]=(Math.floor(4*Math.random())+8).toString(16)}return e.join("")},prepare:function(e,t=null){function n(e,t){return e=Math.ceil(e),t=Math.floor(t),Math.floor(Math.random()*(t-e))+e}let a=[],r=[];for(const n of e){const e=t;if(null===t&&n.name in this.states&&(e=this.states[n.name]),null!==e&&"state"in n){if(!new RegExp(n.state).test(e))continue}a.push(n)}if(a.length>0){let e=[];for(const r of a[n(0,a.length)].sequence)null!==t&&(this.states[r.name]=t),e.push(r);for(;e.length>0;){const t=e.shift();if("Sequence"==t.type){if("sequence"in t==!1){let a=[],r=[];for(const e of this.character.sequences){let n=this.getSequenceStack(e,t);if(n.length>0){let e=[];do{let t=n.pop();if(n.length>0){let a=[];for(const r of n[n.length-1].sequence)if("Sequence"==r.type){if("sequence"in r){let t=!0;for(const n of e)if(n===r){t=!1;break}t&&a.push(r)}if(r===t)break}for(;a.length>0;)e.push(a.pop())}if("sequence"in t){let n=!0;for(const a of e)if(a===t){n=!1;break}n&&e.push(t)}}while(n.length>0);for(;e.length>0;)a.push(e.pop())}else a.push(e)}if("state"in t){this.states[t.name]=t.state;for(const e of a)if(e.name==t.name){if(!new RegExp(e.state).test(t.state))continue;r.push(e)}}else for(const e of a)if(e.name==t.name){if("state"in e){if(e.name in this.states==!1)continue;if(!new RegExp(e.state).test(this.states[e.name]))continue}r.push(e)}if(r.length>0){let t=0;for(const a of r[n(0,r.length)].sequence)e.splice(t,0,a),t++}}}else r.push(t)}}return r},getSequenceStack:function(e,t){let n=[];if(n.push(e),n[n.length-1]!==t){if("sequence"in e)for(const a of e.sequence)if("Sequence"==a.type){let e=this.getSequenceStack(a,t);if(e.length>0&&e[e.length-1]===t){let t=[];do{t.push(e.pop())}while(e.length>0);do{n.push(t.pop())}while(t.length>0);return n}}n.pop()}return n}},updated:function(){for(const e of document.body.querySelectorAll("#ticker>.columns>.column>.control .clip")){let t=0;for(const n of e.querySelectorAll(":scope .ticker-wrap .ticker .item"))t+=n.getBoundingClientRect().width;t>0&&(this.tickerWidth=Math.min(t/2,document.body.querySelector("#ticker>.columns>.column>.control .level:first-child").getBoundingClientRect().width),e.querySelector(":scope .ticker-wrap .ticker").style.width=t+"px")}},mounted:async function(){const e=this,t=localStorage.getItem("wonderland"),n=localStorage.getItem("credential");let a=null;if(t)try{const e=JSON.parse(t);null!==e&&(this.isMuted=e.mute)}catch(e){localStorage.removeItem("bot")}if(n)try{a=JSON.parse(n)}catch(e){localStorage.removeItem("credential")}this.$refs.player.addEventListener("play",t=>{e.isPlaying=!0,"id"in e.playData&&e.playData.id in e.sounds&&("name"in e.sounds[e.playData.id].user&&e.notify({text:e.sounds[e.playData.id].user.name,accent:e.character.accent,image:"image"in e.sounds[e.playData.id].user?e.sounds[e.playData.id].user.user:null}),ce.ref("wonderland/sounds/"+e.sounds[e.playData.id].id+"/plays").transaction((function(e){return(e||0)+1})))}),this.$refs.player.addEventListener("pause",t=>{e.isPlaying=!1,e.timeElapsed=0}),this.$refs.player.addEventListener("ended",t=>{e.playbackQueue.length>0?e.forward():(e.isPlaying=!1,e.timeElapsed=0)}),this.$refs.player.addEventListener("timeupdate",t=>{e.timeElapsed=e.$refs.player.currentTime}),this.map=new Microsoft.Maps.Map(this.$refs.map,{mapTypeId:Microsoft.Maps.MapTypeId.grayscale}),this.map.setOptions({enableHighDpi:window.devicePixelRatio>1,showLocateMeButton:!1,showMapTypeSelector:!1,showZoomButtons:!1,showScalebar:!1}),this.layer=new Microsoft.Maps.Layer,this.layer.setVisible(!1),this.map.layers.insert(this.layer),Microsoft.Maps.Events.addHandler(this.map,"viewchangeend",()=>{null!==e.user&&e.update()});try{const e=await fetch("/assets/wonderland.json",{mode:"cors",method:"GET",headers:{"Content-Type":"application/x-www-form-urlencoded"}});if(!e.ok)throw new Error(e.statusText);this.character=await e.json()}catch(e){console.error(e)}null!==a&&"twitter.com"===a.providerId?firebase.auth().signInWithCredential(firebase.auth.TwitterAuthProvider.credential(a.accessToken,a.secret)).catch(e=>{console.error(e.code,e.message)}):firebase.auth().signInAnonymously().catch((function(e){console.error(e.code,e.message)})),firebase.auth().onAuthStateChanged((async function(t){if(t){e.user=t;const n=decodeURIComponent(window.location.hash.substring(1));if(n.length>0){const t=await ce.ref("wonderland/sounds/"+n).once("value");if(t.exists()){const a=t.val(),r=new Date(1e3*a.timestamp).getHours();let i=null;for(const t in e.sounds)if(n===e.sounds[t].id){i=t;break}if(null===i){const t=r>=6&&r<18?"/images/Marker-Light-Selected.svg":"/images/Marker-Dark-Selected.svg",o=new Microsoft.Maps.Pushpin(new Microsoft.Maps.Location(a.location.latitude,a.location.longitude),{title:"tags"in a?a.tags.join("/"):"",icon:t});e.setImage(o,t,a),i=o.id,e.sounds[o.id]=a,e.sounds[o.id].id=n,e.sounds[o.id].pushpin=o,e.sounds[o.id].handlers=[Microsoft.Maps.Events.addHandler(o,"click",async t=>{const n=new Date(1e3*e.sounds[t.target.id].timestamp).getHours();for(let t=e.playbackQueue.length-1;t>=0;t--)"generator"in e.playbackQueue[t]&&e.playbackQueue.splice(t,1);if(null!==e.playData&&"id"in e.playData&&e.playData.id in e.sounds){const t=new Date(1e3*e.sounds[e.playData.id].timestamp).getHours();e.setImage(e.sounds[e.playData.id].pushpin,t>=6&&t<18?"/images/Marker-Light.svg":"/images/Marker-Dark.svg",e.sounds[e.playData.id])}if(t.target.id in e.sounds){e.setImage(e.sounds[t.target.id].pushpin,n>=6&&n<18?"/images/Marker-Light-Selected.svg":"/images/Marker-Dark-Selected.svg",e.sounds[t.target.id]);try{e.playData={id:t.target.id,type:e.sounds[t.target.id].type,url:await ue.ref().child("sounds/"+e.sounds[t.target.id].name).getDownloadURL()},e.$refs.player.src=e.playData.url,e.$refs.player.play()}catch(e){console.error(e.message)}}}),Microsoft.Maps.Events.addHandler(o,"dblclick",t=>{window.location.hash=e.sounds[t.target.id].id})],e.map.entities.push(o)}else e.setImage(e.sounds[i].pushpin,r>=6&&r<18?"/images/Marker-Light-Selected.svg":"/images/Marker-Dark-Selected.svg",e.sounds[i]);e.playData={id:i,type:a.type,url:await ue.ref().child("sounds/"+a.name).getDownloadURL()},e.$refs.player.src=e.playData.url,e.map.setView({center:new Microsoft.Maps.Location(a.location.latitude,a.location.longitude),zoom:16})}}else navigator.geolocation.getCurrentPosition(t=>{e.map.setView({center:new Microsoft.Maps.Location(t.coords.latitude,t.coords.longitude),zoom:e.map.getZoom()})},t=>{e.update(),e.notify({text:t.message,accent:e.character.accent,image:e.character.image}),console.error(t)},{enableHighAccuracy:!0,timeout:5e3,maximumAge:0});ce.ref("wonderland/sounds").orderByChild("timestamp").limitToLast(100).on("value",async t=>{if(t.exists()){const n=t.val();let a=!1;for(const t in n)if(!e.recentSounds.some(e=>e.id===t)){a=!0;break}if(a){e.recentSounds.splice(0);for(const t in n)n[t].id=t,e.recentSounds.push(n[t])}}}),ce.ref("wonderland/stars").on("value",t=>{const n=t.val();e.stars=null===n?0:n})}else ce.ref("wonderland/sounds").off("value"),ce.ref("wonderland/stars").off("value"),e.user=null}))}}).mount("#app");window.addEventListener("resize",e=>{t.$nextTick(()=>{for(const e of document.body.querySelectorAll("#ticker>.columns>.column>.control .clip")){let n=0;for(const t of e.querySelectorAll(":scope .ticker-wrap .ticker .item"))n+=t.getBoundingClientRect().width;n>0&&(t.tickerWidth=Math.min(n/2,document.body.querySelector("#ticker>.columns>.column>.control .level:first-child").getBoundingClientRect().width),e.querySelector(":scope .ticker-wrap .ticker").style.width=n+"px")}})}),window.matchMedia("(prefers-color-scheme: dark)").addEventListener("change",e=>{e.matches?t.isDarkMode=!0:t.isDarkMode=!1})})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FuaW1lanMvbGliL2FuaW1lLmVzLmpzIiwid2VicGFjazovLy8uL3NyYy9tYWluLmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiZGVmYXVsdEluc3RhbmNlU2V0dGluZ3MiLCJ1cGRhdGUiLCJiZWdpbiIsImxvb3BCZWdpbiIsImNoYW5nZUJlZ2luIiwiY2hhbmdlIiwiY2hhbmdlQ29tcGxldGUiLCJsb29wQ29tcGxldGUiLCJjb21wbGV0ZSIsImxvb3AiLCJkaXJlY3Rpb24iLCJhdXRvcGxheSIsInRpbWVsaW5lT2Zmc2V0IiwiZGVmYXVsdFR3ZWVuU2V0dGluZ3MiLCJkdXJhdGlvbiIsImRlbGF5IiwiZW5kRGVsYXkiLCJlYXNpbmciLCJyb3VuZCIsInZhbGlkVHJhbnNmb3JtcyIsImNhY2hlIiwiQ1NTIiwic3ByaW5ncyIsIm1pbk1heCIsInZhbCIsIm1pbiIsIm1heCIsIk1hdGgiLCJzdHJpbmdDb250YWlucyIsInN0ciIsInRleHQiLCJpbmRleE9mIiwiYXBwbHlBcmd1bWVudHMiLCJmdW5jIiwiYXJncyIsImFwcGx5IiwiaXMiLCJhcnIiLCJhIiwiQXJyYXkiLCJpc0FycmF5Iiwib2JqIiwidG9TdHJpbmciLCJwdGgiLCJzdmciLCJTVkdFbGVtZW50IiwiaW5wIiwiSFRNTElucHV0RWxlbWVudCIsImRvbSIsIm5vZGVUeXBlIiwiZm5jIiwidW5kIiwibmlsIiwiaGV4IiwidGVzdCIsInJnYiIsImhzbCIsImNvbCIsInBhcnNlRWFzaW5nUGFyYW1ldGVycyIsInN0cmluZyIsIm1hdGNoIiwiZXhlYyIsInNwbGl0IiwibWFwIiwicGFyc2VGbG9hdCIsInNwcmluZyIsInBhcmFtcyIsIm1hc3MiLCJzdGlmZm5lc3MiLCJkYW1waW5nIiwidmVsb2NpdHkiLCJ3MCIsInNxcnQiLCJ6ZXRhIiwid2QiLCJiIiwic29sdmVyIiwicHJvZ3Jlc3MiLCJleHAiLCJjb3MiLCJzaW4iLCJjYWNoZWQiLCJlbGFwc2VkIiwicmVzdCIsInN0ZXBzIiwiY2VpbCIsImVhc2VzIiwiZnVuY3Rpb25FYXNpbmdzIiwiYmV6aWVyIiwiQSIsImFBMSIsImFBMiIsIkIiLCJDIiwiY2FsY0JlemllciIsImFUIiwiZ2V0U2xvcGUiLCJtWDEiLCJtWTEiLCJtWDIiLCJtWTIiLCJzYW1wbGVWYWx1ZXMiLCJGbG9hdDMyQXJyYXkiLCJ4IiwiZ2V0VEZvclgiLCJhWCIsImludGVydmFsU3RhcnQiLCJjdXJyZW50U2FtcGxlIiwia1NwbGluZVRhYmxlU2l6ZSIsImd1ZXNzRm9yVCIsImluaXRpYWxTbG9wZSIsImFHdWVzc1QiLCJjdXJyZW50U2xvcGUiLCJuZXd0b25SYXBoc29uSXRlcmF0ZSIsImFBIiwiYUIiLCJjdXJyZW50WCIsImN1cnJlbnRUIiwiYWJzIiwiYmluYXJ5U3ViZGl2aWRlIiwicGVubmVyIiwibGluZWFyIiwiU2luZSIsIlBJIiwiQ2lyYyIsIkJhY2siLCJCb3VuY2UiLCJwb3cyIiwicG93IiwiRWxhc3RpYyIsImFtcGxpdHVkZSIsInBlcmlvZCIsImFzaW4iLCJmb3JFYWNoIiwia2V5cyIsImVhc2VJbiIsInBhcnNlRWFzaW5ncyIsImVhc2UiLCJzZWxlY3RTdHJpbmciLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJlIiwiZmlsdGVyQXJyYXkiLCJjYWxsYmFjayIsImxlbiIsImxlbmd0aCIsInRoaXNBcmciLCJhcmd1bWVudHMiLCJyZXN1bHQiLCJwdXNoIiwiZmxhdHRlbkFycmF5IiwicmVkdWNlIiwiY29uY2F0IiwidG9BcnJheSIsIk5vZGVMaXN0IiwiSFRNTENvbGxlY3Rpb24iLCJzbGljZSIsImFycmF5Q29udGFpbnMiLCJzb21lIiwiY2xvbmVPYmplY3QiLCJjbG9uZSIsInJlcGxhY2VPYmplY3RQcm9wcyIsIm8xIiwibzIiLCJtZXJnZU9iamVjdHMiLCJjb2xvclRvUmdiIiwicmdiVmFsdWUiLCJoZXhWYWx1ZSIsInJlcGxhY2UiLCJnIiwicGFyc2VJbnQiLCJoZXhUb1JnYmEiLCJoc2xWYWx1ZSIsImgiLCJodWUycmdiIiwicSIsImhzbFRvUmdiYSIsImdldFVuaXQiLCJnZXRGdW5jdGlvblZhbHVlIiwiYW5pbWF0YWJsZSIsInRhcmdldCIsImlkIiwidG90YWwiLCJnZXRBdHRyaWJ1dGUiLCJlbCIsInByb3AiLCJjb252ZXJ0UHhUb1VuaXQiLCJ1bml0IiwidGVtcEVsIiwiY3JlYXRlRWxlbWVudCIsInRhZ05hbWUiLCJwYXJlbnRFbCIsInBhcmVudE5vZGUiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJzdHlsZSIsInBvc2l0aW9uIiwid2lkdGgiLCJmYWN0b3IiLCJvZmZzZXRXaWR0aCIsInJlbW92ZUNoaWxkIiwiY29udmVydGVkVW5pdCIsImdldENTU1ZhbHVlIiwidXBwZXJjYXNlUHJvcE5hbWUiLCJ0b0xvd2VyQ2FzZSIsImdldENvbXB1dGVkU3R5bGUiLCJnZXRQcm9wZXJ0eVZhbHVlIiwiZ2V0QW5pbWF0aW9uVHlwZSIsImdldEVsZW1lbnRUcmFuc2Zvcm1zIiwidHJhbnNmb3JtIiwicmVnIiwidHJhbnNmb3JtcyIsIk1hcCIsInNldCIsImdldFRyYW5zZm9ybVZhbHVlIiwicHJvcE5hbWUiLCJkZWZhdWx0VmFsIiwiZ2V0VHJhbnNmb3JtVW5pdCIsImxpc3QiLCJnZXRPcmlnaW5hbFRhcmdldFZhbHVlIiwiZ2V0UmVsYXRpdmVWYWx1ZSIsInRvIiwiZnJvbSIsIm9wZXJhdG9yIiwidSIsInkiLCJ2YWxpZGF0ZVZhbHVlIiwib3JpZ2luYWxVbml0IiwidW5pdExlc3MiLCJzdWJzdHIiLCJnZXREaXN0YW5jZSIsInAxIiwicDIiLCJnZXRQb2x5bGluZUxlbmd0aCIsInByZXZpb3VzUG9zIiwicG9pbnRzIiwidG90YWxMZW5ndGgiLCJudW1iZXJPZkl0ZW1zIiwiY3VycmVudFBvcyIsImdldEl0ZW0iLCJnZXRUb3RhbExlbmd0aCIsImdldENpcmNsZUxlbmd0aCIsImdldFJlY3RMZW5ndGgiLCJnZXRMaW5lTGVuZ3RoIiwiZ2V0UG9seWdvbkxlbmd0aCIsImdldFBhcmVudFN2ZyIsInBhdGhFbCIsInN2Z0RhdGEiLCJwYXJlbnRTdmdFbCIsImdldFBhcmVudFN2Z0VsIiwicmVjdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInZpZXdCb3hBdHRyIiwiaGVpZ2h0Iiwidmlld0JveCIsInciLCJ2VyIsInZIIiwiZ2V0UGF0aFByb2dyZXNzIiwicGF0aCIsImlzUGF0aFRhcmdldEluc2lkZVNWRyIsInBvaW50Iiwib2Zmc2V0IiwiZ2V0UG9pbnRBdExlbmd0aCIsInAwIiwic2NhbGVYIiwic2NhbGVZIiwiYXRhbjIiLCJkZWNvbXBvc2VWYWx1ZSIsInJneCIsIm9yaWdpbmFsIiwibnVtYmVycyIsIk51bWJlciIsInN0cmluZ3MiLCJwYXJzZVRhcmdldHMiLCJ0YXJnZXRzIiwiaXRlbSIsInBvcyIsInNlbGYiLCJnZXRBbmltYXRhYmxlcyIsInBhcnNlZCIsIm5vcm1hbGl6ZVByb3BlcnR5VHdlZW5zIiwidHdlZW5TZXR0aW5ncyIsInNldHRpbmdzIiwicHJvcEFycmF5IiwidiIsImsiLCJnZXRQcm9wZXJ0aWVzIiwicHJvcGVydGllcyIsImtleWZyYW1lcyIsInByb3BlcnR5TmFtZXMiLCJuZXdLZXkiLCJmbGF0dGVuS2V5ZnJhbWVzIiwidHdlZW5zIiwibm9ybWFsaXplVHdlZW5zIiwicHJldmlvdXNUd2VlbiIsInR3ZWVuIiwibm9ybWFsaXplVHdlZW5WYWx1ZXMiLCJ0d2VlblZhbHVlIiwidG9Vbml0Iiwib3JpZ2luYWxWYWx1ZSIsInByZXZpb3VzVmFsdWUiLCJmcm9tVW5pdCIsInN0YXJ0IiwiZW5kIiwiaXNQYXRoIiwiaXNDb2xvciIsInNldFByb2dyZXNzVmFsdWUiLCJjc3MiLCJhdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGUiLCJtYW51YWwiLCJsYXN0Iiwic2V0VGFyZ2V0c1ZhbHVlIiwidmFsdWVVbml0IiwiYW5pbVR5cGUiLCJnZXRBbmltYXRpb25zIiwiYW5pbWF0YWJsZXMiLCJsYXN0VHdlZW4iLCJ0eXBlIiwiY3JlYXRlQW5pbWF0aW9uIiwiZ2V0SW5zdGFuY2VUaW1pbmdzIiwiYW5pbWF0aW9ucyIsImFuaW1MZW5ndGgiLCJnZXRUbE9mZnNldCIsImFuaW0iLCJ0aW1pbmdzIiwiaW5zdGFuY2VJRCIsImFjdGl2ZUluc3RhbmNlcyIsImVuZ2luZSIsInJhZiIsInN0ZXAiLCJhY3RpdmVJbnN0YW5jZXNMZW5ndGgiLCJhY3RpdmVJbnN0YW5jZSIsInBhdXNlZCIsInNwbGljZSIsInRpY2siLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJ1bmRlZmluZWQiLCJhZGRFdmVudExpc3RlbmVyIiwiYW5pbWUiLCJzdXNwZW5kV2hlbkRvY3VtZW50SGlkZGVuIiwiaXNEb2N1bWVudEhpZGRlbiIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwiaW5zdGFuY2UiLCJfb25Eb2N1bWVudFZpc2liaWxpdHkiLCJoaWRkZW4iLCJjaGlsZHJlbiIsInN0YXJ0VGltZSIsImxhc3RUaW1lIiwibm93IiwiY2hpbGRyZW5MZW5ndGgiLCJyZXNvbHZlIiwibWFrZVByb21pc2UiLCJwcm9taXNlIiwid2luZG93IiwiUHJvbWlzZSIsIl9yZXNvbHZlIiwiZmluaXNoZWQiLCJpbnN0YW5jZVNldHRpbmdzIiwiY3JlYXRlTmV3SW5zdGFuY2UiLCJ0b2dnbGVJbnN0YW5jZURpcmVjdGlvbiIsInJldmVyc2VkIiwiY2hpbGQiLCJhZGp1c3RUaW1lIiwidGltZSIsInJlc2V0VGltZSIsImN1cnJlbnRUaW1lIiwic3BlZWQiLCJzZWVrQ2hpbGQiLCJzZWVrIiwic2V0QW5pbWF0aW9uc1Byb2dyZXNzIiwiaW5zVGltZSIsImFuaW1hdGlvbnNMZW5ndGgiLCJ0d2Vlbkxlbmd0aCIsImVhc2VkIiwiaXNOYU4iLCJ0b051bWJlcnNMZW5ndGgiLCJ0b051bWJlciIsImZyb21OdW1iZXIiLCJzdHJpbmdzTGVuZ3RoIiwibiQxIiwiY3VycmVudFZhbHVlIiwic2V0Q2FsbGJhY2siLCJjYiIsInBhc3NUaHJvdWdoIiwic2V0SW5zdGFuY2VQcm9ncmVzcyIsImVuZ2luZVRpbWUiLCJpbnNEdXJhdGlvbiIsImluc0RlbGF5IiwiaW5zRW5kRGVsYXkiLCJyZXZlcnNlUGxheWJhY2siLCJpJDEiLCJzeW5jSW5zdGFuY2VDaGlsZHJlbiIsImJlZ2FuIiwibG9vcEJlZ2FuIiwiY2hhbmdlQmVnYW4iLCJjaGFuZ2VDb21wbGV0ZWQiLCJyZW1haW5pbmciLCJjb21wbGV0ZWQiLCJyZXNldCIsInBhdXNlIiwicGxheSIsInJldmVyc2UiLCJyZXN0YXJ0IiwicmVtb3ZlIiwicmVtb3ZlVGFyZ2V0c0Zyb21JbnN0YW5jZSIsInJlbW92ZVRhcmdldHNGcm9tQW5pbWF0aW9ucyIsInRhcmdldHNBcnJheSIsImNoaWxkQW5pbWF0aW9ucyIsInZlcnNpb24iLCJydW5uaW5nIiwiY29udmVydFB4IiwicGVyY2VudCIsInNldERhc2hvZmZzZXQiLCJwYXRoTGVuZ3RoIiwic3RhZ2dlciIsImdyaWQiLCJheGlzIiwiZnJvbUluZGV4IiwiZnJvbUZpcnN0IiwiZnJvbUNlbnRlciIsImZyb21MYXN0IiwiaXNSYW5nZSIsInZhbDEiLCJ2YWwyIiwidmFsdWVzIiwibWF4VmFsdWUiLCJpbmRleCIsImZyb21YIiwiZnJvbVkiLCJmbG9vciIsImRpc3RhbmNlWCIsImRpc3RhbmNlWSIsInRpbWVsaW5lIiwidGwiLCJhZGQiLCJpbnN0YW5jZVBhcmFtcyIsInRsSW5kZXgiLCJpbnMiLCJpbnNQYXJhbXMiLCJ0bER1cmF0aW9uIiwicmFuZG9tIiwiZmlyZWJhc2UiLCJpbml0aWFsaXplQXBwIiwiYXBpS2V5IiwiYXV0aERvbWFpbiIsImRhdGFiYXNlVVJMIiwicHJvamVjdElkIiwic3RvcmFnZUJ1Y2tldCIsIm1lc3NhZ2luZ1NlbmRlcklkIiwiYXBwSWQiLCJtZWFzdXJlbWVudElkIiwiYW5hbHl0aWNzIiwiZGF0YWJhc2UiLCJzdG9yYWdlIiwiZXZlbnQiLCJhcHAiLCJWdWUiLCJjcmVhdGVBcHAiLCJkYXRhIiwidXNlciIsImlzRGFya01vZGUiLCJjYXB0dXJlZFN0cmVhbSIsIm1lZGlhUmVjb3JkZXIiLCJpc1JlY29yZGluZyIsInJlY29yZGVkRGF0YSIsIm1heFJlY29yZFRpbWUiLCJpc1BsYXlpbmciLCJwbGF5YmFja1F1ZXVlIiwicGxheURhdGEiLCJ0aW1lRWxhcHNlZCIsImlzVXBsb2FkaW5nIiwiaXNDb21wbGV0ZWQiLCJpc0JsaW5kZWQiLCJwcmVzZXRJbWFnZXMiLCJmcHMiLCJkYXJrIiwiaW1hZ2VzIiwic291cmNlIiwiZGVuc2l0eSIsImJhY2tncm91bmRJbWFnZXMiLCJwcmVsb2FkSW1hZ2VzIiwicXVlcnlRdWV1ZSIsInNvdW5kcyIsInNvdW5kQ2FjaGUiLCJyZWNlbnRTb3VuZHMiLCJpc1JldmVhbGVkIiwiaW5wdXQiLCJpbnB1dEhhc0Vycm9yIiwibm90aWZpY2F0aW9ucyIsIm5vdGlmaWNhdGlvbnNIZWlnaHQiLCJhbmltYXRlZE5vdGlmaWNhdGlvbnNIZWlnaHQiLCJ0aWNrZXJXaWR0aCIsImFuaW1hdGVkVGlja2VyV2lkdGgiLCJzdGFycyIsImFuaW1hdGVkU3RhcnMiLCJ3b3JkcyIsImNoYXJhY3RlciIsInN0YXRlcyIsImxheWVyIiwiaXNFeHBhbmRlZCIsImlzTG9hZGluZyIsImlzTXV0ZWQiLCJpc0NvbGxhcHNlZCIsImlzVXBkYXRpbmciLCJiYWNrZ3JvdW5kSW1hZ2VzUXVldWUiLCJpc1BvcHVwIiwiaXNMZWFybmluZyIsImlzQW5pbWF0aW5nIiwiZmVlZFF1ZXVlIiwiYW5pbWF0ZWRJbnB1dExlbmd0aCIsIm1heElucHV0TGVuZ3RoIiwibWVzc2FnZXMiLCJtYXhNZXNzYWdlcyIsIndvcmQiLCJ0YWdzIiwibWF4VGFncyIsInNjcm9sbFRpbWVvdXRJRCIsInRpY2tJbnRlcnZhbElEIiwic2NyZWVuc2hvdCIsIndhdGNoIiwibmV3VmFsdWUiLCJsb2NhbFN0b3JhZ2UiLCJzZXRJdGVtIiwiSlNPTiIsInN0cmluZ2lmeSIsIm11dGUiLCJyZW1vdmVJdGVtIiwiaGFuZGxlciIsIiRuZXh0VGljayIsImNsaXAiLCJlbGVtZW50IiwicXVlcnlTZWxlY3RvciIsImRlZXAiLCJ0aGlzIiwiZWxlbWVudHMiLCJmcmFtZVJhdGUiLCJhbmltYXRlIiwiZmlsbCIsIml0ZXJhdGlvbnMiLCJJbmZpbml0eSIsIiRyZWZzIiwiY291bnQiLCJtZXRob2RzIiwic2lnbkluIiwiYXV0aCIsInNpZ25JbldpdGhQb3B1cCIsIlR3aXR0ZXJBdXRoUHJvdmlkZXIiLCJ0aGVuIiwiY3JlZGVudGlhbCIsInByb3ZpZGVySWQiLCJhY2Nlc3NUb2tlbiIsInNlY3JldCIsImNhdGNoIiwiZXJyb3IiLCJjb25zb2xlIiwiY29kZSIsIm1lc3NhZ2UiLCJzaWduT3V0Iiwic2lnbkluQW5vbnltb3VzbHkiLCJhc3luYyIsImNlbnRlckxvY2F0aW9uIiwiZ2V0Q2VudGVyIiwiY2VudGVyR2VvaGFzaCIsImVuY29kZUdlb2hhc2giLCJsYXRpdHVkZSIsImxvbmdpdHVkZSIsIjEiLCIyIiwiMyIsIjQiLCI1IiwiNiIsIjciLCI4IiwiOSIsIjEwIiwiMTEiLCIxMiIsIjEzIiwiMTQiLCIxNSIsIjE2IiwiMTciLCIxOCIsIjE5IiwiMjAiLCJnZXRab29tIiwibmVpZ2hib3JzIiwiZ2V0TmVpZ2hib3JzIiwiZ2VvaGFzaGVzIiwicHJpbWl0aXZlcyIsImRlY29kZUdlb2hhc2giLCJ0aW1lc3RhbXAiLCJEYXRlIiwidGVtcFNvdW5kQ2FjaGUiLCJpc1VwZGF0ZWQiLCJkb2N1bWVudHMiLCJNaWNyb3NvZnQiLCJNYXBzIiwiUG9seWdvbiIsIkxvY2F0aW9uIiwidG9wbGVmdCIsInRvcHJpZ2h0IiwiYm90dG9tcmlnaHQiLCJib3R0b21sZWZ0IiwiZmlsbENvbG9yIiwic3Ryb2tlQ29sb3IiLCJzdHJva2VUaGlja25lc3MiLCJzZXRQcmltaXRpdmVzIiwiZ2VvaGFzaCIsInNvdW5kIiwic25hcHNob3QiLCJyZWYiLCJkYXRhYmFzZVJvb3QiLCJvcmRlckJ5Q2hpbGQiLCJsaW1pdFRvTGFzdCIsInN0YXJ0QXQiLCJlbmRBdCIsIm9uY2UiLCJleGlzdHMiLCJkaWN0aW9uYXJ5Iiwic2hpZnQiLCJ0YWtlIiwic29ydCIsImlzTmV3IiwidGl0bGUiLCJob3VycyIsImdldEhvdXJzIiwiaWNvblVybCIsImpvaW4iLCJ0b2tlbnMiLCJwdXNocGluIiwiUHVzaHBpbiIsImxvY2F0aW9uIiwiaWNvbiIsInNldEltYWdlIiwiRXZlbnRzIiwiYWRkSGFuZGxlciIsInVybCIsImdldERvd25sb2FkVVJMIiwicGxheWVyIiwic3JjIiwiaGFzaCIsImVudGl0aWVzIiwiaGFuZGxlcklkIiwiaGFuZGxlcnMiLCJyZW1vdmVIYW5kbGVyIiwicmVzdWx0cyIsImVwc2lsb24iLCJmaWx0ZXJlZERvY3VtZW50cyIsInRlcm1GcmVxdWVuY2llcyIsImludmVyc2VEb2N1bWVudEZyZXF1ZW5jeSIsImJhc2VUaW1lIiwiZ2V0VGltZSIsInNjb3JlRGljdGlvbmFyeSIsInNjb3JlcyIsIm1heFNjb3JlIiwidGVybVNldCIsInRva2VuIiwiaW5jbHVkZXMiLCJsb2ciLCJ1bnNoaWZ0IiwidGYiLCJ0ZXJtRnJlcXVlbmN5IiwidGZpZGYiLCJ0ZXJtIiwic2NvcmUiLCJpc0NoYW5nZWQiLCJwcmVwYXJlIiwidGlja2VyIiwiZmlsdGVyIiwiaW1hZ2UiLCJsb2NhdGUiLCJuYXZpZ2F0b3IiLCJnZW9sb2NhdGlvbiIsImdldEN1cnJlbnRQb3NpdGlvbiIsInNldFZpZXciLCJjZW50ZXIiLCJjb29yZHMiLCJ6b29tIiwibm90aWZ5IiwiYWNjZW50IiwiZW5hYmxlSGlnaEFjY3VyYWN5IiwidGltZW91dCIsIm1heGltdW1BZ2UiLCJiYWNrd2FyZCIsIm1heFNvdW5kcyIsImxpbWl0IiwiYXNzaWduIiwiZm9yd2FyZCIsInNvdW5kS2V5Iiwic2h1ZmZsZSIsImFycmF5IiwidGVtcCIsInBsYXlTb3VuZCIsIm1pbkRpc3RhbmNlIiwiTUFYX1NBRkVfSU5URUdFUiIsInNvdW5kSWQiLCJkaXN0YW5jZSIsInBsYXliYWNrIiwic3RvcFNvdW5kIiwic3RhcnRSZWNvcmRpbmciLCJtZWRpYURldmljZXMiLCJnZXRVc2VyTWVkaWEiLCJ2aWRlbyIsImF1ZGlvIiwiZWNob0NhbmNlbGxhdGlvbiIsInZvbHVtZSIsIk1lZGlhUmVjb3JkZXIiLCJpc1R5cGVTdXBwb3J0ZWQiLCJtaW1lVHlwZSIsIm9uc3RvcCIsIlVSTCIsImNyZWF0ZU9iamVjdFVSTCIsIkJsb2IiLCJibG9icyIsImdldFRyYWNrcyIsInRyYWNrIiwic3RvcCIsIm9uZGF0YWF2YWlsYWJsZSIsInN0YXRlIiwiYXVkaW9Db250ZXh0IiwiQXVkaW9Db250ZXh0IiwiY3JlYXRlTWVkaWFTdHJlYW1Tb3VyY2UiLCJyZXN1bWUiLCJSZWNvcmRlciIsImV4cG9ydFdBViIsImJsb2IiLCJjbGVhciIsInNldFRpbWVvdXQiLCJyZWNvcmQiLCJzdG9wUmVjb3JkaW5nIiwidXBsb2FkU291bmQiLCJzdG9yYWdlUmVmIiwicmVnZXgiLCJ1cGxvYWRUYXNrIiwiZ2VuZXJhdGVVdWlkIiwicHV0Iiwib24iLCJieXRlc1RyYW5zZmVycmVkIiwidG90YWxCeXRlcyIsInVpZCIsImRpc3BsYXlOYW1lIiwicGhvdG9VUkwiLCJuZXdQb3N0UmVmIiwidHJhbnNhY3Rpb24iLCJzdWJzdHJpbmciLCJpbnB1dENoYW5nZWQiLCJibGluZGVkIiwic2h1ZmZsZWRJbWFnZXMiLCJkZXZpY2VQaXhlbFJhdGlvIiwibG9hZCIsImlzTG9hZGVkIiwic3VucmlzZSIsImltYWdlMSIsIkltYWdlIiwib25sb2FkIiwiaW1hZ2UyIiwiY3Jvc3NPcmlnaW4iLCJjdHgiLCJnZXRDb250ZXh0Iiwic2F2ZSIsImFyYyIsImltYWdlSGVpZ2h0IiwiaW1hZ2VXaWR0aCIsImRyYXdJbWFnZSIsInJlc3RvcmUiLCJzZXRPcHRpb25zIiwidG9EYXRhVVJMIiwiZm9ybWF0VGltZSIsInNlY29uZHMiLCJhbmltYXRpb25TdGFydCIsImFuaW1hdGlvbkVuZCIsInRpY2tlclVwZGF0ZWQiLCJjb2xsZWN0aW9uIiwibGF0MSIsImxvbjEiLCJsYXQyIiwibG9uMiIsImRMYXQiLCJkZWcycmFkIiwiZExvbiIsImRlZyIsInByZWNpc2lvbiIsIkJJVFMiLCJpc19ldmVuIiwibGF0IiwibG9uIiwiYml0IiwiY2giLCJtaWQiLCJjZCIsImoiLCJtYXNrIiwicmlnaHRHZW9oYXNoIiwiY2FsY3VsYXRlQWRqYWNlbnQiLCJsZWZ0R2VvaGFzaCIsInRvcCIsImJvdHRvbSIsInJpZ2h0IiwibGVmdCIsInNyY0hhc2giLCJkaXIiLCJORUlHSEJPUlMiLCJldmVuIiwiQk9SREVSUyIsIm9kZCIsImxhc3RDaHIiLCJjaGFyQXQiLCJiYXNlIiwiY2hhcnMiLCJzZXF1ZW5jZXMiLCJfcmFuZG9tIiwiY2hvb3NlZFNlcXVlbmNlcyIsImZsYXR0ZW5lZFNlcXVlbmNlIiwidGVtcFN0YXRlIiwiUmVnRXhwIiwicXVldWUiLCJzZXF1ZW5jZSIsInRyYWNlZFNlcXVlbmNlcyIsImNhbGxhYmxlU2VxdWVuY2VzIiwic2VxdWVuY2VTdGFjayIsImdldFNlcXVlbmNlU3RhY2siLCJzdGFjayIsInBvcHBlZFNlcXVlbmNlIiwicG9wIiwidGVtcFN0YWNrIiwidGVtcFNlcXVlbmNlIiwic291cmNlU2VxdWVuY2UiLCJ0YXJnZXRTZXF1ZW5jZSIsInVwZGF0ZWQiLCJtb3VudGVkIiwic3RvcmFnZUl0ZW0iLCJjcmVkZW50aWFsU3RvcmFnZUl0ZW0iLCJib3QiLCJwYXJzZSIsIm1hcFR5cGVJZCIsIk1hcFR5cGVJZCIsImdyYXlzY2FsZSIsImVuYWJsZUhpZ2hEcGkiLCJzaG93TG9jYXRlTWVCdXR0b24iLCJzaG93TWFwVHlwZVNlbGVjdG9yIiwic2hvd1pvb21CdXR0b25zIiwic2hvd1NjYWxlYmFyIiwiTGF5ZXIiLCJzZXRWaXNpYmxlIiwibGF5ZXJzIiwiaW5zZXJ0IiwicmVzcG9uc2UiLCJmZXRjaCIsIm1ldGhvZCIsImhlYWRlcnMiLCJvayIsIkVycm9yIiwic3RhdHVzVGV4dCIsImpzb24iLCJzaWduSW5XaXRoQ3JlZGVudGlhbCIsIm9uQXV0aFN0YXRlQ2hhbmdlZCIsImRlY29kZVVSSUNvbXBvbmVudCIsIm9mZiIsIm1vdW50IiwibWF0Y2hNZWRpYSIsIm1hdGNoZXMiXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxHQUFZLENBQ3pDRyxFQUFHSCxFQUNISSxHQUFHLEVBQ0hILFFBQVMsSUFVVixPQU5BSSxFQUFRTCxHQUFVTSxLQUFLSixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTRixHQUcvREcsRUFBT0UsR0FBSSxFQUdKRixFQUFPRCxRQUtmRixFQUFvQlEsRUFBSUYsRUFHeEJOLEVBQW9CUyxFQUFJVixFQUd4QkMsRUFBb0JVLEVBQUksU0FBU1IsRUFBU1MsRUFBTUMsR0FDM0NaLEVBQW9CYSxFQUFFWCxFQUFTUyxJQUNsQ0csT0FBT0MsZUFBZWIsRUFBU1MsRUFBTSxDQUFFSyxZQUFZLEVBQU1DLElBQUtMLEtBS2hFWixFQUFvQmtCLEVBQUksU0FBU2hCLEdBQ1gsb0JBQVhpQixRQUEwQkEsT0FBT0MsYUFDMUNOLE9BQU9DLGVBQWViLEVBQVNpQixPQUFPQyxZQUFhLENBQUVDLE1BQU8sV0FFN0RQLE9BQU9DLGVBQWViLEVBQVMsYUFBYyxDQUFFbUIsT0FBTyxLQVF2RHJCLEVBQW9Cc0IsRUFBSSxTQUFTRCxFQUFPRSxHQUV2QyxHQURVLEVBQVBBLElBQVVGLEVBQVFy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QWlCLFNBQVdxSCxJQWEvQkMsRUFBSXlFLFVBQVUsS0FDVixJQUFLLE1BQU1DLEtBQVF4WSxTQUFTc0QsS0FBS3JELGlCQUFpQiwyQ0FBNEMsQ0FDMUYsSUFBSXlELEVBQVEsRUFFWixJQUFLLE1BQU0rVSxLQUFXRCxFQUFLdlksaUJBQWlCLHFDQUN4Q3lELEdBQVMrVSxFQUFRelIsd0JBQXdCdEQsTUFHekNBLEVBQVEsSUFDUm9RLEVBQUlvQyxZQUFjbGQsS0FBS0YsSUFBSTRLLEVBQVEsRUFBRzFELFNBQVNzRCxLQUFLb1YsY0FBYyx3REFBd0QxUix3QkFBd0J0RCxPQUNsSjhVLEVBQUtFLGNBQWMsK0JBQStCbFYsTUFBTUUsTUFBUUEsRUFBUSxXQXdCeEY4SixPQUFPNGYsV0FBVyxnQ0FBZ0M1Z0IsaUJBQWlCLFNBQVV0TSxJQUNyRUEsRUFBRW10QixRQUNGdlosRUFBSUssWUFBYSxFQUVqQkwsRUFBSUssWUFBYSIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiL2pzXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAwKTtcbiIsIi8qXG4gKiBhbmltZS5qcyB2My4yLjFcbiAqIChjKSAyMDIwIEp1bGlhbiBHYXJuaWVyXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGFuaW1lanMuY29tXG4gKi9cblxuLy8gRGVmYXVsdHNcblxudmFyIGRlZmF1bHRJbnN0YW5jZVNldHRpbmdzID0ge1xuICB1cGRhdGU6IG51bGwsXG4gIGJlZ2luOiBudWxsLFxuICBsb29wQmVnaW46IG51bGwsXG4gIGNoYW5nZUJlZ2luOiBudWxsLFxuICBjaGFuZ2U6IG51bGwsXG4gIGNoYW5nZUNvbXBsZXRlOiBudWxsLFxuICBsb29wQ29tcGxldGU6IG51bGwsXG4gIGNvbXBsZXRlOiBudWxsLFxuICBsb29wOiAxLFxuICBkaXJlY3Rpb246ICdub3JtYWwnLFxuICBhdXRvcGxheTogdHJ1ZSxcbiAgdGltZWxpbmVPZmZzZXQ6IDBcbn07XG5cbnZhciBkZWZhdWx0VHdlZW5TZXR0aW5ncyA9IHtcbiAgZHVyYXRpb246IDEwMDAsXG4gIGRlbGF5OiAwLFxuICBlbmREZWxheTogMCxcbiAgZWFzaW5nOiAnZWFzZU91dEVsYXN0aWMoMSwgLjUpJyxcbiAgcm91bmQ6IDBcbn07XG5cbnZhciB2YWxpZFRyYW5zZm9ybXMgPSBbJ3RyYW5zbGF0ZVgnLCAndHJhbnNsYXRlWScsICd0cmFuc2xhdGVaJywgJ3JvdGF0ZScsICdyb3RhdGVYJywgJ3JvdGF0ZVknLCAncm90YXRlWicsICdzY2FsZScsICdzY2FsZVgnLCAnc2NhbGVZJywgJ3NjYWxlWicsICdza2V3JywgJ3NrZXdYJywgJ3NrZXdZJywgJ3BlcnNwZWN0aXZlJywgJ21hdHJpeCcsICdtYXRyaXgzZCddO1xuXG4vLyBDYWNoaW5nXG5cbnZhciBjYWNoZSA9IHtcbiAgQ1NTOiB7fSxcbiAgc3ByaW5nczoge31cbn07XG5cbi8vIFV0aWxzXG5cbmZ1bmN0aW9uIG1pbk1heCh2YWwsIG1pbiwgbWF4KSB7XG4gIHJldHVybiBNYXRoLm1pbihNYXRoLm1heCh2YWwsIG1pbiksIG1heCk7XG59XG5cbmZ1bmN0aW9uIHN0cmluZ0NvbnRhaW5zKHN0ciwgdGV4dCkge1xuICByZXR1cm4gc3RyLmluZGV4T2YodGV4dCkgPiAtMTtcbn1cblxuZnVuY3Rpb24gYXBwbHlBcmd1bWVudHMoZnVuYywgYXJncykge1xuICByZXR1cm4gZnVuYy5hcHBseShudWxsLCBhcmdzKTtcbn1cblxudmFyIGlzID0ge1xuICBhcnI6IGZ1bmN0aW9uIChhKSB7IHJldHVybiBBcnJheS5pc0FycmF5KGEpOyB9LFxuICBvYmo6IGZ1bmN0aW9uIChhKSB7IHJldHVybiBzdHJpbmdDb250YWlucyhPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYSksICdPYmplY3QnKTsgfSxcbiAgcHRoOiBmdW5jdGlvbiAoYSkgeyByZXR1cm4gaXMub2JqKGEpICYmIGEuaGFzT3duUHJvcGVydHkoJ3RvdGFsTGVuZ3RoJyk7IH0sXG4gIHN2ZzogZnVuY3Rpb24gKGEpIHsgcmV0dXJuIGEgaW5zdGFuY2VvZiBTVkdFbGVtZW50OyB9LFxuICBpbnA6IGZ1bmN0aW9uIChhKSB7IHJldHVybiBhIGluc3RhbmNlb2YgSFRNTElucHV0RWxlbWVudDsgfSxcbiAgZG9tOiBmdW5jdGlvbiAoYSkgeyByZXR1cm4gYS5ub2RlVHlwZSB8fCBpcy5zdmcoYSk7IH0sXG4gIHN0cjogZnVuY3Rpb24gKGEpIHsgcmV0dXJuIHR5cGVvZiBhID09PSAnc3RyaW5nJzsgfSxcbiAgZm5jOiBmdW5jdGlvbiAoYSkgeyByZXR1cm4gdHlwZW9mIGEgPT09ICdmdW5jdGlvbic7IH0sXG4gIHVuZDogZnVuY3Rpb24gKGEpIHsgcmV0dXJuIHR5cGVvZiBhID09PSAndW5kZWZpbmVkJzsgfSxcbiAgbmlsOiBmdW5jdGlvbiAoYSkgeyByZXR1cm4gaXMudW5kKGEpIHx8IGEgPT09IG51bGw7IH0sXG4gIGhleDogZnVuY3Rpb24gKGEpIHsgcmV0dXJuIC8oXiNbMC05QS1GXXs2fSQpfCheI1swLTlBLUZdezN9JCkvaS50ZXN0KGEpOyB9LFxuICByZ2I6IGZ1bmN0aW9uIChhKSB7IHJldHVybiAvXnJnYi8udGVzdChhKTsgfSxcbiAgaHNsOiBmdW5jdGlvbiAoYSkgeyByZXR1cm4gL15oc2wvLnRlc3QoYSk7IH0sXG4gIGNvbDogZnVuY3Rpb24gKGEpIHsgcmV0dXJuIChpcy5oZXgoYSkgfHwgaXMucmdiKGEpIHx8IGlzLmhzbChhKSk7IH0sXG4gIGtleTogZnVuY3Rpb24gKGEpIHsgcmV0dXJuICFkZWZhdWx0SW5zdGFuY2VTZXR0aW5ncy5oYXNPd25Qcm9wZXJ0eShhKSAmJiAhZGVmYXVsdFR3ZWVuU2V0dGluZ3MuaGFzT3duUHJvcGVydHkoYSkgJiYgYSAhPT0gJ3RhcmdldHMnICYmIGEgIT09ICdrZXlmcmFtZXMnOyB9LFxufTtcblxuLy8gRWFzaW5nc1xuXG5mdW5jdGlvbiBwYXJzZUVhc2luZ1BhcmFtZXRlcnMoc3RyaW5nKSB7XG4gIHZhciBtYXRjaCA9IC9cXCgoW14pXSspXFwpLy5leGVjKHN0cmluZyk7XG4gIHJldHVybiBtYXRjaCA/IG1hdGNoWzFdLnNwbGl0KCcsJykubWFwKGZ1bmN0aW9uIChwKSB7IHJldHVybiBwYXJzZUZsb2F0KHApOyB9KSA6IFtdO1xufVxuXG4vLyBTcHJpbmcgc29sdmVyIGluc3BpcmVkIGJ5IFdlYmtpdCBDb3B5cmlnaHQgwqkgMjAxNiBBcHBsZSBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuIGh0dHBzOi8vd2Via2l0Lm9yZy9kZW1vcy9zcHJpbmcvc3ByaW5nLmpzXG5cbmZ1bmN0aW9uIHNwcmluZyhzdHJpbmcsIGR1cmF0aW9uKSB7XG5cbiAgdmFyIHBhcmFtcyA9IHBhcnNlRWFzaW5nUGFyYW1ldGVycyhzdHJpbmcpO1xuICB2YXIgbWFzcyA9IG1pbk1heChpcy51bmQocGFyYW1zWzBdKSA/IDEgOiBwYXJhbXNbMF0sIC4xLCAxMDApO1xuICB2YXIgc3RpZmZuZXNzID0gbWluTWF4KGlzLnVuZChwYXJhbXNbMV0pID8gMTAwIDogcGFyYW1zWzFdLCAuMSwgMTAwKTtcbiAgdmFyIGRhbXBpbmcgPSBtaW5NYXgoaXMudW5kKHBhcmFtc1syXSkgPyAxMCA6IHBhcmFtc1syXSwgLjEsIDEwMCk7XG4gIHZhciB2ZWxvY2l0eSA9ICBtaW5NYXgoaXMudW5kKHBhcmFtc1szXSkgPyAwIDogcGFyYW1zWzNdLCAuMSwgMTAwKTtcbiAgdmFyIHcwID0gTWF0aC5zcXJ0KHN0aWZmbmVzcyAvIG1hc3MpO1xuICB2YXIgemV0YSA9IGRhbXBpbmcgLyAoMiAqIE1hdGguc3FydChzdGlmZm5lc3MgKiBtYXNzKSk7XG4gIHZhciB3ZCA9IHpldGEgPCAxID8gdzAgKiBNYXRoLnNxcnQoMSAtIHpldGEgKiB6ZXRhKSA6IDA7XG4gIHZhciBhID0gMTtcbiAgdmFyIGIgPSB6ZXRhIDwgMSA/ICh6ZXRhICogdzAgKyAtdmVsb2NpdHkpIC8gd2QgOiAtdmVsb2NpdHkgKyB3MDtcblxuICBmdW5jdGlvbiBzb2x2ZXIodCkge1xuICAgIHZhciBwcm9ncmVzcyA9IGR1cmF0aW9uID8gKGR1cmF0aW9uICogdCkgLyAxMDAwIDogdDtcbiAgICBpZiAoemV0YSA8IDEpIHtcbiAgICAgIHByb2dyZXNzID0gTWF0aC5leHAoLXByb2dyZXNzICogemV0YSAqIHcwKSAqIChhICogTWF0aC5jb3Mod2QgKiBwcm9ncmVzcykgKyBiICogTWF0aC5zaW4od2QgKiBwcm9ncmVzcykpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9ncmVzcyA9IChhICsgYiAqIHByb2dyZXNzKSAqIE1hdGguZXhwKC1wcm9ncmVzcyAqIHcwKTtcbiAgICB9XG4gICAgaWYgKHQgPT09IDAgfHwgdCA9PT0gMSkgeyByZXR1cm4gdDsgfVxuICAgIHJldHVybiAxIC0gcHJvZ3Jlc3M7XG4gIH1cblxuICBmdW5jdGlvbiBnZXREdXJhdGlvbigpIHtcbiAgICB2YXIgY2FjaGVkID0gY2FjaGUuc3ByaW5nc1tzdHJpbmddO1xuICAgIGlmIChjYWNoZWQpIHsgcmV0dXJuIGNhY2hlZDsgfVxuICAgIHZhciBmcmFtZSA9IDEvNjtcbiAgICB2YXIgZWxhcHNlZCA9IDA7XG4gICAgdmFyIHJlc3QgPSAwO1xuICAgIHdoaWxlKHRydWUpIHtcbiAgICAgIGVsYXBzZWQgKz0gZnJhbWU7XG4gICAgICBpZiAoc29sdmVyKGVsYXBzZWQpID09PSAxKSB7XG4gICAgICAgIHJlc3QrKztcbiAgICAgICAgaWYgKHJlc3QgPj0gMTYpIHsgYnJlYWs7IH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3QgPSAwO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgZHVyYXRpb24gPSBlbGFwc2VkICogZnJhbWUgKiAxMDAwO1xuICAgIGNhY2hlLnNwcmluZ3Nbc3RyaW5nXSA9IGR1cmF0aW9uO1xuICAgIHJldHVybiBkdXJhdGlvbjtcbiAgfVxuXG4gIHJldHVybiBkdXJhdGlvbiA/IHNvbHZlciA6IGdldER1cmF0aW9uO1xuXG59XG5cbi8vIEJhc2ljIHN0ZXBzIGVhc2luZyBpbXBsZW1lbnRhdGlvbiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9mci9kb2NzL1dlYi9DU1MvdHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb25cblxuZnVuY3Rpb24gc3RlcHMoc3RlcHMpIHtcbiAgaWYgKCBzdGVwcyA9PT0gdm9pZCAwICkgc3RlcHMgPSAxMDtcblxuICByZXR1cm4gZnVuY3Rpb24gKHQpIHsgcmV0dXJuIE1hdGguY2VpbCgobWluTWF4KHQsIDAuMDAwMDAxLCAxKSkgKiBzdGVwcykgKiAoMSAvIHN0ZXBzKTsgfTtcbn1cblxuLy8gQmV6aWVyRWFzaW5nIGh0dHBzOi8vZ2l0aHViLmNvbS9ncmUvYmV6aWVyLWVhc2luZ1xuXG52YXIgYmV6aWVyID0gKGZ1bmN0aW9uICgpIHtcblxuICB2YXIga1NwbGluZVRhYmxlU2l6ZSA9IDExO1xuICB2YXIga1NhbXBsZVN0ZXBTaXplID0gMS4wIC8gKGtTcGxpbmVUYWJsZVNpemUgLSAxLjApO1xuXG4gIGZ1bmN0aW9uIEEoYUExLCBhQTIpIHsgcmV0dXJuIDEuMCAtIDMuMCAqIGFBMiArIDMuMCAqIGFBMSB9XG4gIGZ1bmN0aW9uIEIoYUExLCBhQTIpIHsgcmV0dXJuIDMuMCAqIGFBMiAtIDYuMCAqIGFBMSB9XG4gIGZ1bmN0aW9uIEMoYUExKSAgICAgIHsgcmV0dXJuIDMuMCAqIGFBMSB9XG5cbiAgZnVuY3Rpb24gY2FsY0JlemllcihhVCwgYUExLCBhQTIpIHsgcmV0dXJuICgoQShhQTEsIGFBMikgKiBhVCArIEIoYUExLCBhQTIpKSAqIGFUICsgQyhhQTEpKSAqIGFUIH1cbiAgZnVuY3Rpb24gZ2V0U2xvcGUoYVQsIGFBMSwgYUEyKSB7IHJldHVybiAzLjAgKiBBKGFBMSwgYUEyKSAqIGFUICogYVQgKyAyLjAgKiBCKGFBMSwgYUEyKSAqIGFUICsgQyhhQTEpIH1cblxuICBmdW5jdGlvbiBiaW5hcnlTdWJkaXZpZGUoYVgsIGFBLCBhQiwgbVgxLCBtWDIpIHtcbiAgICB2YXIgY3VycmVudFgsIGN1cnJlbnRULCBpID0gMDtcbiAgICBkbyB7XG4gICAgICBjdXJyZW50VCA9IGFBICsgKGFCIC0gYUEpIC8gMi4wO1xuICAgICAgY3VycmVudFggPSBjYWxjQmV6aWVyKGN1cnJlbnRULCBtWDEsIG1YMikgLSBhWDtcbiAgICAgIGlmIChjdXJyZW50WCA+IDAuMCkgeyBhQiA9IGN1cnJlbnRUOyB9IGVsc2UgeyBhQSA9IGN1cnJlbnRUOyB9XG4gICAgfSB3aGlsZSAoTWF0aC5hYnMoY3VycmVudFgpID4gMC4wMDAwMDAxICYmICsraSA8IDEwKTtcbiAgICByZXR1cm4gY3VycmVudFQ7XG4gIH1cblxuICBmdW5jdGlvbiBuZXd0b25SYXBoc29uSXRlcmF0ZShhWCwgYUd1ZXNzVCwgbVgxLCBtWDIpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7ICsraSkge1xuICAgICAgdmFyIGN1cnJlbnRTbG9wZSA9IGdldFNsb3BlKGFHdWVzc1QsIG1YMSwgbVgyKTtcbiAgICAgIGlmIChjdXJyZW50U2xvcGUgPT09IDAuMCkgeyByZXR1cm4gYUd1ZXNzVDsgfVxuICAgICAgdmFyIGN1cnJlbnRYID0gY2FsY0JlemllcihhR3Vlc3NULCBtWDEsIG1YMikgLSBhWDtcbiAgICAgIGFHdWVzc1QgLT0gY3VycmVudFggLyBjdXJyZW50U2xvcGU7XG4gICAgfVxuICAgIHJldHVybiBhR3Vlc3NUO1xuICB9XG5cbiAgZnVuY3Rpb24gYmV6aWVyKG1YMSwgbVkxLCBtWDIsIG1ZMikge1xuXG4gICAgaWYgKCEoMCA8PSBtWDEgJiYgbVgxIDw9IDEgJiYgMCA8PSBtWDIgJiYgbVgyIDw9IDEpKSB7IHJldHVybjsgfVxuICAgIHZhciBzYW1wbGVWYWx1ZXMgPSBuZXcgRmxvYXQzMkFycmF5KGtTcGxpbmVUYWJsZVNpemUpO1xuXG4gICAgaWYgKG1YMSAhPT0gbVkxIHx8IG1YMiAhPT0gbVkyKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtTcGxpbmVUYWJsZVNpemU7ICsraSkge1xuICAgICAgICBzYW1wbGVWYWx1ZXNbaV0gPSBjYWxjQmV6aWVyKGkgKiBrU2FtcGxlU3RlcFNpemUsIG1YMSwgbVgyKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRURm9yWChhWCkge1xuXG4gICAgICB2YXIgaW50ZXJ2YWxTdGFydCA9IDA7XG4gICAgICB2YXIgY3VycmVudFNhbXBsZSA9IDE7XG4gICAgICB2YXIgbGFzdFNhbXBsZSA9IGtTcGxpbmVUYWJsZVNpemUgLSAxO1xuXG4gICAgICBmb3IgKDsgY3VycmVudFNhbXBsZSAhPT0gbGFzdFNhbXBsZSAmJiBzYW1wbGVWYWx1ZXNbY3VycmVudFNhbXBsZV0gPD0gYVg7ICsrY3VycmVudFNhbXBsZSkge1xuICAgICAgICBpbnRlcnZhbFN0YXJ0ICs9IGtTYW1wbGVTdGVwU2l6ZTtcbiAgICAgIH1cblxuICAgICAgLS1jdXJyZW50U2FtcGxlO1xuXG4gICAgICB2YXIgZGlzdCA9IChhWCAtIHNhbXBsZVZhbHVlc1tjdXJyZW50U2FtcGxlXSkgLyAoc2FtcGxlVmFsdWVzW2N1cnJlbnRTYW1wbGUgKyAxXSAtIHNhbXBsZVZhbHVlc1tjdXJyZW50U2FtcGxlXSk7XG4gICAgICB2YXIgZ3Vlc3NGb3JUID0gaW50ZXJ2YWxTdGFydCArIGRpc3QgKiBrU2FtcGxlU3RlcFNpemU7XG4gICAgICB2YXIgaW5pdGlhbFNsb3BlID0gZ2V0U2xvcGUoZ3Vlc3NGb3JULCBtWDEsIG1YMik7XG5cbiAgICAgIGlmIChpbml0aWFsU2xvcGUgPj0gMC4wMDEpIHtcbiAgICAgICAgcmV0dXJuIG5ld3RvblJhcGhzb25JdGVyYXRlKGFYLCBndWVzc0ZvclQsIG1YMSwgbVgyKTtcbiAgICAgIH0gZWxzZSBpZiAoaW5pdGlhbFNsb3BlID09PSAwLjApIHtcbiAgICAgICAgcmV0dXJuIGd1ZXNzRm9yVDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBiaW5hcnlTdWJkaXZpZGUoYVgsIGludGVydmFsU3RhcnQsIGludGVydmFsU3RhcnQgKyBrU2FtcGxlU3RlcFNpemUsIG1YMSwgbVgyKTtcbiAgICAgIH1cblxuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoeCkge1xuICAgICAgaWYgKG1YMSA9PT0gbVkxICYmIG1YMiA9PT0gbVkyKSB7IHJldHVybiB4OyB9XG4gICAgICBpZiAoeCA9PT0gMCB8fCB4ID09PSAxKSB7IHJldHVybiB4OyB9XG4gICAgICByZXR1cm4gY2FsY0JlemllcihnZXRURm9yWCh4KSwgbVkxLCBtWTIpO1xuICAgIH1cblxuICB9XG5cbiAgcmV0dXJuIGJlemllcjtcblxufSkoKTtcblxudmFyIHBlbm5lciA9IChmdW5jdGlvbiAoKSB7XG5cbiAgLy8gQmFzZWQgb24galF1ZXJ5IFVJJ3MgaW1wbGVtZW5hdGlvbiBvZiBlYXNpbmcgZXF1YXRpb25zIGZyb20gUm9iZXJ0IFBlbm5lciAoaHR0cDovL3d3dy5yb2JlcnRwZW5uZXIuY29tL2Vhc2luZylcblxuICB2YXIgZWFzZXMgPSB7IGxpbmVhcjogZnVuY3Rpb24gKCkgeyByZXR1cm4gZnVuY3Rpb24gKHQpIHsgcmV0dXJuIHQ7IH07IH0gfTtcblxuICB2YXIgZnVuY3Rpb25FYXNpbmdzID0ge1xuICAgIFNpbmU6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZ1bmN0aW9uICh0KSB7IHJldHVybiAxIC0gTWF0aC5jb3ModCAqIE1hdGguUEkgLyAyKTsgfTsgfSxcbiAgICBDaXJjOiBmdW5jdGlvbiAoKSB7IHJldHVybiBmdW5jdGlvbiAodCkgeyByZXR1cm4gMSAtIE1hdGguc3FydCgxIC0gdCAqIHQpOyB9OyB9LFxuICAgIEJhY2s6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZ1bmN0aW9uICh0KSB7IHJldHVybiB0ICogdCAqICgzICogdCAtIDIpOyB9OyB9LFxuICAgIEJvdW5jZTogZnVuY3Rpb24gKCkgeyByZXR1cm4gZnVuY3Rpb24gKHQpIHtcbiAgICAgIHZhciBwb3cyLCBiID0gNDtcbiAgICAgIHdoaWxlICh0IDwgKCggcG93MiA9IE1hdGgucG93KDIsIC0tYikpIC0gMSkgLyAxMSkge31cbiAgICAgIHJldHVybiAxIC8gTWF0aC5wb3coNCwgMyAtIGIpIC0gNy41NjI1ICogTWF0aC5wb3coKCBwb3cyICogMyAtIDIgKSAvIDIyIC0gdCwgMilcbiAgICB9OyB9LFxuICAgIEVsYXN0aWM6IGZ1bmN0aW9uIChhbXBsaXR1ZGUsIHBlcmlvZCkge1xuICAgICAgaWYgKCBhbXBsaXR1ZGUgPT09IHZvaWQgMCApIGFtcGxpdHVkZSA9IDE7XG4gICAgICBpZiAoIHBlcmlvZCA9PT0gdm9pZCAwICkgcGVyaW9kID0gLjU7XG5cbiAgICAgIHZhciBhID0gbWluTWF4KGFtcGxpdHVkZSwgMSwgMTApO1xuICAgICAgdmFyIHAgPSBtaW5NYXgocGVyaW9kLCAuMSwgMik7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgcmV0dXJuICh0ID09PSAwIHx8IHQgPT09IDEpID8gdCA6IFxuICAgICAgICAgIC1hICogTWF0aC5wb3coMiwgMTAgKiAodCAtIDEpKSAqIE1hdGguc2luKCgoKHQgLSAxKSAtIChwIC8gKE1hdGguUEkgKiAyKSAqIE1hdGguYXNpbigxIC8gYSkpKSAqIChNYXRoLlBJICogMikpIC8gcCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHZhciBiYXNlRWFzaW5ncyA9IFsnUXVhZCcsICdDdWJpYycsICdRdWFydCcsICdRdWludCcsICdFeHBvJ107XG5cbiAgYmFzZUVhc2luZ3MuZm9yRWFjaChmdW5jdGlvbiAobmFtZSwgaSkge1xuICAgIGZ1bmN0aW9uRWFzaW5nc1tuYW1lXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZ1bmN0aW9uICh0KSB7IHJldHVybiBNYXRoLnBvdyh0LCBpICsgMik7IH07IH07XG4gIH0pO1xuXG4gIE9iamVjdC5rZXlzKGZ1bmN0aW9uRWFzaW5ncykuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgIHZhciBlYXNlSW4gPSBmdW5jdGlvbkVhc2luZ3NbbmFtZV07XG4gICAgZWFzZXNbJ2Vhc2VJbicgKyBuYW1lXSA9IGVhc2VJbjtcbiAgICBlYXNlc1snZWFzZU91dCcgKyBuYW1lXSA9IGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBmdW5jdGlvbiAodCkgeyByZXR1cm4gMSAtIGVhc2VJbihhLCBiKSgxIC0gdCk7IH07IH07XG4gICAgZWFzZXNbJ2Vhc2VJbk91dCcgKyBuYW1lXSA9IGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBmdW5jdGlvbiAodCkgeyByZXR1cm4gdCA8IDAuNSA/IGVhc2VJbihhLCBiKSh0ICogMikgLyAyIDogXG4gICAgICAxIC0gZWFzZUluKGEsIGIpKHQgKiAtMiArIDIpIC8gMjsgfTsgfTtcbiAgICBlYXNlc1snZWFzZU91dEluJyArIG5hbWVdID0gZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGZ1bmN0aW9uICh0KSB7IHJldHVybiB0IDwgMC41ID8gKDEgLSBlYXNlSW4oYSwgYikoMSAtIHQgKiAyKSkgLyAyIDogXG4gICAgICAoZWFzZUluKGEsIGIpKHQgKiAyIC0gMSkgKyAxKSAvIDI7IH07IH07XG4gIH0pO1xuXG4gIHJldHVybiBlYXNlcztcblxufSkoKTtcblxuZnVuY3Rpb24gcGFyc2VFYXNpbmdzKGVhc2luZywgZHVyYXRpb24pIHtcbiAgaWYgKGlzLmZuYyhlYXNpbmcpKSB7IHJldHVybiBlYXNpbmc7IH1cbiAgdmFyIG5hbWUgPSBlYXNpbmcuc3BsaXQoJygnKVswXTtcbiAgdmFyIGVhc2UgPSBwZW5uZXJbbmFtZV07XG4gIHZhciBhcmdzID0gcGFyc2VFYXNpbmdQYXJhbWV0ZXJzKGVhc2luZyk7XG4gIHN3aXRjaCAobmFtZSkge1xuICAgIGNhc2UgJ3NwcmluZycgOiByZXR1cm4gc3ByaW5nKGVhc2luZywgZHVyYXRpb24pO1xuICAgIGNhc2UgJ2N1YmljQmV6aWVyJyA6IHJldHVybiBhcHBseUFyZ3VtZW50cyhiZXppZXIsIGFyZ3MpO1xuICAgIGNhc2UgJ3N0ZXBzJyA6IHJldHVybiBhcHBseUFyZ3VtZW50cyhzdGVwcywgYXJncyk7XG4gICAgZGVmYXVsdCA6IHJldHVybiBhcHBseUFyZ3VtZW50cyhlYXNlLCBhcmdzKTtcbiAgfVxufVxuXG4vLyBTdHJpbmdzXG5cbmZ1bmN0aW9uIHNlbGVjdFN0cmluZyhzdHIpIHtcbiAgdHJ5IHtcbiAgICB2YXIgbm9kZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHN0cik7XG4gICAgcmV0dXJuIG5vZGVzO1xuICB9IGNhdGNoKGUpIHtcbiAgICByZXR1cm47XG4gIH1cbn1cblxuLy8gQXJyYXlzXG5cbmZ1bmN0aW9uIGZpbHRlckFycmF5KGFyciwgY2FsbGJhY2spIHtcbiAgdmFyIGxlbiA9IGFyci5sZW5ndGg7XG4gIHZhciB0aGlzQXJnID0gYXJndW1lbnRzLmxlbmd0aCA+PSAyID8gYXJndW1lbnRzWzFdIDogdm9pZCAwO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoaSBpbiBhcnIpIHtcbiAgICAgIHZhciB2YWwgPSBhcnJbaV07XG4gICAgICBpZiAoY2FsbGJhY2suY2FsbCh0aGlzQXJnLCB2YWwsIGksIGFycikpIHtcbiAgICAgICAgcmVzdWx0LnB1c2godmFsKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gZmxhdHRlbkFycmF5KGFycikge1xuICByZXR1cm4gYXJyLnJlZHVjZShmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gYS5jb25jYXQoaXMuYXJyKGIpID8gZmxhdHRlbkFycmF5KGIpIDogYik7IH0sIFtdKTtcbn1cblxuZnVuY3Rpb24gdG9BcnJheShvKSB7XG4gIGlmIChpcy5hcnIobykpIHsgcmV0dXJuIG87IH1cbiAgaWYgKGlzLnN0cihvKSkgeyBvID0gc2VsZWN0U3RyaW5nKG8pIHx8IG87IH1cbiAgaWYgKG8gaW5zdGFuY2VvZiBOb2RlTGlzdCB8fCBvIGluc3RhbmNlb2YgSFRNTENvbGxlY3Rpb24pIHsgcmV0dXJuIFtdLnNsaWNlLmNhbGwobyk7IH1cbiAgcmV0dXJuIFtvXTtcbn1cblxuZnVuY3Rpb24gYXJyYXlDb250YWlucyhhcnIsIHZhbCkge1xuICByZXR1cm4gYXJyLnNvbWUoZnVuY3Rpb24gKGEpIHsgcmV0dXJuIGEgPT09IHZhbDsgfSk7XG59XG5cbi8vIE9iamVjdHNcblxuZnVuY3Rpb24gY2xvbmVPYmplY3Qobykge1xuICB2YXIgY2xvbmUgPSB7fTtcbiAgZm9yICh2YXIgcCBpbiBvKSB7IGNsb25lW3BdID0gb1twXTsgfVxuICByZXR1cm4gY2xvbmU7XG59XG5cbmZ1bmN0aW9uIHJlcGxhY2VPYmplY3RQcm9wcyhvMSwgbzIpIHtcbiAgdmFyIG8gPSBjbG9uZU9iamVjdChvMSk7XG4gIGZvciAodmFyIHAgaW4gbzEpIHsgb1twXSA9IG8yLmhhc093blByb3BlcnR5KHApID8gbzJbcF0gOiBvMVtwXTsgfVxuICByZXR1cm4gbztcbn1cblxuZnVuY3Rpb24gbWVyZ2VPYmplY3RzKG8xLCBvMikge1xuICB2YXIgbyA9IGNsb25lT2JqZWN0KG8xKTtcbiAgZm9yICh2YXIgcCBpbiBvMikgeyBvW3BdID0gaXMudW5kKG8xW3BdKSA/IG8yW3BdIDogbzFbcF07IH1cbiAgcmV0dXJuIG87XG59XG5cbi8vIENvbG9yc1xuXG5mdW5jdGlvbiByZ2JUb1JnYmEocmdiVmFsdWUpIHtcbiAgdmFyIHJnYiA9IC9yZ2JcXCgoXFxkKyxcXHMqW1xcZF0rLFxccypbXFxkXSspXFwpL2cuZXhlYyhyZ2JWYWx1ZSk7XG4gIHJldHVybiByZ2IgPyAoXCJyZ2JhKFwiICsgKHJnYlsxXSkgKyBcIiwxKVwiKSA6IHJnYlZhbHVlO1xufVxuXG5mdW5jdGlvbiBoZXhUb1JnYmEoaGV4VmFsdWUpIHtcbiAgdmFyIHJneCA9IC9eIz8oW2EtZlxcZF0pKFthLWZcXGRdKShbYS1mXFxkXSkkL2k7XG4gIHZhciBoZXggPSBoZXhWYWx1ZS5yZXBsYWNlKHJneCwgZnVuY3Rpb24gKG0sIHIsIGcsIGIpIHsgcmV0dXJuIHIgKyByICsgZyArIGcgKyBiICsgYjsgfSApO1xuICB2YXIgcmdiID0gL14jPyhbYS1mXFxkXXsyfSkoW2EtZlxcZF17Mn0pKFthLWZcXGRdezJ9KSQvaS5leGVjKGhleCk7XG4gIHZhciByID0gcGFyc2VJbnQocmdiWzFdLCAxNik7XG4gIHZhciBnID0gcGFyc2VJbnQocmdiWzJdLCAxNik7XG4gIHZhciBiID0gcGFyc2VJbnQocmdiWzNdLCAxNik7XG4gIHJldHVybiAoXCJyZ2JhKFwiICsgciArIFwiLFwiICsgZyArIFwiLFwiICsgYiArIFwiLDEpXCIpO1xufVxuXG5mdW5jdGlvbiBoc2xUb1JnYmEoaHNsVmFsdWUpIHtcbiAgdmFyIGhzbCA9IC9oc2xcXCgoXFxkKyksXFxzKihbXFxkLl0rKSUsXFxzKihbXFxkLl0rKSVcXCkvZy5leGVjKGhzbFZhbHVlKSB8fCAvaHNsYVxcKChcXGQrKSxcXHMqKFtcXGQuXSspJSxcXHMqKFtcXGQuXSspJSxcXHMqKFtcXGQuXSspXFwpL2cuZXhlYyhoc2xWYWx1ZSk7XG4gIHZhciBoID0gcGFyc2VJbnQoaHNsWzFdLCAxMCkgLyAzNjA7XG4gIHZhciBzID0gcGFyc2VJbnQoaHNsWzJdLCAxMCkgLyAxMDA7XG4gIHZhciBsID0gcGFyc2VJbnQoaHNsWzNdLCAxMCkgLyAxMDA7XG4gIHZhciBhID0gaHNsWzRdIHx8IDE7XG4gIGZ1bmN0aW9uIGh1ZTJyZ2IocCwgcSwgdCkge1xuICAgIGlmICh0IDwgMCkgeyB0ICs9IDE7IH1cbiAgICBpZiAodCA+IDEpIHsgdCAtPSAxOyB9XG4gICAgaWYgKHQgPCAxLzYpIHsgcmV0dXJuIHAgKyAocSAtIHApICogNiAqIHQ7IH1cbiAgICBpZiAodCA8IDEvMikgeyByZXR1cm4gcTsgfVxuICAgIGlmICh0IDwgMi8zKSB7IHJldHVybiBwICsgKHEgLSBwKSAqICgyLzMgLSB0KSAqIDY7IH1cbiAgICByZXR1cm4gcDtcbiAgfVxuICB2YXIgciwgZywgYjtcbiAgaWYgKHMgPT0gMCkge1xuICAgIHIgPSBnID0gYiA9IGw7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHEgPSBsIDwgMC41ID8gbCAqICgxICsgcykgOiBsICsgcyAtIGwgKiBzO1xuICAgIHZhciBwID0gMiAqIGwgLSBxO1xuICAgIHIgPSBodWUycmdiKHAsIHEsIGggKyAxLzMpO1xuICAgIGcgPSBodWUycmdiKHAsIHEsIGgpO1xuICAgIGIgPSBodWUycmdiKHAsIHEsIGggLSAxLzMpO1xuICB9XG4gIHJldHVybiAoXCJyZ2JhKFwiICsgKHIgKiAyNTUpICsgXCIsXCIgKyAoZyAqIDI1NSkgKyBcIixcIiArIChiICogMjU1KSArIFwiLFwiICsgYSArIFwiKVwiKTtcbn1cblxuZnVuY3Rpb24gY29sb3JUb1JnYih2YWwpIHtcbiAgaWYgKGlzLnJnYih2YWwpKSB7IHJldHVybiByZ2JUb1JnYmEodmFsKTsgfVxuICBpZiAoaXMuaGV4KHZhbCkpIHsgcmV0dXJuIGhleFRvUmdiYSh2YWwpOyB9XG4gIGlmIChpcy5oc2wodmFsKSkgeyByZXR1cm4gaHNsVG9SZ2JhKHZhbCk7IH1cbn1cblxuLy8gVW5pdHNcblxuZnVuY3Rpb24gZ2V0VW5pdCh2YWwpIHtcbiAgdmFyIHNwbGl0ID0gL1srLV0/XFxkKlxcLj9cXGQrKD86XFwuXFxkKyk/KD86W2VFXVsrLV0/XFxkKyk/KCV8cHh8cHR8ZW18cmVtfGlufGNtfG1tfGV4fGNofHBjfHZ3fHZofHZtaW58dm1heHxkZWd8cmFkfHR1cm4pPyQvLmV4ZWModmFsKTtcbiAgaWYgKHNwbGl0KSB7IHJldHVybiBzcGxpdFsxXTsgfVxufVxuXG5mdW5jdGlvbiBnZXRUcmFuc2Zvcm1Vbml0KHByb3BOYW1lKSB7XG4gIGlmIChzdHJpbmdDb250YWlucyhwcm9wTmFtZSwgJ3RyYW5zbGF0ZScpIHx8IHByb3BOYW1lID09PSAncGVyc3BlY3RpdmUnKSB7IHJldHVybiAncHgnOyB9XG4gIGlmIChzdHJpbmdDb250YWlucyhwcm9wTmFtZSwgJ3JvdGF0ZScpIHx8IHN0cmluZ0NvbnRhaW5zKHByb3BOYW1lLCAnc2tldycpKSB7IHJldHVybiAnZGVnJzsgfVxufVxuXG4vLyBWYWx1ZXNcblxuZnVuY3Rpb24gZ2V0RnVuY3Rpb25WYWx1ZSh2YWwsIGFuaW1hdGFibGUpIHtcbiAgaWYgKCFpcy5mbmModmFsKSkgeyByZXR1cm4gdmFsOyB9XG4gIHJldHVybiB2YWwoYW5pbWF0YWJsZS50YXJnZXQsIGFuaW1hdGFibGUuaWQsIGFuaW1hdGFibGUudG90YWwpO1xufVxuXG5mdW5jdGlvbiBnZXRBdHRyaWJ1dGUoZWwsIHByb3ApIHtcbiAgcmV0dXJuIGVsLmdldEF0dHJpYnV0ZShwcm9wKTtcbn1cblxuZnVuY3Rpb24gY29udmVydFB4VG9Vbml0KGVsLCB2YWx1ZSwgdW5pdCkge1xuICB2YXIgdmFsdWVVbml0ID0gZ2V0VW5pdCh2YWx1ZSk7XG4gIGlmIChhcnJheUNvbnRhaW5zKFt1bml0LCAnZGVnJywgJ3JhZCcsICd0dXJuJ10sIHZhbHVlVW5pdCkpIHsgcmV0dXJuIHZhbHVlOyB9XG4gIHZhciBjYWNoZWQgPSBjYWNoZS5DU1NbdmFsdWUgKyB1bml0XTtcbiAgaWYgKCFpcy51bmQoY2FjaGVkKSkgeyByZXR1cm4gY2FjaGVkOyB9XG4gIHZhciBiYXNlbGluZSA9IDEwMDtcbiAgdmFyIHRlbXBFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoZWwudGFnTmFtZSk7XG4gIHZhciBwYXJlbnRFbCA9IChlbC5wYXJlbnROb2RlICYmIChlbC5wYXJlbnROb2RlICE9PSBkb2N1bWVudCkpID8gZWwucGFyZW50Tm9kZSA6IGRvY3VtZW50LmJvZHk7XG4gIHBhcmVudEVsLmFwcGVuZENoaWxkKHRlbXBFbCk7XG4gIHRlbXBFbC5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gIHRlbXBFbC5zdHlsZS53aWR0aCA9IGJhc2VsaW5lICsgdW5pdDtcbiAgdmFyIGZhY3RvciA9IGJhc2VsaW5lIC8gdGVtcEVsLm9mZnNldFdpZHRoO1xuICBwYXJlbnRFbC5yZW1vdmVDaGlsZCh0ZW1wRWwpO1xuICB2YXIgY29udmVydGVkVW5pdCA9IGZhY3RvciAqIHBhcnNlRmxvYXQodmFsdWUpO1xuICBjYWNoZS5DU1NbdmFsdWUgKyB1bml0XSA9IGNvbnZlcnRlZFVuaXQ7XG4gIHJldHVybiBjb252ZXJ0ZWRVbml0O1xufVxuXG5mdW5jdGlvbiBnZXRDU1NWYWx1ZShlbCwgcHJvcCwgdW5pdCkge1xuICBpZiAocHJvcCBpbiBlbC5zdHlsZSkge1xuICAgIHZhciB1cHBlcmNhc2VQcm9wTmFtZSA9IHByb3AucmVwbGFjZSgvKFthLXpdKShbQS1aXSkvZywgJyQxLSQyJykudG9Mb3dlckNhc2UoKTtcbiAgICB2YXIgdmFsdWUgPSBlbC5zdHlsZVtwcm9wXSB8fCBnZXRDb21wdXRlZFN0eWxlKGVsKS5nZXRQcm9wZXJ0eVZhbHVlKHVwcGVyY2FzZVByb3BOYW1lKSB8fCAnMCc7XG4gICAgcmV0dXJuIHVuaXQgPyBjb252ZXJ0UHhUb1VuaXQoZWwsIHZhbHVlLCB1bml0KSA6IHZhbHVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldEFuaW1hdGlvblR5cGUoZWwsIHByb3ApIHtcbiAgaWYgKGlzLmRvbShlbCkgJiYgIWlzLmlucChlbCkgJiYgKCFpcy5uaWwoZ2V0QXR0cmlidXRlKGVsLCBwcm9wKSkgfHwgKGlzLnN2ZyhlbCkgJiYgZWxbcHJvcF0pKSkgeyByZXR1cm4gJ2F0dHJpYnV0ZSc7IH1cbiAgaWYgKGlzLmRvbShlbCkgJiYgYXJyYXlDb250YWlucyh2YWxpZFRyYW5zZm9ybXMsIHByb3ApKSB7IHJldHVybiAndHJhbnNmb3JtJzsgfVxuICBpZiAoaXMuZG9tKGVsKSAmJiAocHJvcCAhPT0gJ3RyYW5zZm9ybScgJiYgZ2V0Q1NTVmFsdWUoZWwsIHByb3ApKSkgeyByZXR1cm4gJ2Nzcyc7IH1cbiAgaWYgKGVsW3Byb3BdICE9IG51bGwpIHsgcmV0dXJuICdvYmplY3QnOyB9XG59XG5cbmZ1bmN0aW9uIGdldEVsZW1lbnRUcmFuc2Zvcm1zKGVsKSB7XG4gIGlmICghaXMuZG9tKGVsKSkgeyByZXR1cm47IH1cbiAgdmFyIHN0ciA9IGVsLnN0eWxlLnRyYW5zZm9ybSB8fCAnJztcbiAgdmFyIHJlZyAgPSAvKFxcdyspXFwoKFteKV0qKVxcKS9nO1xuICB2YXIgdHJhbnNmb3JtcyA9IG5ldyBNYXAoKTtcbiAgdmFyIG07IHdoaWxlIChtID0gcmVnLmV4ZWMoc3RyKSkgeyB0cmFuc2Zvcm1zLnNldChtWzFdLCBtWzJdKTsgfVxuICByZXR1cm4gdHJhbnNmb3Jtcztcbn1cblxuZnVuY3Rpb24gZ2V0VHJhbnNmb3JtVmFsdWUoZWwsIHByb3BOYW1lLCBhbmltYXRhYmxlLCB1bml0KSB7XG4gIHZhciBkZWZhdWx0VmFsID0gc3RyaW5nQ29udGFpbnMocHJvcE5hbWUsICdzY2FsZScpID8gMSA6IDAgKyBnZXRUcmFuc2Zvcm1Vbml0KHByb3BOYW1lKTtcbiAgdmFyIHZhbHVlID0gZ2V0RWxlbWVudFRyYW5zZm9ybXMoZWwpLmdldChwcm9wTmFtZSkgfHwgZGVmYXVsdFZhbDtcbiAgaWYgKGFuaW1hdGFibGUpIHtcbiAgICBhbmltYXRhYmxlLnRyYW5zZm9ybXMubGlzdC5zZXQocHJvcE5hbWUsIHZhbHVlKTtcbiAgICBhbmltYXRhYmxlLnRyYW5zZm9ybXNbJ2xhc3QnXSA9IHByb3BOYW1lO1xuICB9XG4gIHJldHVybiB1bml0ID8gY29udmVydFB4VG9Vbml0KGVsLCB2YWx1ZSwgdW5pdCkgOiB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gZ2V0T3JpZ2luYWxUYXJnZXRWYWx1ZSh0YXJnZXQsIHByb3BOYW1lLCB1bml0LCBhbmltYXRhYmxlKSB7XG4gIHN3aXRjaCAoZ2V0QW5pbWF0aW9uVHlwZSh0YXJnZXQsIHByb3BOYW1lKSkge1xuICAgIGNhc2UgJ3RyYW5zZm9ybSc6IHJldHVybiBnZXRUcmFuc2Zvcm1WYWx1ZSh0YXJnZXQsIHByb3BOYW1lLCBhbmltYXRhYmxlLCB1bml0KTtcbiAgICBjYXNlICdjc3MnOiByZXR1cm4gZ2V0Q1NTVmFsdWUodGFyZ2V0LCBwcm9wTmFtZSwgdW5pdCk7XG4gICAgY2FzZSAnYXR0cmlidXRlJzogcmV0dXJuIGdldEF0dHJpYnV0ZSh0YXJnZXQsIHByb3BOYW1lKTtcbiAgICBkZWZhdWx0OiByZXR1cm4gdGFyZ2V0W3Byb3BOYW1lXSB8fCAwO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldFJlbGF0aXZlVmFsdWUodG8sIGZyb20pIHtcbiAgdmFyIG9wZXJhdG9yID0gL14oXFwqPXxcXCs9fC09KS8uZXhlYyh0byk7XG4gIGlmICghb3BlcmF0b3IpIHsgcmV0dXJuIHRvOyB9XG4gIHZhciB1ID0gZ2V0VW5pdCh0bykgfHwgMDtcbiAgdmFyIHggPSBwYXJzZUZsb2F0KGZyb20pO1xuICB2YXIgeSA9IHBhcnNlRmxvYXQodG8ucmVwbGFjZShvcGVyYXRvclswXSwgJycpKTtcbiAgc3dpdGNoIChvcGVyYXRvclswXVswXSkge1xuICAgIGNhc2UgJysnOiByZXR1cm4geCArIHkgKyB1O1xuICAgIGNhc2UgJy0nOiByZXR1cm4geCAtIHkgKyB1O1xuICAgIGNhc2UgJyonOiByZXR1cm4geCAqIHkgKyB1O1xuICB9XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlVmFsdWUodmFsLCB1bml0KSB7XG4gIGlmIChpcy5jb2wodmFsKSkgeyByZXR1cm4gY29sb3JUb1JnYih2YWwpOyB9XG4gIGlmICgvXFxzL2cudGVzdCh2YWwpKSB7IHJldHVybiB2YWw7IH1cbiAgdmFyIG9yaWdpbmFsVW5pdCA9IGdldFVuaXQodmFsKTtcbiAgdmFyIHVuaXRMZXNzID0gb3JpZ2luYWxVbml0ID8gdmFsLnN1YnN0cigwLCB2YWwubGVuZ3RoIC0gb3JpZ2luYWxVbml0Lmxlbmd0aCkgOiB2YWw7XG4gIGlmICh1bml0KSB7IHJldHVybiB1bml0TGVzcyArIHVuaXQ7IH1cbiAgcmV0dXJuIHVuaXRMZXNzO1xufVxuXG4vLyBnZXRUb3RhbExlbmd0aCgpIGVxdWl2YWxlbnQgZm9yIGNpcmNsZSwgcmVjdCwgcG9seWxpbmUsIHBvbHlnb24gYW5kIGxpbmUgc2hhcGVzXG4vLyBhZGFwdGVkIGZyb20gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vU2ViTGFtYmxhLzNlMDU1MGM0OTZjMjM2NzA5NzQ0XG5cbmZ1bmN0aW9uIGdldERpc3RhbmNlKHAxLCBwMikge1xuICByZXR1cm4gTWF0aC5zcXJ0KE1hdGgucG93KHAyLnggLSBwMS54LCAyKSArIE1hdGgucG93KHAyLnkgLSBwMS55LCAyKSk7XG59XG5cbmZ1bmN0aW9uIGdldENpcmNsZUxlbmd0aChlbCkge1xuICByZXR1cm4gTWF0aC5QSSAqIDIgKiBnZXRBdHRyaWJ1dGUoZWwsICdyJyk7XG59XG5cbmZ1bmN0aW9uIGdldFJlY3RMZW5ndGgoZWwpIHtcbiAgcmV0dXJuIChnZXRBdHRyaWJ1dGUoZWwsICd3aWR0aCcpICogMikgKyAoZ2V0QXR0cmlidXRlKGVsLCAnaGVpZ2h0JykgKiAyKTtcbn1cblxuZnVuY3Rpb24gZ2V0TGluZUxlbmd0aChlbCkge1xuICByZXR1cm4gZ2V0RGlzdGFuY2UoXG4gICAge3g6IGdldEF0dHJpYnV0ZShlbCwgJ3gxJyksIHk6IGdldEF0dHJpYnV0ZShlbCwgJ3kxJyl9LCBcbiAgICB7eDogZ2V0QXR0cmlidXRlKGVsLCAneDInKSwgeTogZ2V0QXR0cmlidXRlKGVsLCAneTInKX1cbiAgKTtcbn1cblxuZnVuY3Rpb24gZ2V0UG9seWxpbmVMZW5ndGgoZWwpIHtcbiAgdmFyIHBvaW50cyA9IGVsLnBvaW50cztcbiAgdmFyIHRvdGFsTGVuZ3RoID0gMDtcbiAgdmFyIHByZXZpb3VzUG9zO1xuICBmb3IgKHZhciBpID0gMCA7IGkgPCBwb2ludHMubnVtYmVyT2ZJdGVtczsgaSsrKSB7XG4gICAgdmFyIGN1cnJlbnRQb3MgPSBwb2ludHMuZ2V0SXRlbShpKTtcbiAgICBpZiAoaSA+IDApIHsgdG90YWxMZW5ndGggKz0gZ2V0RGlzdGFuY2UocHJldmlvdXNQb3MsIGN1cnJlbnRQb3MpOyB9XG4gICAgcHJldmlvdXNQb3MgPSBjdXJyZW50UG9zO1xuICB9XG4gIHJldHVybiB0b3RhbExlbmd0aDtcbn1cblxuZnVuY3Rpb24gZ2V0UG9seWdvbkxlbmd0aChlbCkge1xuICB2YXIgcG9pbnRzID0gZWwucG9pbnRzO1xuICByZXR1cm4gZ2V0UG9seWxpbmVMZW5ndGgoZWwpICsgZ2V0RGlzdGFuY2UocG9pbnRzLmdldEl0ZW0ocG9pbnRzLm51bWJlck9mSXRlbXMgLSAxKSwgcG9pbnRzLmdldEl0ZW0oMCkpO1xufVxuXG4vLyBQYXRoIGFuaW1hdGlvblxuXG5mdW5jdGlvbiBnZXRUb3RhbExlbmd0aChlbCkge1xuICBpZiAoZWwuZ2V0VG90YWxMZW5ndGgpIHsgcmV0dXJuIGVsLmdldFRvdGFsTGVuZ3RoKCk7IH1cbiAgc3dpdGNoKGVsLnRhZ05hbWUudG9Mb3dlckNhc2UoKSkge1xuICAgIGNhc2UgJ2NpcmNsZSc6IHJldHVybiBnZXRDaXJjbGVMZW5ndGgoZWwpO1xuICAgIGNhc2UgJ3JlY3QnOiByZXR1cm4gZ2V0UmVjdExlbmd0aChlbCk7XG4gICAgY2FzZSAnbGluZSc6IHJldHVybiBnZXRMaW5lTGVuZ3RoKGVsKTtcbiAgICBjYXNlICdwb2x5bGluZSc6IHJldHVybiBnZXRQb2x5bGluZUxlbmd0aChlbCk7XG4gICAgY2FzZSAncG9seWdvbic6IHJldHVybiBnZXRQb2x5Z29uTGVuZ3RoKGVsKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzZXREYXNob2Zmc2V0KGVsKSB7XG4gIHZhciBwYXRoTGVuZ3RoID0gZ2V0VG90YWxMZW5ndGgoZWwpO1xuICBlbC5zZXRBdHRyaWJ1dGUoJ3N0cm9rZS1kYXNoYXJyYXknLCBwYXRoTGVuZ3RoKTtcbiAgcmV0dXJuIHBhdGhMZW5ndGg7XG59XG5cbi8vIE1vdGlvbiBwYXRoXG5cbmZ1bmN0aW9uIGdldFBhcmVudFN2Z0VsKGVsKSB7XG4gIHZhciBwYXJlbnRFbCA9IGVsLnBhcmVudE5vZGU7XG4gIHdoaWxlIChpcy5zdmcocGFyZW50RWwpKSB7XG4gICAgaWYgKCFpcy5zdmcocGFyZW50RWwucGFyZW50Tm9kZSkpIHsgYnJlYWs7IH1cbiAgICBwYXJlbnRFbCA9IHBhcmVudEVsLnBhcmVudE5vZGU7XG4gIH1cbiAgcmV0dXJuIHBhcmVudEVsO1xufVxuXG5mdW5jdGlvbiBnZXRQYXJlbnRTdmcocGF0aEVsLCBzdmdEYXRhKSB7XG4gIHZhciBzdmcgPSBzdmdEYXRhIHx8IHt9O1xuICB2YXIgcGFyZW50U3ZnRWwgPSBzdmcuZWwgfHwgZ2V0UGFyZW50U3ZnRWwocGF0aEVsKTtcbiAgdmFyIHJlY3QgPSBwYXJlbnRTdmdFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgdmFyIHZpZXdCb3hBdHRyID0gZ2V0QXR0cmlidXRlKHBhcmVudFN2Z0VsLCAndmlld0JveCcpO1xuICB2YXIgd2lkdGggPSByZWN0LndpZHRoO1xuICB2YXIgaGVpZ2h0ID0gcmVjdC5oZWlnaHQ7XG4gIHZhciB2aWV3Qm94ID0gc3ZnLnZpZXdCb3ggfHwgKHZpZXdCb3hBdHRyID8gdmlld0JveEF0dHIuc3BsaXQoJyAnKSA6IFswLCAwLCB3aWR0aCwgaGVpZ2h0XSk7XG4gIHJldHVybiB7XG4gICAgZWw6IHBhcmVudFN2Z0VsLFxuICAgIHZpZXdCb3g6IHZpZXdCb3gsXG4gICAgeDogdmlld0JveFswXSAvIDEsXG4gICAgeTogdmlld0JveFsxXSAvIDEsXG4gICAgdzogd2lkdGgsXG4gICAgaDogaGVpZ2h0LFxuICAgIHZXOiB2aWV3Qm94WzJdLFxuICAgIHZIOiB2aWV3Qm94WzNdXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0UGF0aChwYXRoLCBwZXJjZW50KSB7XG4gIHZhciBwYXRoRWwgPSBpcy5zdHIocGF0aCkgPyBzZWxlY3RTdHJpbmcocGF0aClbMF0gOiBwYXRoO1xuICB2YXIgcCA9IHBlcmNlbnQgfHwgMTAwO1xuICByZXR1cm4gZnVuY3Rpb24ocHJvcGVydHkpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcHJvcGVydHk6IHByb3BlcnR5LFxuICAgICAgZWw6IHBhdGhFbCxcbiAgICAgIHN2ZzogZ2V0UGFyZW50U3ZnKHBhdGhFbCksXG4gICAgICB0b3RhbExlbmd0aDogZ2V0VG90YWxMZW5ndGgocGF0aEVsKSAqIChwIC8gMTAwKVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRQYXRoUHJvZ3Jlc3MocGF0aCwgcHJvZ3Jlc3MsIGlzUGF0aFRhcmdldEluc2lkZVNWRykge1xuICBmdW5jdGlvbiBwb2ludChvZmZzZXQpIHtcbiAgICBpZiAoIG9mZnNldCA9PT0gdm9pZCAwICkgb2Zmc2V0ID0gMDtcblxuICAgIHZhciBsID0gcHJvZ3Jlc3MgKyBvZmZzZXQgPj0gMSA/IHByb2dyZXNzICsgb2Zmc2V0IDogMDtcbiAgICByZXR1cm4gcGF0aC5lbC5nZXRQb2ludEF0TGVuZ3RoKGwpO1xuICB9XG4gIHZhciBzdmcgPSBnZXRQYXJlbnRTdmcocGF0aC5lbCwgcGF0aC5zdmcpO1xuICB2YXIgcCA9IHBvaW50KCk7XG4gIHZhciBwMCA9IHBvaW50KC0xKTtcbiAgdmFyIHAxID0gcG9pbnQoKzEpO1xuICB2YXIgc2NhbGVYID0gaXNQYXRoVGFyZ2V0SW5zaWRlU1ZHID8gMSA6IHN2Zy53IC8gc3ZnLnZXO1xuICB2YXIgc2NhbGVZID0gaXNQYXRoVGFyZ2V0SW5zaWRlU1ZHID8gMSA6IHN2Zy5oIC8gc3ZnLnZIO1xuICBzd2l0Y2ggKHBhdGgucHJvcGVydHkpIHtcbiAgICBjYXNlICd4JzogcmV0dXJuIChwLnggLSBzdmcueCkgKiBzY2FsZVg7XG4gICAgY2FzZSAneSc6IHJldHVybiAocC55IC0gc3ZnLnkpICogc2NhbGVZO1xuICAgIGNhc2UgJ2FuZ2xlJzogcmV0dXJuIE1hdGguYXRhbjIocDEueSAtIHAwLnksIHAxLnggLSBwMC54KSAqIDE4MCAvIE1hdGguUEk7XG4gIH1cbn1cblxuLy8gRGVjb21wb3NlIHZhbHVlXG5cbmZ1bmN0aW9uIGRlY29tcG9zZVZhbHVlKHZhbCwgdW5pdCkge1xuICAvLyBjb25zdCByZ3ggPSAvLT9cXGQqXFwuP1xcZCsvZzsgLy8gaGFuZGxlcyBiYXNpYyBudW1iZXJzXG4gIC8vIGNvbnN0IHJneCA9IC9bKy1dP1xcZCsoPzpcXC5cXGQrKT8oPzpbZUVdWystXT9cXGQrKT8vZzsgLy8gaGFuZGxlcyBleHBvbmVudHMgbm90YXRpb25cbiAgdmFyIHJneCA9IC9bKy1dP1xcZCpcXC4/XFxkKyg/OlxcLlxcZCspPyg/OltlRV1bKy1dP1xcZCspPy9nOyAvLyBoYW5kbGVzIGV4cG9uZW50cyBub3RhdGlvblxuICB2YXIgdmFsdWUgPSB2YWxpZGF0ZVZhbHVlKChpcy5wdGgodmFsKSA/IHZhbC50b3RhbExlbmd0aCA6IHZhbCksIHVuaXQpICsgJyc7XG4gIHJldHVybiB7XG4gICAgb3JpZ2luYWw6IHZhbHVlLFxuICAgIG51bWJlcnM6IHZhbHVlLm1hdGNoKHJneCkgPyB2YWx1ZS5tYXRjaChyZ3gpLm1hcChOdW1iZXIpIDogWzBdLFxuICAgIHN0cmluZ3M6IChpcy5zdHIodmFsKSB8fCB1bml0KSA/IHZhbHVlLnNwbGl0KHJneCkgOiBbXVxuICB9XG59XG5cbi8vIEFuaW1hdGFibGVzXG5cbmZ1bmN0aW9uIHBhcnNlVGFyZ2V0cyh0YXJnZXRzKSB7XG4gIHZhciB0YXJnZXRzQXJyYXkgPSB0YXJnZXRzID8gKGZsYXR0ZW5BcnJheShpcy5hcnIodGFyZ2V0cykgPyB0YXJnZXRzLm1hcCh0b0FycmF5KSA6IHRvQXJyYXkodGFyZ2V0cykpKSA6IFtdO1xuICByZXR1cm4gZmlsdGVyQXJyYXkodGFyZ2V0c0FycmF5LCBmdW5jdGlvbiAoaXRlbSwgcG9zLCBzZWxmKSB7IHJldHVybiBzZWxmLmluZGV4T2YoaXRlbSkgPT09IHBvczsgfSk7XG59XG5cbmZ1bmN0aW9uIGdldEFuaW1hdGFibGVzKHRhcmdldHMpIHtcbiAgdmFyIHBhcnNlZCA9IHBhcnNlVGFyZ2V0cyh0YXJnZXRzKTtcbiAgcmV0dXJuIHBhcnNlZC5tYXAoZnVuY3Rpb24gKHQsIGkpIHtcbiAgICByZXR1cm4ge3RhcmdldDogdCwgaWQ6IGksIHRvdGFsOiBwYXJzZWQubGVuZ3RoLCB0cmFuc2Zvcm1zOiB7IGxpc3Q6IGdldEVsZW1lbnRUcmFuc2Zvcm1zKHQpIH0gfTtcbiAgfSk7XG59XG5cbi8vIFByb3BlcnRpZXNcblxuZnVuY3Rpb24gbm9ybWFsaXplUHJvcGVydHlUd2VlbnMocHJvcCwgdHdlZW5TZXR0aW5ncykge1xuICB2YXIgc2V0dGluZ3MgPSBjbG9uZU9iamVjdCh0d2VlblNldHRpbmdzKTtcbiAgLy8gT3ZlcnJpZGUgZHVyYXRpb24gaWYgZWFzaW5nIGlzIGEgc3ByaW5nXG4gIGlmICgvXnNwcmluZy8udGVzdChzZXR0aW5ncy5lYXNpbmcpKSB7IHNldHRpbmdzLmR1cmF0aW9uID0gc3ByaW5nKHNldHRpbmdzLmVhc2luZyk7IH1cbiAgaWYgKGlzLmFycihwcm9wKSkge1xuICAgIHZhciBsID0gcHJvcC5sZW5ndGg7XG4gICAgdmFyIGlzRnJvbVRvID0gKGwgPT09IDIgJiYgIWlzLm9iaihwcm9wWzBdKSk7XG4gICAgaWYgKCFpc0Zyb21Ubykge1xuICAgICAgLy8gRHVyYXRpb24gZGl2aWRlZCBieSB0aGUgbnVtYmVyIG9mIHR3ZWVuc1xuICAgICAgaWYgKCFpcy5mbmModHdlZW5TZXR0aW5ncy5kdXJhdGlvbikpIHsgc2V0dGluZ3MuZHVyYXRpb24gPSB0d2VlblNldHRpbmdzLmR1cmF0aW9uIC8gbDsgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBUcmFuc2Zvcm0gW2Zyb20sIHRvXSB2YWx1ZXMgc2hvcnRoYW5kIHRvIGEgdmFsaWQgdHdlZW4gdmFsdWVcbiAgICAgIHByb3AgPSB7dmFsdWU6IHByb3B9O1xuICAgIH1cbiAgfVxuICB2YXIgcHJvcEFycmF5ID0gaXMuYXJyKHByb3ApID8gcHJvcCA6IFtwcm9wXTtcbiAgcmV0dXJuIHByb3BBcnJheS5tYXAoZnVuY3Rpb24gKHYsIGkpIHtcbiAgICB2YXIgb2JqID0gKGlzLm9iaih2KSAmJiAhaXMucHRoKHYpKSA/IHYgOiB7dmFsdWU6IHZ9O1xuICAgIC8vIERlZmF1bHQgZGVsYXkgdmFsdWUgc2hvdWxkIG9ubHkgYmUgYXBwbGllZCB0byB0aGUgZmlyc3QgdHdlZW5cbiAgICBpZiAoaXMudW5kKG9iai5kZWxheSkpIHsgb2JqLmRlbGF5ID0gIWkgPyB0d2VlblNldHRpbmdzLmRlbGF5IDogMDsgfVxuICAgIC8vIERlZmF1bHQgZW5kRGVsYXkgdmFsdWUgc2hvdWxkIG9ubHkgYmUgYXBwbGllZCB0byB0aGUgbGFzdCB0d2VlblxuICAgIGlmIChpcy51bmQob2JqLmVuZERlbGF5KSkgeyBvYmouZW5kRGVsYXkgPSBpID09PSBwcm9wQXJyYXkubGVuZ3RoIC0gMSA/IHR3ZWVuU2V0dGluZ3MuZW5kRGVsYXkgOiAwOyB9XG4gICAgcmV0dXJuIG9iajtcbiAgfSkubWFwKGZ1bmN0aW9uIChrKSB7IHJldHVybiBtZXJnZU9iamVjdHMoaywgc2V0dGluZ3MpOyB9KTtcbn1cblxuXG5mdW5jdGlvbiBmbGF0dGVuS2V5ZnJhbWVzKGtleWZyYW1lcykge1xuICB2YXIgcHJvcGVydHlOYW1lcyA9IGZpbHRlckFycmF5KGZsYXR0ZW5BcnJheShrZXlmcmFtZXMubWFwKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIE9iamVjdC5rZXlzKGtleSk7IH0pKSwgZnVuY3Rpb24gKHApIHsgcmV0dXJuIGlzLmtleShwKTsgfSlcbiAgLnJlZHVjZShmdW5jdGlvbiAoYSxiKSB7IGlmIChhLmluZGV4T2YoYikgPCAwKSB7IGEucHVzaChiKTsgfSByZXR1cm4gYTsgfSwgW10pO1xuICB2YXIgcHJvcGVydGllcyA9IHt9O1xuICB2YXIgbG9vcCA9IGZ1bmN0aW9uICggaSApIHtcbiAgICB2YXIgcHJvcE5hbWUgPSBwcm9wZXJ0eU5hbWVzW2ldO1xuICAgIHByb3BlcnRpZXNbcHJvcE5hbWVdID0ga2V5ZnJhbWVzLm1hcChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICB2YXIgbmV3S2V5ID0ge307XG4gICAgICBmb3IgKHZhciBwIGluIGtleSkge1xuICAgICAgICBpZiAoaXMua2V5KHApKSB7XG4gICAgICAgICAgaWYgKHAgPT0gcHJvcE5hbWUpIHsgbmV3S2V5LnZhbHVlID0ga2V5W3BdOyB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV3S2V5W3BdID0ga2V5W3BdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3S2V5O1xuICAgIH0pO1xuICB9O1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcGVydHlOYW1lcy5sZW5ndGg7IGkrKykgbG9vcCggaSApO1xuICByZXR1cm4gcHJvcGVydGllcztcbn1cblxuZnVuY3Rpb24gZ2V0UHJvcGVydGllcyh0d2VlblNldHRpbmdzLCBwYXJhbXMpIHtcbiAgdmFyIHByb3BlcnRpZXMgPSBbXTtcbiAgdmFyIGtleWZyYW1lcyA9IHBhcmFtcy5rZXlmcmFtZXM7XG4gIGlmIChrZXlmcmFtZXMpIHsgcGFyYW1zID0gbWVyZ2VPYmplY3RzKGZsYXR0ZW5LZXlmcmFtZXMoa2V5ZnJhbWVzKSwgcGFyYW1zKTsgfVxuICBmb3IgKHZhciBwIGluIHBhcmFtcykge1xuICAgIGlmIChpcy5rZXkocCkpIHtcbiAgICAgIHByb3BlcnRpZXMucHVzaCh7XG4gICAgICAgIG5hbWU6IHAsXG4gICAgICAgIHR3ZWVuczogbm9ybWFsaXplUHJvcGVydHlUd2VlbnMocGFyYW1zW3BdLCB0d2VlblNldHRpbmdzKVxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBwcm9wZXJ0aWVzO1xufVxuXG4vLyBUd2VlbnNcblxuZnVuY3Rpb24gbm9ybWFsaXplVHdlZW5WYWx1ZXModHdlZW4sIGFuaW1hdGFibGUpIHtcbiAgdmFyIHQgPSB7fTtcbiAgZm9yICh2YXIgcCBpbiB0d2Vlbikge1xuICAgIHZhciB2YWx1ZSA9IGdldEZ1bmN0aW9uVmFsdWUodHdlZW5bcF0sIGFuaW1hdGFibGUpO1xuICAgIGlmIChpcy5hcnIodmFsdWUpKSB7XG4gICAgICB2YWx1ZSA9IHZhbHVlLm1hcChmdW5jdGlvbiAodikgeyByZXR1cm4gZ2V0RnVuY3Rpb25WYWx1ZSh2LCBhbmltYXRhYmxlKTsgfSk7XG4gICAgICBpZiAodmFsdWUubGVuZ3RoID09PSAxKSB7IHZhbHVlID0gdmFsdWVbMF07IH1cbiAgICB9XG4gICAgdFtwXSA9IHZhbHVlO1xuICB9XG4gIHQuZHVyYXRpb24gPSBwYXJzZUZsb2F0KHQuZHVyYXRpb24pO1xuICB0LmRlbGF5ID0gcGFyc2VGbG9hdCh0LmRlbGF5KTtcbiAgcmV0dXJuIHQ7XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVR3ZWVucyhwcm9wLCBhbmltYXRhYmxlKSB7XG4gIHZhciBwcmV2aW91c1R3ZWVuO1xuICByZXR1cm4gcHJvcC50d2VlbnMubWFwKGZ1bmN0aW9uICh0KSB7XG4gICAgdmFyIHR3ZWVuID0gbm9ybWFsaXplVHdlZW5WYWx1ZXModCwgYW5pbWF0YWJsZSk7XG4gICAgdmFyIHR3ZWVuVmFsdWUgPSB0d2Vlbi52YWx1ZTtcbiAgICB2YXIgdG8gPSBpcy5hcnIodHdlZW5WYWx1ZSkgPyB0d2VlblZhbHVlWzFdIDogdHdlZW5WYWx1ZTtcbiAgICB2YXIgdG9Vbml0ID0gZ2V0VW5pdCh0byk7XG4gICAgdmFyIG9yaWdpbmFsVmFsdWUgPSBnZXRPcmlnaW5hbFRhcmdldFZhbHVlKGFuaW1hdGFibGUudGFyZ2V0LCBwcm9wLm5hbWUsIHRvVW5pdCwgYW5pbWF0YWJsZSk7XG4gICAgdmFyIHByZXZpb3VzVmFsdWUgPSBwcmV2aW91c1R3ZWVuID8gcHJldmlvdXNUd2Vlbi50by5vcmlnaW5hbCA6IG9yaWdpbmFsVmFsdWU7XG4gICAgdmFyIGZyb20gPSBpcy5hcnIodHdlZW5WYWx1ZSkgPyB0d2VlblZhbHVlWzBdIDogcHJldmlvdXNWYWx1ZTtcbiAgICB2YXIgZnJvbVVuaXQgPSBnZXRVbml0KGZyb20pIHx8IGdldFVuaXQob3JpZ2luYWxWYWx1ZSk7XG4gICAgdmFyIHVuaXQgPSB0b1VuaXQgfHwgZnJvbVVuaXQ7XG4gICAgaWYgKGlzLnVuZCh0bykpIHsgdG8gPSBwcmV2aW91c1ZhbHVlOyB9XG4gICAgdHdlZW4uZnJvbSA9IGRlY29tcG9zZVZhbHVlKGZyb20sIHVuaXQpO1xuICAgIHR3ZWVuLnRvID0gZGVjb21wb3NlVmFsdWUoZ2V0UmVsYXRpdmVWYWx1ZSh0bywgZnJvbSksIHVuaXQpO1xuICAgIHR3ZWVuLnN0YXJ0ID0gcHJldmlvdXNUd2VlbiA/IHByZXZpb3VzVHdlZW4uZW5kIDogMDtcbiAgICB0d2Vlbi5lbmQgPSB0d2Vlbi5zdGFydCArIHR3ZWVuLmRlbGF5ICsgdHdlZW4uZHVyYXRpb24gKyB0d2Vlbi5lbmREZWxheTtcbiAgICB0d2Vlbi5lYXNpbmcgPSBwYXJzZUVhc2luZ3ModHdlZW4uZWFzaW5nLCB0d2Vlbi5kdXJhdGlvbik7XG4gICAgdHdlZW4uaXNQYXRoID0gaXMucHRoKHR3ZWVuVmFsdWUpO1xuICAgIHR3ZWVuLmlzUGF0aFRhcmdldEluc2lkZVNWRyA9IHR3ZWVuLmlzUGF0aCAmJiBpcy5zdmcoYW5pbWF0YWJsZS50YXJnZXQpO1xuICAgIHR3ZWVuLmlzQ29sb3IgPSBpcy5jb2wodHdlZW4uZnJvbS5vcmlnaW5hbCk7XG4gICAgaWYgKHR3ZWVuLmlzQ29sb3IpIHsgdHdlZW4ucm91bmQgPSAxOyB9XG4gICAgcHJldmlvdXNUd2VlbiA9IHR3ZWVuO1xuICAgIHJldHVybiB0d2VlbjtcbiAgfSk7XG59XG5cbi8vIFR3ZWVuIHByb2dyZXNzXG5cbnZhciBzZXRQcm9ncmVzc1ZhbHVlID0ge1xuICBjc3M6IGZ1bmN0aW9uICh0LCBwLCB2KSB7IHJldHVybiB0LnN0eWxlW3BdID0gdjsgfSxcbiAgYXR0cmlidXRlOiBmdW5jdGlvbiAodCwgcCwgdikgeyByZXR1cm4gdC5zZXRBdHRyaWJ1dGUocCwgdik7IH0sXG4gIG9iamVjdDogZnVuY3Rpb24gKHQsIHAsIHYpIHsgcmV0dXJuIHRbcF0gPSB2OyB9LFxuICB0cmFuc2Zvcm06IGZ1bmN0aW9uICh0LCBwLCB2LCB0cmFuc2Zvcm1zLCBtYW51YWwpIHtcbiAgICB0cmFuc2Zvcm1zLmxpc3Quc2V0KHAsIHYpO1xuICAgIGlmIChwID09PSB0cmFuc2Zvcm1zLmxhc3QgfHwgbWFudWFsKSB7XG4gICAgICB2YXIgc3RyID0gJyc7XG4gICAgICB0cmFuc2Zvcm1zLmxpc3QuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUsIHByb3ApIHsgc3RyICs9IHByb3AgKyBcIihcIiArIHZhbHVlICsgXCIpIFwiOyB9KTtcbiAgICAgIHQuc3R5bGUudHJhbnNmb3JtID0gc3RyO1xuICAgIH1cbiAgfVxufTtcblxuLy8gU2V0IFZhbHVlIGhlbHBlclxuXG5mdW5jdGlvbiBzZXRUYXJnZXRzVmFsdWUodGFyZ2V0cywgcHJvcGVydGllcykge1xuICB2YXIgYW5pbWF0YWJsZXMgPSBnZXRBbmltYXRhYmxlcyh0YXJnZXRzKTtcbiAgYW5pbWF0YWJsZXMuZm9yRWFjaChmdW5jdGlvbiAoYW5pbWF0YWJsZSkge1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHByb3BlcnRpZXMpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGdldEZ1bmN0aW9uVmFsdWUocHJvcGVydGllc1twcm9wZXJ0eV0sIGFuaW1hdGFibGUpO1xuICAgICAgdmFyIHRhcmdldCA9IGFuaW1hdGFibGUudGFyZ2V0O1xuICAgICAgdmFyIHZhbHVlVW5pdCA9IGdldFVuaXQodmFsdWUpO1xuICAgICAgdmFyIG9yaWdpbmFsVmFsdWUgPSBnZXRPcmlnaW5hbFRhcmdldFZhbHVlKHRhcmdldCwgcHJvcGVydHksIHZhbHVlVW5pdCwgYW5pbWF0YWJsZSk7XG4gICAgICB2YXIgdW5pdCA9IHZhbHVlVW5pdCB8fCBnZXRVbml0KG9yaWdpbmFsVmFsdWUpO1xuICAgICAgdmFyIHRvID0gZ2V0UmVsYXRpdmVWYWx1ZSh2YWxpZGF0ZVZhbHVlKHZhbHVlLCB1bml0KSwgb3JpZ2luYWxWYWx1ZSk7XG4gICAgICB2YXIgYW5pbVR5cGUgPSBnZXRBbmltYXRpb25UeXBlKHRhcmdldCwgcHJvcGVydHkpO1xuICAgICAgc2V0UHJvZ3Jlc3NWYWx1ZVthbmltVHlwZV0odGFyZ2V0LCBwcm9wZXJ0eSwgdG8sIGFuaW1hdGFibGUudHJhbnNmb3JtcywgdHJ1ZSk7XG4gICAgfVxuICB9KTtcbn1cblxuLy8gQW5pbWF0aW9uc1xuXG5mdW5jdGlvbiBjcmVhdGVBbmltYXRpb24oYW5pbWF0YWJsZSwgcHJvcCkge1xuICB2YXIgYW5pbVR5cGUgPSBnZXRBbmltYXRpb25UeXBlKGFuaW1hdGFibGUudGFyZ2V0LCBwcm9wLm5hbWUpO1xuICBpZiAoYW5pbVR5cGUpIHtcbiAgICB2YXIgdHdlZW5zID0gbm9ybWFsaXplVHdlZW5zKHByb3AsIGFuaW1hdGFibGUpO1xuICAgIHZhciBsYXN0VHdlZW4gPSB0d2VlbnNbdHdlZW5zLmxlbmd0aCAtIDFdO1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBhbmltVHlwZSxcbiAgICAgIHByb3BlcnR5OiBwcm9wLm5hbWUsXG4gICAgICBhbmltYXRhYmxlOiBhbmltYXRhYmxlLFxuICAgICAgdHdlZW5zOiB0d2VlbnMsXG4gICAgICBkdXJhdGlvbjogbGFzdFR3ZWVuLmVuZCxcbiAgICAgIGRlbGF5OiB0d2VlbnNbMF0uZGVsYXksXG4gICAgICBlbmREZWxheTogbGFzdFR3ZWVuLmVuZERlbGF5XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGdldEFuaW1hdGlvbnMoYW5pbWF0YWJsZXMsIHByb3BlcnRpZXMpIHtcbiAgcmV0dXJuIGZpbHRlckFycmF5KGZsYXR0ZW5BcnJheShhbmltYXRhYmxlcy5tYXAoZnVuY3Rpb24gKGFuaW1hdGFibGUpIHtcbiAgICByZXR1cm4gcHJvcGVydGllcy5tYXAoZnVuY3Rpb24gKHByb3ApIHtcbiAgICAgIHJldHVybiBjcmVhdGVBbmltYXRpb24oYW5pbWF0YWJsZSwgcHJvcCk7XG4gICAgfSk7XG4gIH0pKSwgZnVuY3Rpb24gKGEpIHsgcmV0dXJuICFpcy51bmQoYSk7IH0pO1xufVxuXG4vLyBDcmVhdGUgSW5zdGFuY2VcblxuZnVuY3Rpb24gZ2V0SW5zdGFuY2VUaW1pbmdzKGFuaW1hdGlvbnMsIHR3ZWVuU2V0dGluZ3MpIHtcbiAgdmFyIGFuaW1MZW5ndGggPSBhbmltYXRpb25zLmxlbmd0aDtcbiAgdmFyIGdldFRsT2Zmc2V0ID0gZnVuY3Rpb24gKGFuaW0pIHsgcmV0dXJuIGFuaW0udGltZWxpbmVPZmZzZXQgPyBhbmltLnRpbWVsaW5lT2Zmc2V0IDogMDsgfTtcbiAgdmFyIHRpbWluZ3MgPSB7fTtcbiAgdGltaW5ncy5kdXJhdGlvbiA9IGFuaW1MZW5ndGggPyBNYXRoLm1heC5hcHBseShNYXRoLCBhbmltYXRpb25zLm1hcChmdW5jdGlvbiAoYW5pbSkgeyByZXR1cm4gZ2V0VGxPZmZzZXQoYW5pbSkgKyBhbmltLmR1cmF0aW9uOyB9KSkgOiB0d2VlblNldHRpbmdzLmR1cmF0aW9uO1xuICB0aW1pbmdzLmRlbGF5ID0gYW5pbUxlbmd0aCA/IE1hdGgubWluLmFwcGx5KE1hdGgsIGFuaW1hdGlvbnMubWFwKGZ1bmN0aW9uIChhbmltKSB7IHJldHVybiBnZXRUbE9mZnNldChhbmltKSArIGFuaW0uZGVsYXk7IH0pKSA6IHR3ZWVuU2V0dGluZ3MuZGVsYXk7XG4gIHRpbWluZ3MuZW5kRGVsYXkgPSBhbmltTGVuZ3RoID8gdGltaW5ncy5kdXJhdGlvbiAtIE1hdGgubWF4LmFwcGx5KE1hdGgsIGFuaW1hdGlvbnMubWFwKGZ1bmN0aW9uIChhbmltKSB7IHJldHVybiBnZXRUbE9mZnNldChhbmltKSArIGFuaW0uZHVyYXRpb24gLSBhbmltLmVuZERlbGF5OyB9KSkgOiB0d2VlblNldHRpbmdzLmVuZERlbGF5O1xuICByZXR1cm4gdGltaW5ncztcbn1cblxudmFyIGluc3RhbmNlSUQgPSAwO1xuXG5mdW5jdGlvbiBjcmVhdGVOZXdJbnN0YW5jZShwYXJhbXMpIHtcbiAgdmFyIGluc3RhbmNlU2V0dGluZ3MgPSByZXBsYWNlT2JqZWN0UHJvcHMoZGVmYXVsdEluc3RhbmNlU2V0dGluZ3MsIHBhcmFtcyk7XG4gIHZhciB0d2VlblNldHRpbmdzID0gcmVwbGFjZU9iamVjdFByb3BzKGRlZmF1bHRUd2VlblNldHRpbmdzLCBwYXJhbXMpO1xuICB2YXIgcHJvcGVydGllcyA9IGdldFByb3BlcnRpZXModHdlZW5TZXR0aW5ncywgcGFyYW1zKTtcbiAgdmFyIGFuaW1hdGFibGVzID0gZ2V0QW5pbWF0YWJsZXMocGFyYW1zLnRhcmdldHMpO1xuICB2YXIgYW5pbWF0aW9ucyA9IGdldEFuaW1hdGlvbnMoYW5pbWF0YWJsZXMsIHByb3BlcnRpZXMpO1xuICB2YXIgdGltaW5ncyA9IGdldEluc3RhbmNlVGltaW5ncyhhbmltYXRpb25zLCB0d2VlblNldHRpbmdzKTtcbiAgdmFyIGlkID0gaW5zdGFuY2VJRDtcbiAgaW5zdGFuY2VJRCsrO1xuICByZXR1cm4gbWVyZ2VPYmplY3RzKGluc3RhbmNlU2V0dGluZ3MsIHtcbiAgICBpZDogaWQsXG4gICAgY2hpbGRyZW46IFtdLFxuICAgIGFuaW1hdGFibGVzOiBhbmltYXRhYmxlcyxcbiAgICBhbmltYXRpb25zOiBhbmltYXRpb25zLFxuICAgIGR1cmF0aW9uOiB0aW1pbmdzLmR1cmF0aW9uLFxuICAgIGRlbGF5OiB0aW1pbmdzLmRlbGF5LFxuICAgIGVuZERlbGF5OiB0aW1pbmdzLmVuZERlbGF5XG4gIH0pO1xufVxuXG4vLyBDb3JlXG5cbnZhciBhY3RpdmVJbnN0YW5jZXMgPSBbXTtcblxudmFyIGVuZ2luZSA9IChmdW5jdGlvbiAoKSB7XG4gIHZhciByYWY7XG5cbiAgZnVuY3Rpb24gcGxheSgpIHtcbiAgICBpZiAoIXJhZiAmJiAoIWlzRG9jdW1lbnRIaWRkZW4oKSB8fCAhYW5pbWUuc3VzcGVuZFdoZW5Eb2N1bWVudEhpZGRlbikgJiYgYWN0aXZlSW5zdGFuY2VzLmxlbmd0aCA+IDApIHtcbiAgICAgIHJhZiA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShzdGVwKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gc3RlcCh0KSB7XG4gICAgLy8gbWVtbyBvbiBhbGdvcml0aG0gaXNzdWU6XG4gICAgLy8gZGFuZ2Vyb3VzIGl0ZXJhdGlvbiBvdmVyIG11dGFibGUgYGFjdGl2ZUluc3RhbmNlc2BcbiAgICAvLyAodGhhdCBjb2xsZWN0aW9uIG1heSBiZSB1cGRhdGVkIGZyb20gd2l0aGluIGNhbGxiYWNrcyBvZiBgdGlja2AtZWQgYW5pbWF0aW9uIGluc3RhbmNlcylcbiAgICB2YXIgYWN0aXZlSW5zdGFuY2VzTGVuZ3RoID0gYWN0aXZlSW5zdGFuY2VzLmxlbmd0aDtcbiAgICB2YXIgaSA9IDA7XG4gICAgd2hpbGUgKGkgPCBhY3RpdmVJbnN0YW5jZXNMZW5ndGgpIHtcbiAgICAgIHZhciBhY3RpdmVJbnN0YW5jZSA9IGFjdGl2ZUluc3RhbmNlc1tpXTtcbiAgICAgIGlmICghYWN0aXZlSW5zdGFuY2UucGF1c2VkKSB7XG4gICAgICAgIGFjdGl2ZUluc3RhbmNlLnRpY2sodCk7XG4gICAgICAgIGkrKztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFjdGl2ZUluc3RhbmNlcy5zcGxpY2UoaSwgMSk7XG4gICAgICAgIGFjdGl2ZUluc3RhbmNlc0xlbmd0aC0tO1xuICAgICAgfVxuICAgIH1cbiAgICByYWYgPSBpID4gMCA/IHJlcXVlc3RBbmltYXRpb25GcmFtZShzdGVwKSA6IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZVZpc2liaWxpdHlDaGFuZ2UoKSB7XG4gICAgaWYgKCFhbmltZS5zdXNwZW5kV2hlbkRvY3VtZW50SGlkZGVuKSB7IHJldHVybjsgfVxuXG4gICAgaWYgKGlzRG9jdW1lbnRIaWRkZW4oKSkge1xuICAgICAgLy8gc3VzcGVuZCB0aWNrc1xuICAgICAgcmFmID0gY2FuY2VsQW5pbWF0aW9uRnJhbWUocmFmKTtcbiAgICB9IGVsc2UgeyAvLyBpcyBiYWNrIHRvIGFjdGl2ZSB0YWJcbiAgICAgIC8vIGZpcnN0IGFkanVzdCBhbmltYXRpb25zIHRvIGNvbnNpZGVyIHRoZSB0aW1lIHRoYXQgdGlja3Mgd2VyZSBzdXNwZW5kZWRcbiAgICAgIGFjdGl2ZUluc3RhbmNlcy5mb3JFYWNoKFxuICAgICAgICBmdW5jdGlvbiAoaW5zdGFuY2UpIHsgcmV0dXJuIGluc3RhbmNlIC5fb25Eb2N1bWVudFZpc2liaWxpdHkoKTsgfVxuICAgICAgKTtcbiAgICAgIGVuZ2luZSgpO1xuICAgIH1cbiAgfVxuICBpZiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJykge1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3Zpc2liaWxpdHljaGFuZ2UnLCBoYW5kbGVWaXNpYmlsaXR5Q2hhbmdlKTtcbiAgfVxuXG4gIHJldHVybiBwbGF5O1xufSkoKTtcblxuZnVuY3Rpb24gaXNEb2N1bWVudEhpZGRlbigpIHtcbiAgcmV0dXJuICEhZG9jdW1lbnQgJiYgZG9jdW1lbnQuaGlkZGVuO1xufVxuXG4vLyBQdWJsaWMgSW5zdGFuY2VcblxuZnVuY3Rpb24gYW5pbWUocGFyYW1zKSB7XG4gIGlmICggcGFyYW1zID09PSB2b2lkIDAgKSBwYXJhbXMgPSB7fTtcblxuXG4gIHZhciBzdGFydFRpbWUgPSAwLCBsYXN0VGltZSA9IDAsIG5vdyA9IDA7XG4gIHZhciBjaGlsZHJlbiwgY2hpbGRyZW5MZW5ndGggPSAwO1xuICB2YXIgcmVzb2x2ZSA9IG51bGw7XG5cbiAgZnVuY3Rpb24gbWFrZVByb21pc2UoaW5zdGFuY2UpIHtcbiAgICB2YXIgcHJvbWlzZSA9IHdpbmRvdy5Qcm9taXNlICYmIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChfcmVzb2x2ZSkgeyByZXR1cm4gcmVzb2x2ZSA9IF9yZXNvbHZlOyB9KTtcbiAgICBpbnN0YW5jZS5maW5pc2hlZCA9IHByb21pc2U7XG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cblxuICB2YXIgaW5zdGFuY2UgPSBjcmVhdGVOZXdJbnN0YW5jZShwYXJhbXMpO1xuICB2YXIgcHJvbWlzZSA9IG1ha2VQcm9taXNlKGluc3RhbmNlKTtcblxuICBmdW5jdGlvbiB0b2dnbGVJbnN0YW5jZURpcmVjdGlvbigpIHtcbiAgICB2YXIgZGlyZWN0aW9uID0gaW5zdGFuY2UuZGlyZWN0aW9uO1xuICAgIGlmIChkaXJlY3Rpb24gIT09ICdhbHRlcm5hdGUnKSB7XG4gICAgICBpbnN0YW5jZS5kaXJlY3Rpb24gPSBkaXJlY3Rpb24gIT09ICdub3JtYWwnID8gJ25vcm1hbCcgOiAncmV2ZXJzZSc7XG4gICAgfVxuICAgIGluc3RhbmNlLnJldmVyc2VkID0gIWluc3RhbmNlLnJldmVyc2VkO1xuICAgIGNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7IHJldHVybiBjaGlsZC5yZXZlcnNlZCA9IGluc3RhbmNlLnJldmVyc2VkOyB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFkanVzdFRpbWUodGltZSkge1xuICAgIHJldHVybiBpbnN0YW5jZS5yZXZlcnNlZCA/IGluc3RhbmNlLmR1cmF0aW9uIC0gdGltZSA6IHRpbWU7XG4gIH1cblxuICBmdW5jdGlvbiByZXNldFRpbWUoKSB7XG4gICAgc3RhcnRUaW1lID0gMDtcbiAgICBsYXN0VGltZSA9IGFkanVzdFRpbWUoaW5zdGFuY2UuY3VycmVudFRpbWUpICogKDEgLyBhbmltZS5zcGVlZCk7XG4gIH1cblxuICBmdW5jdGlvbiBzZWVrQ2hpbGQodGltZSwgY2hpbGQpIHtcbiAgICBpZiAoY2hpbGQpIHsgY2hpbGQuc2Vlayh0aW1lIC0gY2hpbGQudGltZWxpbmVPZmZzZXQpOyB9XG4gIH1cblxuICBmdW5jdGlvbiBzeW5jSW5zdGFuY2VDaGlsZHJlbih0aW1lKSB7XG4gICAgaWYgKCFpbnN0YW5jZS5yZXZlcnNlUGxheWJhY2spIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW5MZW5ndGg7IGkrKykgeyBzZWVrQ2hpbGQodGltZSwgY2hpbGRyZW5baV0pOyB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAodmFyIGkkMSA9IGNoaWxkcmVuTGVuZ3RoOyBpJDEtLTspIHsgc2Vla0NoaWxkKHRpbWUsIGNoaWxkcmVuW2kkMV0pOyB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2V0QW5pbWF0aW9uc1Byb2dyZXNzKGluc1RpbWUpIHtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGFuaW1hdGlvbnMgPSBpbnN0YW5jZS5hbmltYXRpb25zO1xuICAgIHZhciBhbmltYXRpb25zTGVuZ3RoID0gYW5pbWF0aW9ucy5sZW5ndGg7XG4gICAgd2hpbGUgKGkgPCBhbmltYXRpb25zTGVuZ3RoKSB7XG4gICAgICB2YXIgYW5pbSA9IGFuaW1hdGlvbnNbaV07XG4gICAgICB2YXIgYW5pbWF0YWJsZSA9IGFuaW0uYW5pbWF0YWJsZTtcbiAgICAgIHZhciB0d2VlbnMgPSBhbmltLnR3ZWVucztcbiAgICAgIHZhciB0d2Vlbkxlbmd0aCA9IHR3ZWVucy5sZW5ndGggLSAxO1xuICAgICAgdmFyIHR3ZWVuID0gdHdlZW5zW3R3ZWVuTGVuZ3RoXTtcbiAgICAgIC8vIE9ubHkgY2hlY2sgZm9yIGtleWZyYW1lcyBpZiB0aGVyZSBpcyBtb3JlIHRoYW4gb25lIHR3ZWVuXG4gICAgICBpZiAodHdlZW5MZW5ndGgpIHsgdHdlZW4gPSBmaWx0ZXJBcnJheSh0d2VlbnMsIGZ1bmN0aW9uICh0KSB7IHJldHVybiAoaW5zVGltZSA8IHQuZW5kKTsgfSlbMF0gfHwgdHdlZW47IH1cbiAgICAgIHZhciBlbGFwc2VkID0gbWluTWF4KGluc1RpbWUgLSB0d2Vlbi5zdGFydCAtIHR3ZWVuLmRlbGF5LCAwLCB0d2Vlbi5kdXJhdGlvbikgLyB0d2Vlbi5kdXJhdGlvbjtcbiAgICAgIHZhciBlYXNlZCA9IGlzTmFOKGVsYXBzZWQpID8gMSA6IHR3ZWVuLmVhc2luZyhlbGFwc2VkKTtcbiAgICAgIHZhciBzdHJpbmdzID0gdHdlZW4udG8uc3RyaW5ncztcbiAgICAgIHZhciByb3VuZCA9IHR3ZWVuLnJvdW5kO1xuICAgICAgdmFyIG51bWJlcnMgPSBbXTtcbiAgICAgIHZhciB0b051bWJlcnNMZW5ndGggPSB0d2Vlbi50by5udW1iZXJzLmxlbmd0aDtcbiAgICAgIHZhciBwcm9ncmVzcyA9ICh2b2lkIDApO1xuICAgICAgZm9yICh2YXIgbiA9IDA7IG4gPCB0b051bWJlcnNMZW5ndGg7IG4rKykge1xuICAgICAgICB2YXIgdmFsdWUgPSAodm9pZCAwKTtcbiAgICAgICAgdmFyIHRvTnVtYmVyID0gdHdlZW4udG8ubnVtYmVyc1tuXTtcbiAgICAgICAgdmFyIGZyb21OdW1iZXIgPSB0d2Vlbi5mcm9tLm51bWJlcnNbbl0gfHwgMDtcbiAgICAgICAgaWYgKCF0d2Vlbi5pc1BhdGgpIHtcbiAgICAgICAgICB2YWx1ZSA9IGZyb21OdW1iZXIgKyAoZWFzZWQgKiAodG9OdW1iZXIgLSBmcm9tTnVtYmVyKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFsdWUgPSBnZXRQYXRoUHJvZ3Jlc3ModHdlZW4udmFsdWUsIGVhc2VkICogdG9OdW1iZXIsIHR3ZWVuLmlzUGF0aFRhcmdldEluc2lkZVNWRyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJvdW5kKSB7XG4gICAgICAgICAgaWYgKCEodHdlZW4uaXNDb2xvciAmJiBuID4gMikpIHtcbiAgICAgICAgICAgIHZhbHVlID0gTWF0aC5yb3VuZCh2YWx1ZSAqIHJvdW5kKSAvIHJvdW5kO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBudW1iZXJzLnB1c2godmFsdWUpO1xuICAgICAgfVxuICAgICAgLy8gTWFudWFsIEFycmF5LnJlZHVjZSBmb3IgYmV0dGVyIHBlcmZvcm1hbmNlc1xuICAgICAgdmFyIHN0cmluZ3NMZW5ndGggPSBzdHJpbmdzLmxlbmd0aDtcbiAgICAgIGlmICghc3RyaW5nc0xlbmd0aCkge1xuICAgICAgICBwcm9ncmVzcyA9IG51bWJlcnNbMF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9ncmVzcyA9IHN0cmluZ3NbMF07XG4gICAgICAgIGZvciAodmFyIHMgPSAwOyBzIDwgc3RyaW5nc0xlbmd0aDsgcysrKSB7XG4gICAgICAgICAgdmFyIGEgPSBzdHJpbmdzW3NdO1xuICAgICAgICAgIHZhciBiID0gc3RyaW5nc1tzICsgMV07XG4gICAgICAgICAgdmFyIG4kMSA9IG51bWJlcnNbc107XG4gICAgICAgICAgaWYgKCFpc05hTihuJDEpKSB7XG4gICAgICAgICAgICBpZiAoIWIpIHtcbiAgICAgICAgICAgICAgcHJvZ3Jlc3MgKz0gbiQxICsgJyAnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcHJvZ3Jlc3MgKz0gbiQxICsgYjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHNldFByb2dyZXNzVmFsdWVbYW5pbS50eXBlXShhbmltYXRhYmxlLnRhcmdldCwgYW5pbS5wcm9wZXJ0eSwgcHJvZ3Jlc3MsIGFuaW1hdGFibGUudHJhbnNmb3Jtcyk7XG4gICAgICBhbmltLmN1cnJlbnRWYWx1ZSA9IHByb2dyZXNzO1xuICAgICAgaSsrO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNldENhbGxiYWNrKGNiKSB7XG4gICAgaWYgKGluc3RhbmNlW2NiXSAmJiAhaW5zdGFuY2UucGFzc1Rocm91Z2gpIHsgaW5zdGFuY2VbY2JdKGluc3RhbmNlKTsgfVxuICB9XG5cbiAgZnVuY3Rpb24gY291bnRJdGVyYXRpb24oKSB7XG4gICAgaWYgKGluc3RhbmNlLnJlbWFpbmluZyAmJiBpbnN0YW5jZS5yZW1haW5pbmcgIT09IHRydWUpIHtcbiAgICAgIGluc3RhbmNlLnJlbWFpbmluZy0tO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNldEluc3RhbmNlUHJvZ3Jlc3MoZW5naW5lVGltZSkge1xuICAgIHZhciBpbnNEdXJhdGlvbiA9IGluc3RhbmNlLmR1cmF0aW9uO1xuICAgIHZhciBpbnNEZWxheSA9IGluc3RhbmNlLmRlbGF5O1xuICAgIHZhciBpbnNFbmREZWxheSA9IGluc0R1cmF0aW9uIC0gaW5zdGFuY2UuZW5kRGVsYXk7XG4gICAgdmFyIGluc1RpbWUgPSBhZGp1c3RUaW1lKGVuZ2luZVRpbWUpO1xuICAgIGluc3RhbmNlLnByb2dyZXNzID0gbWluTWF4KChpbnNUaW1lIC8gaW5zRHVyYXRpb24pICogMTAwLCAwLCAxMDApO1xuICAgIGluc3RhbmNlLnJldmVyc2VQbGF5YmFjayA9IGluc1RpbWUgPCBpbnN0YW5jZS5jdXJyZW50VGltZTtcbiAgICBpZiAoY2hpbGRyZW4pIHsgc3luY0luc3RhbmNlQ2hpbGRyZW4oaW5zVGltZSk7IH1cbiAgICBpZiAoIWluc3RhbmNlLmJlZ2FuICYmIGluc3RhbmNlLmN1cnJlbnRUaW1lID4gMCkge1xuICAgICAgaW5zdGFuY2UuYmVnYW4gPSB0cnVlO1xuICAgICAgc2V0Q2FsbGJhY2soJ2JlZ2luJyk7XG4gICAgfVxuICAgIGlmICghaW5zdGFuY2UubG9vcEJlZ2FuICYmIGluc3RhbmNlLmN1cnJlbnRUaW1lID4gMCkge1xuICAgICAgaW5zdGFuY2UubG9vcEJlZ2FuID0gdHJ1ZTtcbiAgICAgIHNldENhbGxiYWNrKCdsb29wQmVnaW4nKTtcbiAgICB9XG4gICAgaWYgKGluc1RpbWUgPD0gaW5zRGVsYXkgJiYgaW5zdGFuY2UuY3VycmVudFRpbWUgIT09IDApIHtcbiAgICAgIHNldEFuaW1hdGlvbnNQcm9ncmVzcygwKTtcbiAgICB9XG4gICAgaWYgKChpbnNUaW1lID49IGluc0VuZERlbGF5ICYmIGluc3RhbmNlLmN1cnJlbnRUaW1lICE9PSBpbnNEdXJhdGlvbikgfHwgIWluc0R1cmF0aW9uKSB7XG4gICAgICBzZXRBbmltYXRpb25zUHJvZ3Jlc3MoaW5zRHVyYXRpb24pO1xuICAgIH1cbiAgICBpZiAoaW5zVGltZSA+IGluc0RlbGF5ICYmIGluc1RpbWUgPCBpbnNFbmREZWxheSkge1xuICAgICAgaWYgKCFpbnN0YW5jZS5jaGFuZ2VCZWdhbikge1xuICAgICAgICBpbnN0YW5jZS5jaGFuZ2VCZWdhbiA9IHRydWU7XG4gICAgICAgIGluc3RhbmNlLmNoYW5nZUNvbXBsZXRlZCA9IGZhbHNlO1xuICAgICAgICBzZXRDYWxsYmFjaygnY2hhbmdlQmVnaW4nKTtcbiAgICAgIH1cbiAgICAgIHNldENhbGxiYWNrKCdjaGFuZ2UnKTtcbiAgICAgIHNldEFuaW1hdGlvbnNQcm9ncmVzcyhpbnNUaW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGluc3RhbmNlLmNoYW5nZUJlZ2FuKSB7XG4gICAgICAgIGluc3RhbmNlLmNoYW5nZUNvbXBsZXRlZCA9IHRydWU7XG4gICAgICAgIGluc3RhbmNlLmNoYW5nZUJlZ2FuID0gZmFsc2U7XG4gICAgICAgIHNldENhbGxiYWNrKCdjaGFuZ2VDb21wbGV0ZScpO1xuICAgICAgfVxuICAgIH1cbiAgICBpbnN0YW5jZS5jdXJyZW50VGltZSA9IG1pbk1heChpbnNUaW1lLCAwLCBpbnNEdXJhdGlvbik7XG4gICAgaWYgKGluc3RhbmNlLmJlZ2FuKSB7IHNldENhbGxiYWNrKCd1cGRhdGUnKTsgfVxuICAgIGlmIChlbmdpbmVUaW1lID49IGluc0R1cmF0aW9uKSB7XG4gICAgICBsYXN0VGltZSA9IDA7XG4gICAgICBjb3VudEl0ZXJhdGlvbigpO1xuICAgICAgaWYgKCFpbnN0YW5jZS5yZW1haW5pbmcpIHtcbiAgICAgICAgaW5zdGFuY2UucGF1c2VkID0gdHJ1ZTtcbiAgICAgICAgaWYgKCFpbnN0YW5jZS5jb21wbGV0ZWQpIHtcbiAgICAgICAgICBpbnN0YW5jZS5jb21wbGV0ZWQgPSB0cnVlO1xuICAgICAgICAgIHNldENhbGxiYWNrKCdsb29wQ29tcGxldGUnKTtcbiAgICAgICAgICBzZXRDYWxsYmFjaygnY29tcGxldGUnKTtcbiAgICAgICAgICBpZiAoIWluc3RhbmNlLnBhc3NUaHJvdWdoICYmICdQcm9taXNlJyBpbiB3aW5kb3cpIHtcbiAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgIHByb21pc2UgPSBtYWtlUHJvbWlzZShpbnN0YW5jZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGFydFRpbWUgPSBub3c7XG4gICAgICAgIHNldENhbGxiYWNrKCdsb29wQ29tcGxldGUnKTtcbiAgICAgICAgaW5zdGFuY2UubG9vcEJlZ2FuID0gZmFsc2U7XG4gICAgICAgIGlmIChpbnN0YW5jZS5kaXJlY3Rpb24gPT09ICdhbHRlcm5hdGUnKSB7XG4gICAgICAgICAgdG9nZ2xlSW5zdGFuY2VEaXJlY3Rpb24oKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGluc3RhbmNlLnJlc2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGRpcmVjdGlvbiA9IGluc3RhbmNlLmRpcmVjdGlvbjtcbiAgICBpbnN0YW5jZS5wYXNzVGhyb3VnaCA9IGZhbHNlO1xuICAgIGluc3RhbmNlLmN1cnJlbnRUaW1lID0gMDtcbiAgICBpbnN0YW5jZS5wcm9ncmVzcyA9IDA7XG4gICAgaW5zdGFuY2UucGF1c2VkID0gdHJ1ZTtcbiAgICBpbnN0YW5jZS5iZWdhbiA9IGZhbHNlO1xuICAgIGluc3RhbmNlLmxvb3BCZWdhbiA9IGZhbHNlO1xuICAgIGluc3RhbmNlLmNoYW5nZUJlZ2FuID0gZmFsc2U7XG4gICAgaW5zdGFuY2UuY29tcGxldGVkID0gZmFsc2U7XG4gICAgaW5zdGFuY2UuY2hhbmdlQ29tcGxldGVkID0gZmFsc2U7XG4gICAgaW5zdGFuY2UucmV2ZXJzZVBsYXliYWNrID0gZmFsc2U7XG4gICAgaW5zdGFuY2UucmV2ZXJzZWQgPSBkaXJlY3Rpb24gPT09ICdyZXZlcnNlJztcbiAgICBpbnN0YW5jZS5yZW1haW5pbmcgPSBpbnN0YW5jZS5sb29wO1xuICAgIGNoaWxkcmVuID0gaW5zdGFuY2UuY2hpbGRyZW47XG4gICAgY2hpbGRyZW5MZW5ndGggPSBjaGlsZHJlbi5sZW5ndGg7XG4gICAgZm9yICh2YXIgaSA9IGNoaWxkcmVuTGVuZ3RoOyBpLS07KSB7IGluc3RhbmNlLmNoaWxkcmVuW2ldLnJlc2V0KCk7IH1cbiAgICBpZiAoaW5zdGFuY2UucmV2ZXJzZWQgJiYgaW5zdGFuY2UubG9vcCAhPT0gdHJ1ZSB8fCAoZGlyZWN0aW9uID09PSAnYWx0ZXJuYXRlJyAmJiBpbnN0YW5jZS5sb29wID09PSAxKSkgeyBpbnN0YW5jZS5yZW1haW5pbmcrKzsgfVxuICAgIHNldEFuaW1hdGlvbnNQcm9ncmVzcyhpbnN0YW5jZS5yZXZlcnNlZCA/IGluc3RhbmNlLmR1cmF0aW9uIDogMCk7XG4gIH07XG5cbiAgLy8gaW50ZXJuYWwgbWV0aG9kIChmb3IgZW5naW5lKSB0byBhZGp1c3QgYW5pbWF0aW9uIHRpbWluZ3MgYmVmb3JlIHJlc3RvcmluZyBlbmdpbmUgdGlja3MgKHJBRilcbiAgaW5zdGFuY2UuX29uRG9jdW1lbnRWaXNpYmlsaXR5ID0gcmVzZXRUaW1lO1xuXG4gIC8vIFNldCBWYWx1ZSBoZWxwZXJcblxuICBpbnN0YW5jZS5zZXQgPSBmdW5jdGlvbih0YXJnZXRzLCBwcm9wZXJ0aWVzKSB7XG4gICAgc2V0VGFyZ2V0c1ZhbHVlKHRhcmdldHMsIHByb3BlcnRpZXMpO1xuICAgIHJldHVybiBpbnN0YW5jZTtcbiAgfTtcblxuICBpbnN0YW5jZS50aWNrID0gZnVuY3Rpb24odCkge1xuICAgIG5vdyA9IHQ7XG4gICAgaWYgKCFzdGFydFRpbWUpIHsgc3RhcnRUaW1lID0gbm93OyB9XG4gICAgc2V0SW5zdGFuY2VQcm9ncmVzcygobm93ICsgKGxhc3RUaW1lIC0gc3RhcnRUaW1lKSkgKiBhbmltZS5zcGVlZCk7XG4gIH07XG5cbiAgaW5zdGFuY2Uuc2VlayA9IGZ1bmN0aW9uKHRpbWUpIHtcbiAgICBzZXRJbnN0YW5jZVByb2dyZXNzKGFkanVzdFRpbWUodGltZSkpO1xuICB9O1xuXG4gIGluc3RhbmNlLnBhdXNlID0gZnVuY3Rpb24oKSB7XG4gICAgaW5zdGFuY2UucGF1c2VkID0gdHJ1ZTtcbiAgICByZXNldFRpbWUoKTtcbiAgfTtcblxuICBpbnN0YW5jZS5wbGF5ID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKCFpbnN0YW5jZS5wYXVzZWQpIHsgcmV0dXJuOyB9XG4gICAgaWYgKGluc3RhbmNlLmNvbXBsZXRlZCkgeyBpbnN0YW5jZS5yZXNldCgpOyB9XG4gICAgaW5zdGFuY2UucGF1c2VkID0gZmFsc2U7XG4gICAgYWN0aXZlSW5zdGFuY2VzLnB1c2goaW5zdGFuY2UpO1xuICAgIHJlc2V0VGltZSgpO1xuICAgIGVuZ2luZSgpO1xuICB9O1xuXG4gIGluc3RhbmNlLnJldmVyc2UgPSBmdW5jdGlvbigpIHtcbiAgICB0b2dnbGVJbnN0YW5jZURpcmVjdGlvbigpO1xuICAgIGluc3RhbmNlLmNvbXBsZXRlZCA9IGluc3RhbmNlLnJldmVyc2VkID8gZmFsc2UgOiB0cnVlO1xuICAgIHJlc2V0VGltZSgpO1xuICB9O1xuXG4gIGluc3RhbmNlLnJlc3RhcnQgPSBmdW5jdGlvbigpIHtcbiAgICBpbnN0YW5jZS5yZXNldCgpO1xuICAgIGluc3RhbmNlLnBsYXkoKTtcbiAgfTtcblxuICBpbnN0YW5jZS5yZW1vdmUgPSBmdW5jdGlvbih0YXJnZXRzKSB7XG4gICAgdmFyIHRhcmdldHNBcnJheSA9IHBhcnNlVGFyZ2V0cyh0YXJnZXRzKTtcbiAgICByZW1vdmVUYXJnZXRzRnJvbUluc3RhbmNlKHRhcmdldHNBcnJheSwgaW5zdGFuY2UpO1xuICB9O1xuXG4gIGluc3RhbmNlLnJlc2V0KCk7XG5cbiAgaWYgKGluc3RhbmNlLmF1dG9wbGF5KSB7IGluc3RhbmNlLnBsYXkoKTsgfVxuXG4gIHJldHVybiBpbnN0YW5jZTtcblxufVxuXG4vLyBSZW1vdmUgdGFyZ2V0cyBmcm9tIGFuaW1hdGlvblxuXG5mdW5jdGlvbiByZW1vdmVUYXJnZXRzRnJvbUFuaW1hdGlvbnModGFyZ2V0c0FycmF5LCBhbmltYXRpb25zKSB7XG4gIGZvciAodmFyIGEgPSBhbmltYXRpb25zLmxlbmd0aDsgYS0tOykge1xuICAgIGlmIChhcnJheUNvbnRhaW5zKHRhcmdldHNBcnJheSwgYW5pbWF0aW9uc1thXS5hbmltYXRhYmxlLnRhcmdldCkpIHtcbiAgICAgIGFuaW1hdGlvbnMuc3BsaWNlKGEsIDEpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiByZW1vdmVUYXJnZXRzRnJvbUluc3RhbmNlKHRhcmdldHNBcnJheSwgaW5zdGFuY2UpIHtcbiAgdmFyIGFuaW1hdGlvbnMgPSBpbnN0YW5jZS5hbmltYXRpb25zO1xuICB2YXIgY2hpbGRyZW4gPSBpbnN0YW5jZS5jaGlsZHJlbjtcbiAgcmVtb3ZlVGFyZ2V0c0Zyb21BbmltYXRpb25zKHRhcmdldHNBcnJheSwgYW5pbWF0aW9ucyk7XG4gIGZvciAodmFyIGMgPSBjaGlsZHJlbi5sZW5ndGg7IGMtLTspIHtcbiAgICB2YXIgY2hpbGQgPSBjaGlsZHJlbltjXTtcbiAgICB2YXIgY2hpbGRBbmltYXRpb25zID0gY2hpbGQuYW5pbWF0aW9ucztcbiAgICByZW1vdmVUYXJnZXRzRnJvbUFuaW1hdGlvbnModGFyZ2V0c0FycmF5LCBjaGlsZEFuaW1hdGlvbnMpO1xuICAgIGlmICghY2hpbGRBbmltYXRpb25zLmxlbmd0aCAmJiAhY2hpbGQuY2hpbGRyZW4ubGVuZ3RoKSB7IGNoaWxkcmVuLnNwbGljZShjLCAxKTsgfVxuICB9XG4gIGlmICghYW5pbWF0aW9ucy5sZW5ndGggJiYgIWNoaWxkcmVuLmxlbmd0aCkgeyBpbnN0YW5jZS5wYXVzZSgpOyB9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVRhcmdldHNGcm9tQWN0aXZlSW5zdGFuY2VzKHRhcmdldHMpIHtcbiAgdmFyIHRhcmdldHNBcnJheSA9IHBhcnNlVGFyZ2V0cyh0YXJnZXRzKTtcbiAgZm9yICh2YXIgaSA9IGFjdGl2ZUluc3RhbmNlcy5sZW5ndGg7IGktLTspIHtcbiAgICB2YXIgaW5zdGFuY2UgPSBhY3RpdmVJbnN0YW5jZXNbaV07XG4gICAgcmVtb3ZlVGFyZ2V0c0Zyb21JbnN0YW5jZSh0YXJnZXRzQXJyYXksIGluc3RhbmNlKTtcbiAgfVxufVxuXG4vLyBTdGFnZ2VyIGhlbHBlcnNcblxuZnVuY3Rpb24gc3RhZ2dlcih2YWwsIHBhcmFtcykge1xuICBpZiAoIHBhcmFtcyA9PT0gdm9pZCAwICkgcGFyYW1zID0ge307XG5cbiAgdmFyIGRpcmVjdGlvbiA9IHBhcmFtcy5kaXJlY3Rpb24gfHwgJ25vcm1hbCc7XG4gIHZhciBlYXNpbmcgPSBwYXJhbXMuZWFzaW5nID8gcGFyc2VFYXNpbmdzKHBhcmFtcy5lYXNpbmcpIDogbnVsbDtcbiAgdmFyIGdyaWQgPSBwYXJhbXMuZ3JpZDtcbiAgdmFyIGF4aXMgPSBwYXJhbXMuYXhpcztcbiAgdmFyIGZyb21JbmRleCA9IHBhcmFtcy5mcm9tIHx8IDA7XG4gIHZhciBmcm9tRmlyc3QgPSBmcm9tSW5kZXggPT09ICdmaXJzdCc7XG4gIHZhciBmcm9tQ2VudGVyID0gZnJvbUluZGV4ID09PSAnY2VudGVyJztcbiAgdmFyIGZyb21MYXN0ID0gZnJvbUluZGV4ID09PSAnbGFzdCc7XG4gIHZhciBpc1JhbmdlID0gaXMuYXJyKHZhbCk7XG4gIHZhciB2YWwxID0gaXNSYW5nZSA/IHBhcnNlRmxvYXQodmFsWzBdKSA6IHBhcnNlRmxvYXQodmFsKTtcbiAgdmFyIHZhbDIgPSBpc1JhbmdlID8gcGFyc2VGbG9hdCh2YWxbMV0pIDogMDtcbiAgdmFyIHVuaXQgPSBnZXRVbml0KGlzUmFuZ2UgPyB2YWxbMV0gOiB2YWwpIHx8IDA7XG4gIHZhciBzdGFydCA9IHBhcmFtcy5zdGFydCB8fCAwICsgKGlzUmFuZ2UgPyB2YWwxIDogMCk7XG4gIHZhciB2YWx1ZXMgPSBbXTtcbiAgdmFyIG1heFZhbHVlID0gMDtcbiAgcmV0dXJuIGZ1bmN0aW9uIChlbCwgaSwgdCkge1xuICAgIGlmIChmcm9tRmlyc3QpIHsgZnJvbUluZGV4ID0gMDsgfVxuICAgIGlmIChmcm9tQ2VudGVyKSB7IGZyb21JbmRleCA9ICh0IC0gMSkgLyAyOyB9XG4gICAgaWYgKGZyb21MYXN0KSB7IGZyb21JbmRleCA9IHQgLSAxOyB9XG4gICAgaWYgKCF2YWx1ZXMubGVuZ3RoKSB7XG4gICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgdDsgaW5kZXgrKykge1xuICAgICAgICBpZiAoIWdyaWQpIHtcbiAgICAgICAgICB2YWx1ZXMucHVzaChNYXRoLmFicyhmcm9tSW5kZXggLSBpbmRleCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBmcm9tWCA9ICFmcm9tQ2VudGVyID8gZnJvbUluZGV4JWdyaWRbMF0gOiAoZ3JpZFswXS0xKS8yO1xuICAgICAgICAgIHZhciBmcm9tWSA9ICFmcm9tQ2VudGVyID8gTWF0aC5mbG9vcihmcm9tSW5kZXgvZ3JpZFswXSkgOiAoZ3JpZFsxXS0xKS8yO1xuICAgICAgICAgIHZhciB0b1ggPSBpbmRleCVncmlkWzBdO1xuICAgICAgICAgIHZhciB0b1kgPSBNYXRoLmZsb29yKGluZGV4L2dyaWRbMF0pO1xuICAgICAgICAgIHZhciBkaXN0YW5jZVggPSBmcm9tWCAtIHRvWDtcbiAgICAgICAgICB2YXIgZGlzdGFuY2VZID0gZnJvbVkgLSB0b1k7XG4gICAgICAgICAgdmFyIHZhbHVlID0gTWF0aC5zcXJ0KGRpc3RhbmNlWCAqIGRpc3RhbmNlWCArIGRpc3RhbmNlWSAqIGRpc3RhbmNlWSk7XG4gICAgICAgICAgaWYgKGF4aXMgPT09ICd4JykgeyB2YWx1ZSA9IC1kaXN0YW5jZVg7IH1cbiAgICAgICAgICBpZiAoYXhpcyA9PT0gJ3knKSB7IHZhbHVlID0gLWRpc3RhbmNlWTsgfVxuICAgICAgICAgIHZhbHVlcy5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBtYXhWYWx1ZSA9IE1hdGgubWF4LmFwcGx5KE1hdGgsIHZhbHVlcyk7XG4gICAgICB9XG4gICAgICBpZiAoZWFzaW5nKSB7IHZhbHVlcyA9IHZhbHVlcy5tYXAoZnVuY3Rpb24gKHZhbCkgeyByZXR1cm4gZWFzaW5nKHZhbCAvIG1heFZhbHVlKSAqIG1heFZhbHVlOyB9KTsgfVxuICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gJ3JldmVyc2UnKSB7IHZhbHVlcyA9IHZhbHVlcy5tYXAoZnVuY3Rpb24gKHZhbCkgeyByZXR1cm4gYXhpcyA/ICh2YWwgPCAwKSA/IHZhbCAqIC0xIDogLXZhbCA6IE1hdGguYWJzKG1heFZhbHVlIC0gdmFsKTsgfSk7IH1cbiAgICB9XG4gICAgdmFyIHNwYWNpbmcgPSBpc1JhbmdlID8gKHZhbDIgLSB2YWwxKSAvIG1heFZhbHVlIDogdmFsMTtcbiAgICByZXR1cm4gc3RhcnQgKyAoc3BhY2luZyAqIChNYXRoLnJvdW5kKHZhbHVlc1tpXSAqIDEwMCkgLyAxMDApKSArIHVuaXQ7XG4gIH1cbn1cblxuLy8gVGltZWxpbmVcblxuZnVuY3Rpb24gdGltZWxpbmUocGFyYW1zKSB7XG4gIGlmICggcGFyYW1zID09PSB2b2lkIDAgKSBwYXJhbXMgPSB7fTtcblxuICB2YXIgdGwgPSBhbmltZShwYXJhbXMpO1xuICB0bC5kdXJhdGlvbiA9IDA7XG4gIHRsLmFkZCA9IGZ1bmN0aW9uKGluc3RhbmNlUGFyYW1zLCB0aW1lbGluZU9mZnNldCkge1xuICAgIHZhciB0bEluZGV4ID0gYWN0aXZlSW5zdGFuY2VzLmluZGV4T2YodGwpO1xuICAgIHZhciBjaGlsZHJlbiA9IHRsLmNoaWxkcmVuO1xuICAgIGlmICh0bEluZGV4ID4gLTEpIHsgYWN0aXZlSW5zdGFuY2VzLnNwbGljZSh0bEluZGV4LCAxKTsgfVxuICAgIGZ1bmN0aW9uIHBhc3NUaHJvdWdoKGlucykgeyBpbnMucGFzc1Rocm91Z2ggPSB0cnVlOyB9XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykgeyBwYXNzVGhyb3VnaChjaGlsZHJlbltpXSk7IH1cbiAgICB2YXIgaW5zUGFyYW1zID0gbWVyZ2VPYmplY3RzKGluc3RhbmNlUGFyYW1zLCByZXBsYWNlT2JqZWN0UHJvcHMoZGVmYXVsdFR3ZWVuU2V0dGluZ3MsIHBhcmFtcykpO1xuICAgIGluc1BhcmFtcy50YXJnZXRzID0gaW5zUGFyYW1zLnRhcmdldHMgfHwgcGFyYW1zLnRhcmdldHM7XG4gICAgdmFyIHRsRHVyYXRpb24gPSB0bC5kdXJhdGlvbjtcbiAgICBpbnNQYXJhbXMuYXV0b3BsYXkgPSBmYWxzZTtcbiAgICBpbnNQYXJhbXMuZGlyZWN0aW9uID0gdGwuZGlyZWN0aW9uO1xuICAgIGluc1BhcmFtcy50aW1lbGluZU9mZnNldCA9IGlzLnVuZCh0aW1lbGluZU9mZnNldCkgPyB0bER1cmF0aW9uIDogZ2V0UmVsYXRpdmVWYWx1ZSh0aW1lbGluZU9mZnNldCwgdGxEdXJhdGlvbik7XG4gICAgcGFzc1Rocm91Z2godGwpO1xuICAgIHRsLnNlZWsoaW5zUGFyYW1zLnRpbWVsaW5lT2Zmc2V0KTtcbiAgICB2YXIgaW5zID0gYW5pbWUoaW5zUGFyYW1zKTtcbiAgICBwYXNzVGhyb3VnaChpbnMpO1xuICAgIGNoaWxkcmVuLnB1c2goaW5zKTtcbiAgICB2YXIgdGltaW5ncyA9IGdldEluc3RhbmNlVGltaW5ncyhjaGlsZHJlbiwgcGFyYW1zKTtcbiAgICB0bC5kZWxheSA9IHRpbWluZ3MuZGVsYXk7XG4gICAgdGwuZW5kRGVsYXkgPSB0aW1pbmdzLmVuZERlbGF5O1xuICAgIHRsLmR1cmF0aW9uID0gdGltaW5ncy5kdXJhdGlvbjtcbiAgICB0bC5zZWVrKDApO1xuICAgIHRsLnJlc2V0KCk7XG4gICAgaWYgKHRsLmF1dG9wbGF5KSB7IHRsLnBsYXkoKTsgfVxuICAgIHJldHVybiB0bDtcbiAgfTtcbiAgcmV0dXJuIHRsO1xufVxuXG5hbmltZS52ZXJzaW9uID0gJzMuMi4xJztcbmFuaW1lLnNwZWVkID0gMTtcbi8vIFRPRE86I3JldmlldzogbmFtaW5nLCBkb2N1bWVudGF0aW9uXG5hbmltZS5zdXNwZW5kV2hlbkRvY3VtZW50SGlkZGVuID0gdHJ1ZTtcbmFuaW1lLnJ1bm5pbmcgPSBhY3RpdmVJbnN0YW5jZXM7XG5hbmltZS5yZW1vdmUgPSByZW1vdmVUYXJnZXRzRnJvbUFjdGl2ZUluc3RhbmNlcztcbmFuaW1lLmdldCA9IGdldE9yaWdpbmFsVGFyZ2V0VmFsdWU7XG5hbmltZS5zZXQgPSBzZXRUYXJnZXRzVmFsdWU7XG5hbmltZS5jb252ZXJ0UHggPSBjb252ZXJ0UHhUb1VuaXQ7XG5hbmltZS5wYXRoID0gZ2V0UGF0aDtcbmFuaW1lLnNldERhc2hvZmZzZXQgPSBzZXREYXNob2Zmc2V0O1xuYW5pbWUuc3RhZ2dlciA9IHN0YWdnZXI7XG5hbmltZS50aW1lbGluZSA9IHRpbWVsaW5lO1xuYW5pbWUuZWFzaW5nID0gcGFyc2VFYXNpbmdzO1xuYW5pbWUucGVubmVyID0gcGVubmVyO1xuYW5pbWUucmFuZG9tID0gZnVuY3Rpb24gKG1pbiwgbWF4KSB7IHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluICsgMSkpICsgbWluOyB9O1xuXG5leHBvcnQgZGVmYXVsdCBhbmltZTtcbiIsImltcG9ydCBhbmltZSBmcm9tICdhbmltZWpzL2xpYi9hbmltZS5lcy5qcyc7XHJcblxyXG4vLyBZb3VyIHdlYiBhcHAncyBGaXJlYmFzZSBjb25maWd1cmF0aW9uXHJcbnZhciBmaXJlYmFzZUNvbmZpZyA9IHtcclxuICAgIGFwaUtleTogXCJBSXphU3lEVFZ4REpqN3JxRzlMLUNsdmJhMlRhbzlCMGhrY3hqY0VcIixcclxuICAgIGF1dGhEb21haW46IFwibWlsY2hjaGFuLmZpcmViYXNlYXBwLmNvbVwiLFxyXG4gICAgZGF0YWJhc2VVUkw6IFwiaHR0cHM6Ly9taWxjaGNoYW4uZmlyZWJhc2Vpby5jb21cIixcclxuICAgIHByb2plY3RJZDogXCJtaWxjaGNoYW5cIixcclxuICAgIHN0b3JhZ2VCdWNrZXQ6IFwibWlsY2hjaGFuLmFwcHNwb3QuY29tXCIsXHJcbiAgICBtZXNzYWdpbmdTZW5kZXJJZDogXCIzNTU2OTg5NzE4ODlcIixcclxuICAgIGFwcElkOiBcIjE6MzU1Njk4OTcxODg5OndlYjplMzY1M2M1YzMxYmQ3Mjg5Y2Q0NTUwXCIsXHJcbiAgICBtZWFzdXJlbWVudElkOiBcIkctMzk5OEZKWU5XWFwiXHJcbn07XHJcbi8vIEluaXRpYWxpemUgRmlyZWJhc2VcclxuZmlyZWJhc2UuaW5pdGlhbGl6ZUFwcChmaXJlYmFzZUNvbmZpZyk7XHJcbmZpcmViYXNlLmFuYWx5dGljcygpO1xyXG5cclxuY29uc3QgZGF0YWJhc2VSb290ID0gXCJ3b25kZXJsYW5kXCI7XHJcbmxldCBkYXRhYmFzZSA9IGZpcmViYXNlLmRhdGFiYXNlKCk7XHJcbmxldCBzdG9yYWdlID0gZmlyZWJhc2Uuc3RvcmFnZSgpO1xyXG5cclxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCAoZXZlbnQpID0+IHtcclxuICAgIHZhciBhcHAgPSBWdWUuY3JlYXRlQXBwKHtcclxuICAgICAgICBkYXRhKCkge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgdXNlcjogbnVsbCxcclxuICAgICAgICAgICAgICAgIGlzRGFya01vZGU6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgY2FwdHVyZWRTdHJlYW06IG51bGwsXHJcbiAgICAgICAgICAgICAgICBtZWRpYVJlY29yZGVyOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgaXNSZWNvcmRpbmc6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgcmVjb3JkZWREYXRhOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgbWF4UmVjb3JkVGltZTogNjAsXHJcbiAgICAgICAgICAgICAgICBpc1BsYXlpbmc6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgcGxheWJhY2tRdWV1ZTogW10sXHJcbiAgICAgICAgICAgICAgICBwbGF5RGF0YTogbnVsbCxcclxuICAgICAgICAgICAgICAgIHRpbWVFbGFwc2VkOiAwLFxyXG4gICAgICAgICAgICAgICAgaXNVcGxvYWRpbmc6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgcHJvZ3Jlc3M6IDAsXHJcbiAgICAgICAgICAgICAgICBpc0NvbXBsZXRlZDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBpc0JsaW5kZWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgcHJlc2V0SW1hZ2VzOiBbXHJcbiAgICAgICAgICAgICAgICAgICAgeyBmcHM6IDMsIGRhcms6IGZhbHNlLCBpbWFnZXM6IFt7IHdpZHRoOiA2NCwgaGVpZ2h0OiA2NCwgc291cmNlOiBcIi9pbWFnZXMvUGl4ZWxhdGVkTHVuYS1Mb2xpdGEtR2xhZDEucG5nXCIgfSwgeyB3aWR0aDogNjQsIGhlaWdodDogNjQsIHNvdXJjZTogXCIvaW1hZ2VzL1BpeGVsYXRlZEx1bmEtTG9saXRhLUdsYWQyLnBuZ1wiIH0sIHsgd2lkdGg6IDY0LCBoZWlnaHQ6IDY0LCBzb3VyY2U6IFwiL2ltYWdlcy9QaXhlbGF0ZWRMdW5hLUxvbGl0YS1HbGFkMS5wbmdcIiB9XSB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHsgZnBzOiAzLCBkZW5zaXR5OiAyLCBkYXJrOiBmYWxzZSwgaW1hZ2VzOiBbeyB3aWR0aDogNjQsIGhlaWdodDogNjQsIHNvdXJjZTogXCIvaW1hZ2VzL1BpeGVsYXRlZEx1bmEtTG9saXRhLUdsYWQxQDJ4LnBuZ1wiIH0sIHsgd2lkdGg6IDY0LCBoZWlnaHQ6IDY0LCBzb3VyY2U6IFwiL2ltYWdlcy9QaXhlbGF0ZWRMdW5hLUxvbGl0YS1HbGFkMkAyeC5wbmdcIiB9LCB7IHdpZHRoOiA2NCwgaGVpZ2h0OiA2NCwgc291cmNlOiBcIi9pbWFnZXMvUGl4ZWxhdGVkTHVuYS1Mb2xpdGEtR2xhZDFAMngucG5nXCIgfV0gfSxcclxuICAgICAgICAgICAgICAgICAgICB7IGZwczogMywgZGVuc2l0eTogMywgZGFyazogZmFsc2UsIGltYWdlczogW3sgd2lkdGg6IDY0LCBoZWlnaHQ6IDY0LCBzb3VyY2U6IFwiL2ltYWdlcy9QaXhlbGF0ZWRMdW5hLUxvbGl0YS1HbGFkMUAzeC5wbmdcIiB9LCB7IHdpZHRoOiA2NCwgaGVpZ2h0OiA2NCwgc291cmNlOiBcIi9pbWFnZXMvUGl4ZWxhdGVkTHVuYS1Mb2xpdGEtR2xhZDJAM3gucG5nXCIgfSwgeyB3aWR0aDogNjQsIGhlaWdodDogNjQsIHNvdXJjZTogXCIvaW1hZ2VzL1BpeGVsYXRlZEx1bmEtTG9saXRhLUdsYWQxQDN4LnBuZ1wiIH1dIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgeyBmcHM6IDMsIGRhcms6IHRydWUsIGltYWdlczogW3sgd2lkdGg6IDY0LCBoZWlnaHQ6IDY0LCBzb3VyY2U6IFwiL2ltYWdlcy9QaXhlbGF0ZWRMdW5hLVdpdGNoLUdsYWQxLnBuZ1wiIH0sIHsgd2lkdGg6IDY0LCBoZWlnaHQ6IDY0LCBzb3VyY2U6IFwiL2ltYWdlcy9QaXhlbGF0ZWRMdW5hLVdpdGNoLUdsYWQyLnBuZ1wiIH0sIHsgd2lkdGg6IDY0LCBoZWlnaHQ6IDY0LCBzb3VyY2U6IFwiL2ltYWdlcy9QaXhlbGF0ZWRMdW5hLVdpdGNoLUdsYWQxLnBuZ1wiIH1dIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgeyBmcHM6IDMsIGRlbnNpdHk6IDIsIGRhcms6IHRydWUsIGltYWdlczogW3sgd2lkdGg6IDY0LCBoZWlnaHQ6IDY0LCBzb3VyY2U6IFwiL2ltYWdlcy9QaXhlbGF0ZWRMdW5hLVdpdGNoLUdsYWQxQDJ4LnBuZ1wiIH0sIHsgd2lkdGg6IDY0LCBoZWlnaHQ6IDY0LCBzb3VyY2U6IFwiL2ltYWdlcy9QaXhlbGF0ZWRMdW5hLVdpdGNoLUdsYWQyQDJ4LnBuZ1wiIH0sIHsgd2lkdGg6IDY0LCBoZWlnaHQ6IDY0LCBzb3VyY2U6IFwiL2ltYWdlcy9QaXhlbGF0ZWRMdW5hLVdpdGNoLUdsYWQxQDJ4LnBuZ1wiIH1dIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgeyBmcHM6IDMsIGRlbnNpdHk6IDMsIGRhcms6IHRydWUsIGltYWdlczogW3sgd2lkdGg6IDY0LCBoZWlnaHQ6IDY0LCBzb3VyY2U6IFwiL2ltYWdlcy9QaXhlbGF0ZWRMdW5hLVdpdGNoLUdsYWQxQDN4LnBuZ1wiIH0sIHsgd2lkdGg6IDY0LCBoZWlnaHQ6IDY0LCBzb3VyY2U6IFwiL2ltYWdlcy9QaXhlbGF0ZWRMdW5hLVdpdGNoLUdsYWQyQDN4LnBuZ1wiIH0sIHsgd2lkdGg6IDY0LCBoZWlnaHQ6IDY0LCBzb3VyY2U6IFwiL2ltYWdlcy9QaXhlbGF0ZWRMdW5hLVdpdGNoLUdsYWQxQDN4LnBuZ1wiIH1dIH1cclxuICAgICAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kSW1hZ2VzOiBbXSxcclxuICAgICAgICAgICAgICAgIHByZWxvYWRJbWFnZXM6IFtdLFxyXG4gICAgICAgICAgICAgICAgcXVlcnlRdWV1ZTogW10sXHJcbiAgICAgICAgICAgICAgICBzb3VuZHM6IHt9LFxyXG4gICAgICAgICAgICAgICAgc291bmRDYWNoZToge30sXHJcbiAgICAgICAgICAgICAgICByZWNlbnRTb3VuZHM6IFtdLFxyXG4gICAgICAgICAgICAgICAgaXNSZXZlYWxlZDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBpbnB1dDogXCJcIixcclxuICAgICAgICAgICAgICAgIGlucHV0SGFzRXJyb3I6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgbm90aWZpY2F0aW9uczogW10sXHJcbiAgICAgICAgICAgICAgICBub3RpZmljYXRpb25zSGVpZ2h0OiAwLFxyXG4gICAgICAgICAgICAgICAgYW5pbWF0ZWROb3RpZmljYXRpb25zSGVpZ2h0OiAwLFxyXG4gICAgICAgICAgICAgICAgdGlja2VyV2lkdGg6IDAsXHJcbiAgICAgICAgICAgICAgICBhbmltYXRlZFRpY2tlcldpZHRoOiAwLFxyXG4gICAgICAgICAgICAgICAgc3RhcnM6IC0xLFxyXG4gICAgICAgICAgICAgICAgYW5pbWF0ZWRTdGFyczogMCxcclxuICAgICAgICAgICAgICAgIHdvcmRzOiBbXSxcclxuICAgICAgICAgICAgICAgIGNoYXJhY3RlcjogbnVsbCxcclxuICAgICAgICAgICAgICAgIHN0YXRlczoge30sXHJcbiAgICAgICAgICAgICAgICBtYXA6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBsYXllcjogbnVsbCxcclxuXHJcblxyXG5cclxuICAgICAgICAgICAgICAgIGlzRXhwYW5kZWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgaXNMb2FkaW5nOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGlzTXV0ZWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgaXNDb2xsYXBzZWQ6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBpc1VwZGF0aW5nOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGJhY2tncm91bmRJbWFnZXNRdWV1ZTogW10sXHJcblxyXG4gICAgICAgICAgICAgICAgaXNQb3B1cDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBpc0xlYXJuaW5nOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgaXNBbmltYXRpbmc6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgbW9kZTogbnVsbCxcclxuICAgICAgICAgICAgICAgIGZlZWRRdWV1ZTogW10sXHJcblxyXG4gICAgICAgICAgICAgICAgYW5pbWF0ZWRJbnB1dExlbmd0aDogMCxcclxuICAgICAgICAgICAgICAgIG1heElucHV0TGVuZ3RoOiAxMDAsXHJcbiAgICAgICAgICAgICAgICBtZXNzYWdlczogW10sXHJcbiAgICAgICAgICAgICAgICBtYXhNZXNzYWdlczogMTAsXHJcbiAgICAgICAgICAgICAgICB3b3JkOiBudWxsLFxyXG5cclxuICAgICAgICAgICAgICAgIHRhZ3M6IFtdLFxyXG4gICAgICAgICAgICAgICAgbWF4VGFnczogMTAsXHJcbiAgICAgICAgICAgICAgICBzY3JvbGxUaW1lb3V0SUQ6IHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgICAgIHRpY2tJbnRlcnZhbElEOiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgICAgICBzY3JlZW5zaG90OiBudWxsLFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICB3YXRjaDoge1xyXG4gICAgICAgICAgICBpc011dGVkKG5ld1ZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdib3QnLCBKU09OLnN0cmluZ2lmeSh7IG11dGU6IG5ld1ZhbHVlIH0pKTtcclxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgnYm90Jyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHdvcmRzOiB7XHJcbiAgICAgICAgICAgICAgICBoYW5kbGVyOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXBwLiRuZXh0VGljaygoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgY2xpcCBvZiBkb2N1bWVudC5ib2R5LnF1ZXJ5U2VsZWN0b3JBbGwoXCIjdGlja2VyPi5jb2x1bW5zPi5jb2x1bW4+LmNvbnRyb2wgLmNsaXBcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB3aWR0aCA9IDA7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBlbGVtZW50IG9mIGNsaXAucXVlcnlTZWxlY3RvckFsbChcIjpzY29wZSAudGlja2VyLXdyYXAgLnRpY2tlciAuaXRlbVwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoICs9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHdpZHRoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcC50aWNrZXJXaWR0aCA9IE1hdGgubWluKHdpZHRoIC8gMiwgZG9jdW1lbnQuYm9keS5xdWVyeVNlbGVjdG9yKFwiI3RpY2tlcj4uY29sdW1ucz4uY29sdW1uPi5jb250cm9sIC5sZXZlbDpmaXJzdC1jaGlsZFwiKS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9jbGlwLnN0eWxlLndpZHRoID0gYXBwLnRpY2tlcldpZHRoICsgJ3B4JztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGlwLnF1ZXJ5U2VsZWN0b3IoXCI6c2NvcGUgLnRpY2tlci13cmFwIC50aWNrZXJcIikuc3R5bGUud2lkdGggPSB3aWR0aCArICdweCc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLypjbGlwLnF1ZXJ5U2VsZWN0b3IoXCIudGlja2VyLXdyYXAgLnRpY2tlclwiKS5hbmltYXRlKFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtOiBcInRyYW5zbGF0ZTNkKDAsIDAsIDApXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtOiBcInRyYW5zbGF0ZTNkKC1cIiArIHdpZHRoIC8gMiArIFwicHgsIDAsIDApXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0sIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IDMwICogMTAwMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlcmF0aW9uczogSW5maW5pdHlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsqL1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZGVlcDogdHJ1ZVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB0aWNrZXJXaWR0aChuZXdWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvYmogPSB7IHdpZHRoOiB0aGlzLmFuaW1hdGVkVGlja2VyV2lkdGggfTtcclxuXHJcbiAgICAgICAgICAgICAgICBhbmltZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0czogb2JqLFxyXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiBuZXdWYWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICByb3VuZDogMSxcclxuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogNTAwLFxyXG4gICAgICAgICAgICAgICAgICAgIGVhc2luZzogJ2xpbmVhcicsXHJcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuYW5pbWF0ZWRUaWNrZXJXaWR0aCA9IG9iai53aWR0aDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgYmFja2dyb3VuZEltYWdlczoge1xyXG4gICAgICAgICAgICAgICAgaGFuZGxlcjogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGFwcC4kbmV4dFRpY2soKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlbGVtZW50cyA9IGRvY3VtZW50LmJvZHkucXVlcnlTZWxlY3RvckFsbChcIi5iYWNrZ3JvdW5kPmRpdlwiKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50cy5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBvZmZzZXQgPSBlbGVtZW50cy5sZW5ndGggLSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZnJhbWVSYXRlID0gMzsvLzE1O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZWxlbWVudCBvZiBlbGVtZW50cykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuYW5pbWF0ZShbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogXCJ0cmFuc2xhdGUzZCgwLCAwLCAwKVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogXCJ0cmFuc2xhdGUzZCgtXCIgKyBvZmZzZXQgKiAxMDAgKyBcIiUsIDAsIDApXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0sIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbDogJ2ZvcndhcmRzJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWFzaW5nOiAnc3RlcHMoJyArIG9mZnNldCArICcpJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IDEwMDAgLyBmcmFtZVJhdGUgKiBlbGVtZW50cy5sZW5ndGgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZXJhdGlvbnM6IEluZmluaXR5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBkZWVwOiB0cnVlXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG5vdGlmaWNhdGlvbnM6IHtcclxuICAgICAgICAgICAgICAgIGhhbmRsZXI6ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBhcHAuJG5leHRUaWNrKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXBwLm5vdGlmaWNhdGlvbnNIZWlnaHQgPSBhcHAuJHJlZnMubm90aWZpY2F0aW9ucy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZGVlcDogdHJ1ZVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBub3RpZmljYXRpb25zSGVpZ2h0KG5ld1ZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAobmV3VmFsdWUgPiB0aGlzLmFuaW1hdGVkTm90aWZpY2F0aW9uc0hlaWdodCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG9iaiA9IHsgaGVpZ2h0OiB0aGlzLmFuaW1hdGVkTm90aWZpY2F0aW9uc0hlaWdodCB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBhbmltZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldHM6IG9iaixcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBuZXdWYWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcm91bmQ6IDEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiA1MDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVhc2luZzogJ2xpbmVhcicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZTogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hbmltYXRlZE5vdGlmaWNhdGlvbnNIZWlnaHQgPSBvYmouaGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYW5pbWF0ZWROb3RpZmljYXRpb25zSGVpZ2h0ID0gbmV3VmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHN0YXJzKG5ld1ZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvYmogPSB7IGNvdW50OiB0aGlzLmFuaW1hdGVkU3RhcnMgfTtcclxuXHJcbiAgICAgICAgICAgICAgICBhbmltZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0czogb2JqLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvdW50OiBuZXdWYWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICByb3VuZDogMSxcclxuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogNTAwLFxyXG4gICAgICAgICAgICAgICAgICAgIGVhc2luZzogJ2xpbmVhcicsXHJcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYW5pbWF0ZWRTdGFycyA9IG9iai5jb3VudFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBpbnB1dDoge1xyXG4gICAgICAgICAgICAgICAgaGFuZGxlcjogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGFwcC4kbmV4dFRpY2soKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBvYmogPSB7IGNvdW50OiBhcHAuYW5pbWF0ZWRJbnB1dExlbmd0aCB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWUoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0czogb2JqLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY291bnQ6IGFwcC5pbnB1dC5sZW5ndGgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3VuZDogMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiA1MDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlYXNpbmc6ICdsaW5lYXInLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwLmFuaW1hdGVkSW5wdXRMZW5ndGggPSBvYmouY291bnRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZGVlcDogdHJ1ZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBtZXRob2RzOiB7XHJcbiAgICAgICAgICAgIHNpZ25JbjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgZmlyZWJhc2UuYXV0aCgpLnNpZ25JbldpdGhQb3B1cChuZXcgZmlyZWJhc2UuYXV0aC5Ud2l0dGVyQXV0aFByb3ZpZGVyKCkpLnRoZW4oKHJlc3VsdCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIC8qKiBAdHlwZSB7ZmlyZWJhc2UuYXV0aC5PQXV0aENyZWRlbnRpYWx9ICovXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNyZWRlbnRpYWwgPSByZXN1bHQuY3JlZGVudGlhbDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2NyZWRlbnRpYWwnLCBKU09OLnN0cmluZ2lmeSh7IHByb3ZpZGVySWQ6IGNyZWRlbnRpYWwucHJvdmlkZXJJZCwgYWNjZXNzVG9rZW46IGNyZWRlbnRpYWwuYWNjZXNzVG9rZW4sIHNlY3JldDogY3JlZGVudGlhbC5zZWNyZXQgfSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oJ2NyZWRlbnRpYWwnKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KS5jYXRjaCgoZXJyb3IpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yLmNvZGUsIGVycm9yLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgfSk7O1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzaWduT3V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBmaXJlYmFzZS5hdXRoKCkuc2lnbk91dCgpLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCdjcmVkZW50aWFsJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZpcmViYXNlLmF1dGgoKS5zaWduSW5Bbm9ueW1vdXNseSgpLmNhdGNoKChlcnJvcikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yLmNvZGUsIGVycm9yLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSkuY2F0Y2goKGVycm9yKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvci5jb2RlLCBlcnJvci5tZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB1cGRhdGU6IGFzeW5jIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY2VudGVyTG9jYXRpb24gPSB0aGlzLm1hcC5nZXRDZW50ZXIoKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHByZWNpc2lvbnMgPSB7IDE6IDIsIDI6IDIsIDM6IDIsIDQ6IDIsIDU6IDIsIDY6IDIsIDc6IDIsIDg6IDIsIDk6IDIsIDEwOiAzLCAxMTogMywgMTI6IDQsIDEzOiA0LCAxNDogNCwgMTU6IDUsIDE2OiA1LCAxNzogNSwgMTg6IDYsIDE5OiA2LCAyMDogNiB9O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY2VudGVyR2VvaGFzaCA9IHRoaXMuZW5jb2RlR2VvaGFzaChjZW50ZXJMb2NhdGlvbi5sYXRpdHVkZSwgY2VudGVyTG9jYXRpb24ubG9uZ2l0dWRlLCBwcmVjaXNpb25zW3RoaXMubWFwLmdldFpvb20oKV0pO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbmVpZ2hib3JzID0gdGhpcy5nZXROZWlnaGJvcnMoY2VudGVyR2VvaGFzaCk7XHJcbiAgICAgICAgICAgICAgICBsZXQgZ2VvaGFzaGVzID0gW2NlbnRlckdlb2hhc2hdO1xyXG4gICAgICAgICAgICAgICAgbGV0IHNvdW5kcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgbGV0IHByaW1pdGl2ZXMgPSBbXTtcclxuICAgICAgICAgICAgICAgIGxldCByZWN0ID0gdGhpcy5kZWNvZGVHZW9oYXNoKGNlbnRlckdlb2hhc2gpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdGltZXN0YW1wID0gTWF0aC5mbG9vcihuZXcgRGF0ZSgpIC8gMTAwMCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0aW1lb3V0ID0gNjA7XHJcbiAgICAgICAgICAgICAgICBsZXQgdGVtcFNvdW5kQ2FjaGUgPSB7fTtcclxuICAgICAgICAgICAgICAgIGxldCBpc1VwZGF0ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGxldCBkb2N1bWVudHMgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICBwcmltaXRpdmVzLnB1c2gobmV3IE1pY3Jvc29mdC5NYXBzLlBvbHlnb24oW1xyXG4gICAgICAgICAgICAgICAgICAgIG5ldyBNaWNyb3NvZnQuTWFwcy5Mb2NhdGlvbihyZWN0LnRvcGxlZnQubGF0aXR1ZGUsIHJlY3QudG9wbGVmdC5sb25naXR1ZGUpLFxyXG4gICAgICAgICAgICAgICAgICAgIG5ldyBNaWNyb3NvZnQuTWFwcy5Mb2NhdGlvbihyZWN0LnRvcHJpZ2h0LmxhdGl0dWRlLCByZWN0LnRvcHJpZ2h0LmxvbmdpdHVkZSksXHJcbiAgICAgICAgICAgICAgICAgICAgbmV3IE1pY3Jvc29mdC5NYXBzLkxvY2F0aW9uKHJlY3QuYm90dG9tcmlnaHQubGF0aXR1ZGUsIHJlY3QuYm90dG9tcmlnaHQubG9uZ2l0dWRlKSxcclxuICAgICAgICAgICAgICAgICAgICBuZXcgTWljcm9zb2Z0Lk1hcHMuTG9jYXRpb24ocmVjdC5ib3R0b21sZWZ0LmxhdGl0dWRlLCByZWN0LmJvdHRvbWxlZnQubG9uZ2l0dWRlKSxcclxuICAgICAgICAgICAgICAgICAgICBuZXcgTWljcm9zb2Z0Lk1hcHMuTG9jYXRpb24ocmVjdC50b3BsZWZ0LmxhdGl0dWRlLCByZWN0LnRvcGxlZnQubG9uZ2l0dWRlKV0sIHtcclxuICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICdyZ2JhKDI1NSwgMCwgMCwgMC41KScsXHJcbiAgICAgICAgICAgICAgICAgICAgc3Ryb2tlQ29sb3I6ICdyZWQnLFxyXG4gICAgICAgICAgICAgICAgICAgIHN0cm9rZVRoaWNrbmVzczogMVxyXG4gICAgICAgICAgICAgICAgfSkpO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIG5laWdoYm9ycykge1xyXG4gICAgICAgICAgICAgICAgICAgIGdlb2hhc2hlcy5wdXNoKG5laWdoYm9yc1trZXldKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmVjdCA9IHRoaXMuZGVjb2RlR2VvaGFzaChuZWlnaGJvcnNba2V5XSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHByaW1pdGl2ZXMucHVzaChuZXcgTWljcm9zb2Z0Lk1hcHMuUG9seWdvbihbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBNaWNyb3NvZnQuTWFwcy5Mb2NhdGlvbihyZWN0LnRvcGxlZnQubGF0aXR1ZGUsIHJlY3QudG9wbGVmdC5sb25naXR1ZGUpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgTWljcm9zb2Z0Lk1hcHMuTG9jYXRpb24ocmVjdC50b3ByaWdodC5sYXRpdHVkZSwgcmVjdC50b3ByaWdodC5sb25naXR1ZGUpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgTWljcm9zb2Z0Lk1hcHMuTG9jYXRpb24ocmVjdC5ib3R0b21yaWdodC5sYXRpdHVkZSwgcmVjdC5ib3R0b21yaWdodC5sb25naXR1ZGUpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgTWljcm9zb2Z0Lk1hcHMuTG9jYXRpb24ocmVjdC5ib3R0b21sZWZ0LmxhdGl0dWRlLCByZWN0LmJvdHRvbWxlZnQubG9uZ2l0dWRlKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IE1pY3Jvc29mdC5NYXBzLkxvY2F0aW9uKHJlY3QudG9wbGVmdC5sYXRpdHVkZSwgcmVjdC50b3BsZWZ0LmxvbmdpdHVkZSldLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJ3JnYmEoMjU1LCAwLCAwLCAwLjUpJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3Ryb2tlQ29sb3I6ICdyZWQnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJva2VUaGlja25lc3M6IDFcclxuICAgICAgICAgICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5sYXllci5zZXRQcmltaXRpdmVzKHByaW1pdGl2ZXMpO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMucXVlcnlRdWV1ZS5wdXNoKGNlbnRlckxvY2F0aW9uKTtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGdlb2hhc2ggb2YgZ2VvaGFzaGVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGdlb2hhc2ggaW4gdGhpcy5zb3VuZENhY2hlICYmIHRpbWVzdGFtcCAtIHRoaXMuc291bmRDYWNoZVtnZW9oYXNoXS50aW1lc3RhbXAgPCB0aW1lb3V0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgc291bmQgb2YgdGhpcy5zb3VuZENhY2hlW2dlb2hhc2hdLnNvdW5kcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc291bmRzLnB1c2goc291bmQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNuYXBzaG90ID0gYXdhaXQgZGF0YWJhc2UucmVmKGRhdGFiYXNlUm9vdCArIFwiL3NvdW5kc1wiKS5vcmRlckJ5Q2hpbGQoXCJnZW9oYXNoXCIpLmxpbWl0VG9MYXN0KDUwKS5zdGFydEF0KGdlb2hhc2gpLmVuZEF0KGdlb2hhc2ggKyBcIlxcdWY4ZmZcIikub25jZSgndmFsdWUnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcFNvdW5kQ2FjaGVbZ2VvaGFzaF0gPSB7IHRpbWVzdGFtcDogdGltZXN0YW1wLCBzb3VuZHM6IFtdIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzbmFwc2hvdC5leGlzdHMoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkaWN0aW9uYXJ5ID0gc25hcHNob3QudmFsKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBkaWN0aW9uYXJ5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaWN0aW9uYXJ5W2tleV1bXCJpZFwiXSA9IGtleTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdW5kcy5wdXNoKGRpY3Rpb25hcnlba2V5XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wU291bmRDYWNoZVtnZW9oYXNoXS5zb3VuZHMucHVzaChkaWN0aW9uYXJ5W2tleV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMucXVlcnlRdWV1ZS5zaGlmdCgpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnF1ZXJ5UXVldWUubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGdlb2hhc2ggaW4gdGVtcFNvdW5kQ2FjaGUpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNvdW5kQ2FjaGVbZ2VvaGFzaF0gPSB0ZW1wU291bmRDYWNoZVtnZW9oYXNoXTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHNvdW5kIG9mIHRoaXMudGFrZShzb3VuZHMuc29ydCgoeCwgeSkgPT4geS50aW1lc3RhbXAgLSB4LnRpbWVzdGFtcCksIDEwMCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgaXNOZXcgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGlkIGluIHRoaXMuc291bmRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzb3VuZC5pZCA9PT0gdGhpcy5zb3VuZHNbaWRdLmlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc05ldyA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNOZXcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRpdGxlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBob3VycyA9IG5ldyBEYXRlKHNvdW5kLnRpbWVzdGFtcCAqIDEwMDApLmdldEhvdXJzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGljb25VcmwgPSBob3VycyA+PSA2ICYmIGhvdXJzIDwgMTggPyBcIi9pbWFnZXMvTWFya2VyLUxpZ2h0LnN2Z1wiIDogXCIvaW1hZ2VzL01hcmtlci1EYXJrLnN2Z1wiO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFwidGFnc1wiIGluIHNvdW5kICYmIHNvdW5kLnRhZ3MubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGUgPSBzb3VuZC50YWdzLmpvaW4oXCIvXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnRzLnB1c2goeyB0b2tlbnM6IHNvdW5kLnRhZ3MsIHRpbWVzdGFtcDogc291bmQudGltZXN0YW1wIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGUgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwdXNocGluID0gbmV3IE1pY3Jvc29mdC5NYXBzLlB1c2hwaW4obmV3IE1pY3Jvc29mdC5NYXBzLkxvY2F0aW9uKHNvdW5kLmxvY2F0aW9uLmxhdGl0dWRlLCBzb3VuZC5sb2NhdGlvbi5sb25naXR1ZGUpLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogdGl0bGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uOiBpY29uVXJsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRJbWFnZShwdXNocGluLCBpY29uVXJsLCBzb3VuZCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNvdW5kc1twdXNocGluLmlkXSA9IHNvdW5kO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNvdW5kc1twdXNocGluLmlkXVtcInB1c2hwaW5cIl0gPSBwdXNocGluO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNvdW5kc1twdXNocGluLmlkXVtcImhhbmRsZXJzXCJdID0gW01pY3Jvc29mdC5NYXBzLkV2ZW50cy5hZGRIYW5kbGVyKHB1c2hwaW4sICdjbGljaycsIGFzeW5jIChhcmdzKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBob3VycyA9IG5ldyBEYXRlKHNlbGYuc291bmRzW2FyZ3MudGFyZ2V0LmlkXS50aW1lc3RhbXAgKiAxMDAwKS5nZXRIb3VycygpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSBzZWxmLnBsYXliYWNrUXVldWUubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoXCJnZW5lcmF0b3JcIiBpbiBzZWxmLnBsYXliYWNrUXVldWVbaV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5wbGF5YmFja1F1ZXVlLnNwbGljZShpLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGYucGxheURhdGEgIT09IG51bGwgJiYgXCJpZFwiIGluIHNlbGYucGxheURhdGEgJiYgc2VsZi5wbGF5RGF0YS5pZCBpbiBzZWxmLnNvdW5kcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGggPSBuZXcgRGF0ZShzZWxmLnNvdW5kc1tzZWxmLnBsYXlEYXRhLmlkXS50aW1lc3RhbXAgKiAxMDAwKS5nZXRIb3VycygpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnNldEltYWdlKHNlbGYuc291bmRzW3NlbGYucGxheURhdGEuaWRdLnB1c2hwaW4sIGggPj0gNiAmJiBoIDwgMTggPyBcIi9pbWFnZXMvTWFya2VyLUxpZ2h0LnN2Z1wiIDogXCIvaW1hZ2VzL01hcmtlci1EYXJrLnN2Z1wiLCBzZWxmLnNvdW5kc1tzZWxmLnBsYXlEYXRhLmlkXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFyZ3MudGFyZ2V0LmlkIGluIHNlbGYuc291bmRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zZXRJbWFnZShzZWxmLnNvdW5kc1thcmdzLnRhcmdldC5pZF0ucHVzaHBpbiwgaG91cnMgPj0gNiAmJiBob3VycyA8IDE4ID8gXCIvaW1hZ2VzL01hcmtlci1MaWdodC1TZWxlY3RlZC5zdmdcIiA6IFwiL2ltYWdlcy9NYXJrZXItRGFyay1TZWxlY3RlZC5zdmdcIiwgc2VsZi5zb3VuZHNbYXJncy50YXJnZXQuaWRdKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5wbGF5RGF0YSA9IHsgaWQ6IGFyZ3MudGFyZ2V0LmlkLCB0eXBlOiBzZWxmLnNvdW5kc1thcmdzLnRhcmdldC5pZF0udHlwZSwgdXJsOiBhd2FpdCBzdG9yYWdlLnJlZigpLmNoaWxkKFwic291bmRzL1wiICsgc2VsZi5zb3VuZHNbYXJncy50YXJnZXQuaWRdLm5hbWUpLmdldERvd25sb2FkVVJMKCkgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi4kcmVmcy5wbGF5ZXIuc3JjID0gc2VsZi5wbGF5RGF0YS51cmw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuJHJlZnMucGxheWVyLnBsYXkoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZS5tZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLCBNaWNyb3NvZnQuTWFwcy5FdmVudHMuYWRkSGFuZGxlcihwdXNocGluLCAnZGJsY2xpY2snLCAoYXJncykgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhhc2ggPSBzZWxmLnNvdW5kc1thcmdzLnRhcmdldC5pZF0uaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWFwLmVudGl0aWVzLnB1c2gocHVzaHBpbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzVXBkYXRlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChcInRhZ3NcIiBpbiBzb3VuZCAmJiBzb3VuZC50YWdzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnRzLnB1c2goeyB0b2tlbnM6IHNvdW5kLnRhZ3MsIHRpbWVzdGFtcDogc291bmQudGltZXN0YW1wIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyh0aGlzLnNvdW5kcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzb3VuZHMuc29tZSh4ID0+IHguaWQgPT09IHNlbGYuc291bmRzW2tleV0uaWQpICYmIChzZWxmLnBsYXlEYXRhID09PSBudWxsIHx8IFwiaWRcIiBpbiBzZWxmLnBsYXlEYXRhID09PSBmYWxzZSB8fCBzZWxmLnBsYXlEYXRhLmlkICE9PSBrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaGFuZGxlcklkIG9mIHNlbGYuc291bmRzW2tleV0uaGFuZGxlcnMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1pY3Jvc29mdC5NYXBzLkV2ZW50cy5yZW1vdmVIYW5kbGVyKGhhbmRsZXJJZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubWFwLmVudGl0aWVzLnJlbW92ZShzZWxmLnNvdW5kc1trZXldLnB1c2hwaW4pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHNlbGYuc291bmRzW2tleV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzVXBkYXRlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgT2JqZWN0LmtleXModGhpcy5zb3VuZENhY2hlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGltZXN0YW1wIC0gc2VsZi5zb3VuZENhY2hlW2tleV0udGltZXN0YW1wID49IHRpbWVvdXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHNlbGYuc291bmRDYWNoZVtrZXldO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnBsYXlEYXRhICE9PSBudWxsICYmIFwiaWRcIiBpbiB0aGlzLnBsYXlEYXRhICYmIHRoaXMucGxheURhdGEuaWQgaW4gdGhpcy5zb3VuZHMgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbGF5RGF0YSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGlzVXBkYXRlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdHMgPSBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVwc2lsb24gPSBNYXRoLnBvdygxMCwgLTYpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGZpbHRlcmVkRG9jdW1lbnRzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdGVybUZyZXF1ZW5jaWVzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgaW52ZXJzZURvY3VtZW50RnJlcXVlbmN5ID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBiYXNlVGltZSA9IE1hdGguZmxvb3IobmV3IERhdGUoKS5nZXRUaW1lKCkgLyAxMDAwKSAtIDI0ICogNjAgKiA2MDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxpbWl0ID0gMTA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgc2NvcmVEaWN0aW9uYXJ5ID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgc2NvcmVzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbWF4U2NvcmUgPSBlcHNpbG9uO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZG9jdW1lbnQgb2YgZG9jdW1lbnRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRlcm1TZXQgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCB0b2tlbiBvZiBkb2N1bWVudC50b2tlbnMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0ZXJtU2V0LmluY2x1ZGVzKHRva2VuKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRva2VuIGluIGludmVyc2VEb2N1bWVudEZyZXF1ZW5jeSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludmVyc2VEb2N1bWVudEZyZXF1ZW5jeVt0b2tlbl0gKz0gMS4wO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnZlcnNlRG9jdW1lbnRGcmVxdWVuY3lbdG9rZW5dID0gMS4wO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlcm1TZXQucHVzaCh0b2tlbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gaW52ZXJzZURvY3VtZW50RnJlcXVlbmN5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW52ZXJzZURvY3VtZW50RnJlcXVlbmN5W2tleV0gPSBNYXRoLmxvZyhkb2N1bWVudHMubGVuZ3RoIC8gKGludmVyc2VEb2N1bWVudEZyZXF1ZW5jeVtrZXldICsgZXBzaWxvbikpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZG9jdW1lbnQgb2YgZG9jdW1lbnRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRvY3VtZW50LnRpbWVzdGFtcCA+IGJhc2VUaW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlcmVkRG9jdW1lbnRzLnB1c2goZG9jdW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmlsdGVyZWREb2N1bWVudHMubGVuZ3RoIDwgbGltaXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtaW4gPSBNYXRoLm1heChkb2N1bWVudHMubGVuZ3RoIC0gbGltaXQsIDApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXJlZERvY3VtZW50cy5zcGxpY2UoMCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSBkb2N1bWVudHMubGVuZ3RoIC0gMTsgaSA+PSBtaW47IGktLSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXJlZERvY3VtZW50cy51bnNoaWZ0KGRvY3VtZW50c1tpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZG9jdW1lbnQgb2YgZmlsdGVyZWREb2N1bWVudHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdGYgPSB7fTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCB0b2tlbiBvZiBkb2N1bWVudC50b2tlbnMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRva2VuIGluIHRmKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0Zlt0b2tlbl0gKz0gMS4wO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGZbdG9rZW5dID0gMS4wO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiB0Zikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZltrZXldIC89IGRvY3VtZW50LnRva2Vucy5sZW5ndGg7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShrZXkgaW4gc2NvcmVEaWN0aW9uYXJ5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcmVEaWN0aW9uYXJ5W2tleV0gPSAwLjA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlcm1GcmVxdWVuY2llcy5wdXNoKHRmKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBzY29yZURpY3Rpb25hcnkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHRlcm1GcmVxdWVuY3kgb2YgdGVybUZyZXF1ZW5jaWVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChrZXkgaW4gdGVybUZyZXF1ZW5jeSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGZpZGYgPSB0ZXJtRnJlcXVlbmN5W2tleV0gKiBpbnZlcnNlRG9jdW1lbnRGcmVxdWVuY3lba2V5XTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGZpZGYgPiBzY29yZURpY3Rpb25hcnlba2V5XSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3JlRGljdGlvbmFyeVtrZXldID0gdGZpZGY7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gc2NvcmVEaWN0aW9uYXJ5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcmVzLnB1c2goeyB0ZXJtOiBrZXksIHZhbHVlOiBzY29yZURpY3Rpb25hcnlba2V5XSB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29yZXMuc29ydCgoeCwgeSkgPT4geS52YWx1ZSAtIHgudmFsdWUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgc2NvcmUgb2Ygc2NvcmVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNjb3JlLnZhbHVlID4gbWF4U2NvcmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4U2NvcmUgPSBzY29yZS52YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBzY29yZSBvZiBzY29yZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29yZS52YWx1ZSAvPSBtYXhTY29yZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHNjb3Jlcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgaW5kZXggPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgaXNDaGFuZ2VkID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IG9iaiBvZiB0aGlzLnByZXBhcmUodGhpcy5jaGFyYWN0ZXIudGlja2VyLmZpbHRlcigoeCkgPT4geC5uYW1lID09PSBcIkFsZXJ0XCIpLCByZXN1bHRzLmxlbmd0aCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvYmoudHlwZSA9PT0gXCJNZXNzYWdlXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRzLnNwbGljZShpbmRleCwgMCwgeyB0ZXJtOiBvYmoudGV4dCwgaW1hZ2U6IHRoaXMuY2hhcmFjdGVyLmltYWdlLCB2YWx1ZTogbnVsbCB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleCsrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy53b3Jkcy5sZW5ndGggPT09IHJlc3VsdHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlc3VsdHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0c1tpXS50ZXJtICE9PSB0aGlzLndvcmRzW2ldLm5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNDaGFuZ2VkID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzQ2hhbmdlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc0NoYW5nZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMud29yZHMuc3BsaWNlKDApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVzdWx0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcImltYWdlXCIgaW4gcmVzdWx0c1tpXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLndvcmRzLnB1c2goeyBpbmRleDogaSwgbmFtZTogcmVzdWx0c1tpXS50ZXJtLCBpbWFnZTogcmVzdWx0c1tpXS5pbWFnZSwgc2NvcmU6IHJlc3VsdHNbaV0udmFsdWUgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLndvcmRzLnB1c2goeyBpbmRleDogaSwgbmFtZTogcmVzdWx0c1tpXS50ZXJtLCBzY29yZTogcmVzdWx0c1tpXS52YWx1ZSB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGxvY2F0ZTogZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcclxuXHJcbiAgICAgICAgICAgICAgICBuYXZpZ2F0b3IuZ2VvbG9jYXRpb24uZ2V0Q3VycmVudFBvc2l0aW9uKChwb3NpdGlvbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYubWFwLnNldFZpZXcoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjZW50ZXI6IG5ldyBNaWNyb3NvZnQuTWFwcy5Mb2NhdGlvbihwb3NpdGlvbi5jb29yZHMubGF0aXR1ZGUsIHBvc2l0aW9uLmNvb3Jkcy5sb25naXR1ZGUpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB6b29tOiAxNlxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSwgKGVycm9yKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5ub3RpZnkoeyB0ZXh0OiBlcnJvci5tZXNzYWdlLCBhY2NlbnQ6IHNlbGYuY2hhcmFjdGVyLmFjY2VudCwgaW1hZ2U6IHNlbGYuY2hhcmFjdGVyLmltYWdlIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZUhpZ2hBY2N1cmFjeTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICB0aW1lb3V0OiA1MDAwLFxyXG4gICAgICAgICAgICAgICAgICAgIG1heGltdW1BZ2U6IDBcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBiYWNrd2FyZDogZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gdGhpcy5wbGF5YmFja1F1ZXVlLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKFwiZ2VuZXJhdG9yXCIgaW4gdGhpcy5wbGF5YmFja1F1ZXVlW2ldICYmIHRoaXMucGxheWJhY2tRdWV1ZVtpXVtcImdlbmVyYXRvclwiXSAhPT0gXCJyZWNlbnRcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsYXliYWNrUXVldWUuc3BsaWNlKGksIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5wbGF5YmFja1F1ZXVlLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG1heFNvdW5kcyA9IDI1O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gdGhpcy5yZWNlbnRTb3VuZHMubGVuZ3RoIC0gMSwgbGltaXQgPSBNYXRoLm1heCgwLCB0aGlzLnJlY2VudFNvdW5kcy5sZW5ndGggLSBtYXhTb3VuZHMpOyBpID49IGxpbWl0OyBpLS0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcyA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMucmVjZW50U291bmRzW2ldKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNbXCJnZW5lcmF0b3JcIl0gPSBcInJlY2VudFwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsYXliYWNrUXVldWUucHVzaChzKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5mb3J3YXJkKCk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGZvcndhcmQ6IGFzeW5jIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHNvdW5kID0gdGhpcy5wbGF5YmFja1F1ZXVlLnNoaWZ0KCk7XHJcbiAgICAgICAgICAgICAgICBsZXQgc291bmRLZXkgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnBsYXlEYXRhICE9PSBudWxsICYmIFwiaWRcIiBpbiB0aGlzLnBsYXlEYXRhICYmIHRoaXMucGxheURhdGEuaWQgaW4gdGhpcy5zb3VuZHMpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBob3VycyA9IG5ldyBEYXRlKHRoaXMuc291bmRzW3RoaXMucGxheURhdGEuaWRdLnRpbWVzdGFtcCAqIDEwMDApLmdldEhvdXJzKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0SW1hZ2UodGhpcy5zb3VuZHNbdGhpcy5wbGF5RGF0YS5pZF0ucHVzaHBpbiwgaG91cnMgPj0gNiAmJiBob3VycyA8IDE4ID8gXCIvaW1hZ2VzL01hcmtlci1MaWdodC5zdmdcIiA6IFwiL2ltYWdlcy9NYXJrZXItRGFyay5zdmdcIiwgdGhpcy5zb3VuZHNbdGhpcy5wbGF5RGF0YS5pZF0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMuc291bmRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNvdW5kLmlkID09PSB0aGlzLnNvdW5kc1trZXldLmlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGhvdXJzID0gbmV3IERhdGUodGhpcy5zb3VuZHNba2V5XS50aW1lc3RhbXAgKiAxMDAwKS5nZXRIb3VycygpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRJbWFnZSh0aGlzLnNvdW5kc1trZXldLnB1c2hwaW4sIGhvdXJzID49IDYgJiYgaG91cnMgPCAxOCA/IFwiL2ltYWdlcy9NYXJrZXItTGlnaHQtU2VsZWN0ZWQuc3ZnXCIgOiBcIi9pbWFnZXMvTWFya2VyLURhcmstU2VsZWN0ZWQuc3ZnXCIsIHRoaXMuc291bmRzW2tleV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VuZEtleSA9IGtleTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoc291bmRLZXkgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBob3VycyA9IG5ldyBEYXRlKHNvdW5kLnRpbWVzdGFtcCAqIDEwMDApLmdldEhvdXJzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaWNvblVybCA9IGhvdXJzID49IDYgJiYgaG91cnMgPCAxOCA/IFwiL2ltYWdlcy9NYXJrZXItTGlnaHQtU2VsZWN0ZWQuc3ZnXCIgOiBcIi9pbWFnZXMvTWFya2VyLURhcmstU2VsZWN0ZWQuc3ZnXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcHVzaHBpbiA9IG5ldyBNaWNyb3NvZnQuTWFwcy5QdXNocGluKG5ldyBNaWNyb3NvZnQuTWFwcy5Mb2NhdGlvbihzb3VuZC5sb2NhdGlvbi5sYXRpdHVkZSwgc291bmQubG9jYXRpb24ubG9uZ2l0dWRlKSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogXCJ0YWdzXCIgaW4gc291bmQgPyBzb3VuZC50YWdzLmpvaW4oXCIvXCIpIDogXCJcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogaWNvblVybFxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldEltYWdlKHB1c2hwaW4sIGljb25VcmwsIHNvdW5kKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgc291bmRLZXkgPSBwdXNocGluLmlkO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNvdW5kc1twdXNocGluLmlkXSA9IHNvdW5kO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc291bmRzW3B1c2hwaW4uaWRdW1wiaWRcIl0gPSBzb3VuZC5pZDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNvdW5kc1twdXNocGluLmlkXVtcInB1c2hwaW5cIl0gPSBwdXNocGluO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc291bmRzW3B1c2hwaW4uaWRdW1wiaGFuZGxlcnNcIl0gPSBbTWljcm9zb2Z0Lk1hcHMuRXZlbnRzLmFkZEhhbmRsZXIocHVzaHBpbiwgJ2NsaWNrJywgYXN5bmMgKGFyZ3MpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaG91cnMgPSBuZXcgRGF0ZShzZWxmLnNvdW5kc1thcmdzLnRhcmdldC5pZF0udGltZXN0YW1wICogMTAwMCkuZ2V0SG91cnMoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSBzZWxmLnBsYXliYWNrUXVldWUubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcImdlbmVyYXRvclwiIGluIHNlbGYucGxheWJhY2tRdWV1ZVtpXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYucGxheWJhY2tRdWV1ZS5zcGxpY2UoaSwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZWxmLnBsYXlEYXRhICE9PSBudWxsICYmIFwiaWRcIiBpbiBzZWxmLnBsYXlEYXRhICYmIHNlbGYucGxheURhdGEuaWQgaW4gc2VsZi5zb3VuZHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGggPSBuZXcgRGF0ZShzZWxmLnNvdW5kc1tzZWxmLnBsYXlEYXRhLmlkXS50aW1lc3RhbXAgKiAxMDAwKS5nZXRIb3VycygpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc2V0SW1hZ2Uoc2VsZi5zb3VuZHNbc2VsZi5wbGF5RGF0YS5pZF0ucHVzaHBpbiwgaCA+PSA2ICYmIGggPCAxOCA/IFwiL2ltYWdlcy9NYXJrZXItTGlnaHQuc3ZnXCIgOiBcIi9pbWFnZXMvTWFya2VyLURhcmsuc3ZnXCIsIHNlbGYuc291bmRzW3NlbGYucGxheURhdGEuaWRdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFyZ3MudGFyZ2V0LmlkIGluIHNlbGYuc291bmRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnNldEltYWdlKHNlbGYuc291bmRzW2FyZ3MudGFyZ2V0LmlkXS5wdXNocGluLCBob3VycyA+PSA2ICYmIGhvdXJzIDwgMTggPyBcIi9pbWFnZXMvTWFya2VyLUxpZ2h0LVNlbGVjdGVkLnN2Z1wiIDogXCIvaW1hZ2VzL01hcmtlci1EYXJrLVNlbGVjdGVkLnN2Z1wiLCBzZWxmLnNvdW5kc1thcmdzLnRhcmdldC5pZF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYucGxheURhdGEgPSB7IGlkOiBhcmdzLnRhcmdldC5pZCwgdHlwZTogc2VsZi5zb3VuZHNbYXJncy50YXJnZXQuaWRdLnR5cGUsIHVybDogYXdhaXQgc3RvcmFnZS5yZWYoKS5jaGlsZChcInNvdW5kcy9cIiArIHNlbGYuc291bmRzW2FyZ3MudGFyZ2V0LmlkXS5uYW1lKS5nZXREb3dubG9hZFVSTCgpIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi4kcmVmcy5wbGF5ZXIuc3JjID0gc2VsZi5wbGF5RGF0YS51cmw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi4kcmVmcy5wbGF5ZXIucGxheSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZS5tZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pLCBNaWNyb3NvZnQuTWFwcy5FdmVudHMuYWRkSGFuZGxlcihwdXNocGluLCAnZGJsY2xpY2snLCAoYXJncykgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaGFzaCA9IHNlbGYuc291bmRzW2FyZ3MudGFyZ2V0LmlkXS5pZDtcclxuICAgICAgICAgICAgICAgICAgICB9KV07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWFwLmVudGl0aWVzLnB1c2gocHVzaHBpbik7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5wbGF5RGF0YSA9IHsgaWQ6IHNvdW5kS2V5LCB0eXBlOiBzb3VuZC50eXBlLCB1cmw6IGF3YWl0IHN0b3JhZ2UucmVmKCkuY2hpbGQoXCJzb3VuZHMvXCIgKyBzb3VuZC5uYW1lKS5nZXREb3dubG9hZFVSTCgpIH07XHJcbiAgICAgICAgICAgICAgICB0aGlzLiRyZWZzLnBsYXllci5zcmMgPSB0aGlzLnBsYXlEYXRhLnVybDtcclxuICAgICAgICAgICAgICAgIHRoaXMuJHJlZnMucGxheWVyLnBsYXkoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubWFwLnNldFZpZXcoe1xyXG4gICAgICAgICAgICAgICAgICAgIGNlbnRlcjogbmV3IE1pY3Jvc29mdC5NYXBzLkxvY2F0aW9uKHNvdW5kLmxvY2F0aW9uLmxhdGl0dWRlLCBzb3VuZC5sb2NhdGlvbi5sb25naXR1ZGUpLFxyXG4gICAgICAgICAgICAgICAgICAgIHpvb206IDE2XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc2h1ZmZsZTogZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBfcmFuZG9tKG1pbiwgbWF4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWluID0gTWF0aC5jZWlsKG1pbik7XHJcbiAgICAgICAgICAgICAgICAgICAgbWF4ID0gTWF0aC5mbG9vcihtYXgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbikpICsgbWluO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHNodWZmbGUoYXJyYXkpIHtcclxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBfcmFuZG9tKG1pbiwgbWF4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbiA9IE1hdGguY2VpbChtaW4pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXggPSBNYXRoLmZsb29yKG1heCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbikpICsgbWluO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGEgPSBbXS5jb25jYXQoYXJyYXkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBuID0gYXJyYXkubGVuZ3RoO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAobiA+IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgayA9IF9yYW5kb20oMCwgbik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuLS07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZW1wID0gYVtuXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFbbl0gPSBhW2tdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhW2tdID0gdGVtcDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSB0aGlzLnBsYXliYWNrUXVldWUubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoXCJnZW5lcmF0b3JcIiBpbiB0aGlzLnBsYXliYWNrUXVldWVbaV0gJiYgdGhpcy5wbGF5YmFja1F1ZXVlW2ldW1wiZ2VuZXJhdG9yXCJdICE9PSBcInNodWZmbGVcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsYXliYWNrUXVldWUuc3BsaWNlKGksIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5wbGF5YmFja1F1ZXVlLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG1heFNvdW5kcyA9IDI1O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHNvdW5kIG9mIHRoaXMudGFrZShzaHVmZmxlKHRoaXMucmVjZW50U291bmRzKSwgbWF4U291bmRzKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzID0gT2JqZWN0LmFzc2lnbih7fSwgc291bmQpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgc1tcImdlbmVyYXRvclwiXSA9IFwic2h1ZmZsZVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsYXliYWNrUXVldWUucHVzaChzKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5mb3J3YXJkKCk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHBsYXlTb3VuZDogYXN5bmMgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5wbGF5YmFja1F1ZXVlLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmZvcndhcmQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnBsYXlEYXRhID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2VudGVyTG9jYXRpb24gPSB0aGlzLm1hcC5nZXRDZW50ZXIoKTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgbWluRGlzdGFuY2UgPSBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUjtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgc291bmRJZCA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMuc291bmRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRpc3RhbmNlID0gdGhpcy5nZXREaXN0YW5jZShjZW50ZXJMb2NhdGlvbi5sYXRpdHVkZSwgY2VudGVyTG9jYXRpb24ubG9uZ2l0dWRlLCB0aGlzLnNvdW5kc1trZXldLmxvY2F0aW9uLmxhdGl0dWRlLCB0aGlzLnNvdW5kc1trZXldLmxvY2F0aW9uLmxvbmdpdHVkZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGlzdGFuY2UgPCBtaW5EaXN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc291bmRJZCA9IGtleTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbkRpc3RhbmNlID0gZGlzdGFuY2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzb3VuZElkID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJHJlZnMucGxheWJhY2suYW5pbWF0ZShbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IHRyYW5zZm9ybTogJ3RyYW5zbGF0ZTNkKDAsIDAsIDApJyB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyB0cmFuc2Zvcm06ICd0cmFuc2xhdGUzZCg4cHgsIDAsIDApJyB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyB0cmFuc2Zvcm06ICd0cmFuc2xhdGUzZCgtOHB4LCAwLCAwKScgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgdHJhbnNmb3JtOiAndHJhbnNsYXRlM2QoN3B4LCAwLCAwKScgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgdHJhbnNmb3JtOiAndHJhbnNsYXRlM2QoLTdweCwgMCwgMCknIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IHRyYW5zZm9ybTogJ3RyYW5zbGF0ZTNkKDZweCwgMCwgMCknIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IHRyYW5zZm9ybTogJ3RyYW5zbGF0ZTNkKC02cHgsIDAsIDApJyB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyB0cmFuc2Zvcm06ICd0cmFuc2xhdGUzZCg1cHgsIDAsIDApJyB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyB0cmFuc2Zvcm06ICd0cmFuc2xhdGUzZCgtNXB4LCAwLCAwKScgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgdHJhbnNmb3JtOiAndHJhbnNsYXRlM2QoNHB4LCAwLCAwKScgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgdHJhbnNmb3JtOiAndHJhbnNsYXRlM2QoLTRweCwgMCwgMCknIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IHRyYW5zZm9ybTogJ3RyYW5zbGF0ZTNkKDNweCwgMCwgMCknIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IHRyYW5zZm9ybTogJ3RyYW5zbGF0ZTNkKC0zcHgsIDAsIDApJyB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyB0cmFuc2Zvcm06ICd0cmFuc2xhdGUzZCgycHgsIDAsIDApJyB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyB0cmFuc2Zvcm06ICd0cmFuc2xhdGUzZCgtMnB4LCAwLCAwKScgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgdHJhbnNmb3JtOiAndHJhbnNsYXRlM2QoMXB4LCAwLCAwKScgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgdHJhbnNmb3JtOiAndHJhbnNsYXRlM2QoLTFweCwgMCwgMCknIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IHRyYW5zZm9ybTogJ3RyYW5zbGF0ZTNkKDAsIDAsIDApJyB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBdLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogMTAwMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZXJhdGlvbnM6IDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaG91cnMgPSBuZXcgRGF0ZSh0aGlzLnNvdW5kc1tzb3VuZElkXS50aW1lc3RhbXAgKiAxMDAwKS5nZXRIb3VycygpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRJbWFnZSh0aGlzLnNvdW5kc1tzb3VuZElkXS5wdXNocGluLCBob3VycyA+PSA2ICYmIGhvdXJzIDwgMTggPyBcIi9pbWFnZXMvTWFya2VyLUxpZ2h0LVNlbGVjdGVkLnN2Z1wiIDogXCIvaW1hZ2VzL01hcmtlci1EYXJrLVNlbGVjdGVkLnN2Z1wiLCB0aGlzLnNvdW5kc1tzb3VuZElkXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGxheURhdGEgPSB7IGlkOiBzb3VuZElkLCB0eXBlOiB0aGlzLnNvdW5kc1tzb3VuZElkXS50eXBlLCB1cmw6IGF3YWl0IHN0b3JhZ2UucmVmKCkuY2hpbGQoXCJzb3VuZHMvXCIgKyB0aGlzLnNvdW5kc1tzb3VuZElkXS5uYW1lKS5nZXREb3dubG9hZFVSTCgpIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJHJlZnMucGxheWVyLnNyYyA9IHRoaXMucGxheURhdGEudXJsO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLiRyZWZzLnBsYXllci5wbGF5KCk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHN0b3BTb3VuZDogZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiRyZWZzLnBsYXllci5wYXVzZSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy4kcmVmcy5wbGF5ZXIuY3VycmVudFRpbWUgPSAwO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzdGFydFJlY29yZGluZzogYXN5bmMgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5wbGF5RGF0YSAhPT0gbnVsbCAmJiBcImlkXCIgaW4gdGhpcy5wbGF5RGF0YSAmJiB0aGlzLnBsYXlEYXRhLmlkIGluIHRoaXMuc291bmRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaG91cnMgPSBuZXcgRGF0ZSh0aGlzLnNvdW5kc1t0aGlzLnBsYXlEYXRhLmlkXS50aW1lc3RhbXAgKiAxMDAwKS5nZXRIb3VycygpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldEltYWdlKHRoaXMuc291bmRzW3RoaXMucGxheURhdGEuaWRdLnB1c2hwaW4sIGhvdXJzID49IDYgJiYgaG91cnMgPCAxOCA/IFwiL2ltYWdlcy9NYXJrZXItTGlnaHQuc3ZnXCIgOiBcIi9pbWFnZXMvTWFya2VyLURhcmsuc3ZnXCIsIHRoaXMuc291bmRzW3RoaXMucGxheURhdGEuaWRdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2FwdHVyZWRTdHJlYW0gPSBhd2FpdCBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZpZGVvOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXVkaW86IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVjaG9DYW5jZWxsYXRpb246IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2b2x1bWU6IDAuNVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChNZWRpYVJlY29yZGVyLmlzVHlwZVN1cHBvcnRlZChcImF1ZGlvL21wNFwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWVkaWFSZWNvcmRlciA9IG5ldyBNZWRpYVJlY29yZGVyKHRoaXMuY2FwdHVyZWRTdHJlYW0sIHsgbWltZVR5cGU6IFwiYXVkaW8vbXA0XCIgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tZWRpYVJlY29yZGVyLm9uc3RvcCA9IChldmVudCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnBsYXlEYXRhID0geyB0eXBlOiBzZWxmLnJlY29yZGVkRGF0YS50eXBlLCB1cmw6IHdpbmRvdy5VUkwuY3JlYXRlT2JqZWN0VVJMKG5ldyBCbG9iKHNlbGYucmVjb3JkZWREYXRhLmJsb2JzLCB7ICd0eXBlJzogc2VsZi5yZWNvcmRlZERhdGEudHlwZSB9KSkgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi4kcmVmcy5wbGF5ZXIuc3JjID0gc2VsZi5wbGF5RGF0YS51cmw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuaXNSZWNvcmRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi50aW1lRWxhcHNlZCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuY2FwdHVyZWRTdHJlYW0uZ2V0VHJhY2tzKCkuZm9yRWFjaCgodHJhY2spID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYWNrLnN0b3AoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWVkaWFSZWNvcmRlci5vbmRhdGFhdmFpbGFibGUgPSAoZXZlbnQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGltZXN0YW1wID0gTWF0aC5mbG9vcihuZXcgRGF0ZSgpIC8gMTAwMCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQuZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5yZWNvcmRlZERhdGEuYmxvYnMucHVzaChldmVudC5kYXRhKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZi5tZWRpYVJlY29yZGVyLnN0YXRlID09PSBcInJlY29yZGluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi50aW1lRWxhcHNlZCArPSB0aW1lc3RhbXAgLSBzZWxmLnJlY29yZGVkRGF0YS50aW1lc3RhbXA7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZWxmLnRpbWVFbGFwc2VkID49IHNlbGYubWF4UmVjb3JkVGltZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLm1lZGlhUmVjb3JkZXIuc3RvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5yZWNvcmRlZERhdGEudGltZXN0YW1wID0gdGltZXN0YW1wO1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGF1ZGlvQ29udGV4dCA9IG5ldyBBdWRpb0NvbnRleHQoKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBpbnB1dCA9IGF1ZGlvQ29udGV4dC5jcmVhdGVNZWRpYVN0cmVhbVNvdXJjZSh0aGlzLmNhcHR1cmVkU3RyZWFtKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgYXVkaW9Db250ZXh0LnJlc3VtZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1lZGlhUmVjb3JkZXIgPSBuZXcgUmVjb3JkZXIoaW5wdXQsIHt9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLyp0aGlzLm1lZGlhUmVjb3JkZXIgPSBuZXcgTWVkaWFTdHJlYW1SZWNvcmRlcih0aGlzLmNhcHR1cmVkU3RyZWFtKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1lZGlhUmVjb3JkZXIubWltZVR5cGUgPSBcImF1ZGlvL3dhdlwiO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWVkaWFSZWNvcmRlci5vbnN0b3AgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYucGxheURhdGEgPSB7IHR5cGU6IHNlbGYucmVjb3JkZWREYXRhLnR5cGUsIHVybDogd2luZG93LlVSTC5jcmVhdGVPYmplY3RVUkwobmV3IEJsb2Ioc2VsZi5yZWNvcmRlZERhdGEuYmxvYnMsIHsgJ3R5cGUnOiBzZWxmLnJlY29yZGVkRGF0YS50eXBlIH0pKSB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLiRyZWZzLnBsYXllci5zcmMgPSBzZWxmLnBsYXlEYXRhLnVybDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5pc1JlY29yZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnRpbWVFbGFwc2VkID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5jYXB0dXJlZFN0cmVhbS5nZXRUcmFja3MoKS5mb3JFYWNoKCh0cmFjaykgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhY2suc3RvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWVkaWFSZWNvcmRlci5vbmRhdGFhdmFpbGFibGUgPSAoYmxvYikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYmxvYi5zaXplID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5yZWNvcmRlZERhdGEuYmxvYnMucHVzaChibG9iKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZi5pc1JlY29yZGluZykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubWVkaWFSZWNvcmRlci5zdG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9OyovXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNQbGF5aW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kcmVmcy5wbGF5ZXIucGF1c2UoKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLiRyZWZzLnBsYXllci5jdXJyZW50VGltZSA9IDA7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5pc1JlY29yZGluZyA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubWVkaWFSZWNvcmRlciBpbnN0YW5jZW9mIE1lZGlhUmVjb3JkZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlY29yZGVkRGF0YSA9IHsgdGltZXN0YW1wOiBNYXRoLmZsb29yKG5ldyBEYXRlKCkgLyAxMDAwKSwgdHlwZTogdGhpcy5tZWRpYVJlY29yZGVyLm1pbWVUeXBlLCBibG9iczogW10gfTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1lZGlhUmVjb3JkZXIuc3RhcnQoMTAwMCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZ1bmMgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZWxmLmlzUmVjb3JkaW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0aW1lc3RhbXAgPSBNYXRoLmZsb29yKG5ldyBEYXRlKCkgLyAxMDAwKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnRpbWVFbGFwc2VkICs9IHRpbWVzdGFtcCAtIHNlbGYucmVjb3JkZWREYXRhLnRpbWVzdGFtcDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYucmVjb3JkZWREYXRhLnRpbWVzdGFtcCA9IHRpbWVzdGFtcDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZi50aW1lRWxhcHNlZCA+PSBzZWxmLm1heFJlY29yZFRpbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLm1lZGlhUmVjb3JkZXIuc3RvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubWVkaWFSZWNvcmRlci5leHBvcnRXQVYoKGJsb2IpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5yZWNvcmRlZERhdGEuYmxvYnMucHVzaChibG9iKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5wbGF5RGF0YSA9IHsgdHlwZTogc2VsZi5yZWNvcmRlZERhdGEudHlwZSwgdXJsOiB3aW5kb3cuVVJMLmNyZWF0ZU9iamVjdFVSTChuZXcgQmxvYihzZWxmLnJlY29yZGVkRGF0YS5ibG9icywgeyAndHlwZSc6IHNlbGYucmVjb3JkZWREYXRhLnR5cGUgfSkpIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuJHJlZnMucGxheWVyLnNyYyA9IHNlbGYucGxheURhdGEudXJsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubWVkaWFSZWNvcmRlci5jbGVhcigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuaXNSZWNvcmRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnRpbWVFbGFwc2VkID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmNhcHR1cmVkU3RyZWFtLmdldFRyYWNrcygpLmZvckVhY2goKHRyYWNrKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYWNrLnN0b3AoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LnNldFRpbWVvdXQoZnVuYywgMTAwMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlY29yZGVkRGF0YSA9IHsgdGltZXN0YW1wOiBNYXRoLmZsb29yKG5ldyBEYXRlKCkgLyAxMDAwKSwgdHlwZTogXCJhdWRpby93YXZcIiwgYmxvYnM6IFtdIH07XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tZWRpYVJlY29yZGVyLnJlY29yZCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB3aW5kb3cuc2V0VGltZW91dChmdW5jLCAxMDAwKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLypjb25zdCBmdW5jID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZi5pc1JlY29yZGluZykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGltZXN0YW1wID0gTWF0aC5mbG9vcihuZXcgRGF0ZSgpIC8gMTAwMCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi50aW1lRWxhcHNlZCArPSB0aW1lc3RhbXAgLSBzZWxmLnJlY29yZGVkRGF0YS50aW1lc3RhbXA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnJlY29yZGVkRGF0YS50aW1lc3RhbXAgPSB0aW1lc3RhbXA7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LnNldFRpbWVvdXQoZnVuYywgMTAwMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1lZGlhUmVjb3JkZXIuc3RhcnQodGhpcy5tYXhSZWNvcmRUaW1lICogMTAwMCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmMsIDEwMDApOyovXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHN0b3BSZWNvcmRpbmc6IGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tZWRpYVJlY29yZGVyLnN0b3AoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5tZWRpYVJlY29yZGVyIGluc3RhbmNlb2YgUmVjb3JkZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tZWRpYVJlY29yZGVyLmV4cG9ydFdBVigoYmxvYikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnJlY29yZGVkRGF0YS5ibG9icy5wdXNoKGJsb2IpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnBsYXlEYXRhID0geyB0eXBlOiBzZWxmLnJlY29yZGVkRGF0YS50eXBlLCB1cmw6IHdpbmRvdy5VUkwuY3JlYXRlT2JqZWN0VVJMKG5ldyBCbG9iKHNlbGYucmVjb3JkZWREYXRhLmJsb2JzLCB7ICd0eXBlJzogc2VsZi5yZWNvcmRlZERhdGEudHlwZSB9KSkgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi4kcmVmcy5wbGF5ZXIuc3JjID0gc2VsZi5wbGF5RGF0YS51cmw7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tZWRpYVJlY29yZGVyLmNsZWFyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc1JlY29yZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudGltZUVsYXBzZWQgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2FwdHVyZWRTdHJlYW0uZ2V0VHJhY2tzKCkuZm9yRWFjaCgodHJhY2spID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhY2suc3RvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB1cGxvYWRTb3VuZDogZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcclxuICAgICAgICAgICAgICAgIGNvbnN0IHN0b3JhZ2VSZWYgPSBzdG9yYWdlLnJlZigpO1xyXG4gICAgICAgICAgICAgICAgbGV0IHRhZ3MgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pbnB1dC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJlZ2V4ID0gLyg/Oig/OlwiKC4qPylcIil8KFteXFxzXSspKVxccyovZztcclxuICAgICAgICAgICAgICAgICAgICBsZXQgbWF0Y2g7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlICgobWF0Y2ggPSByZWdleC5leGVjKHRoaXMuaW5wdXQpKSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG1hdGNoWzFdID09PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWdzLnB1c2gobWF0Y2hbMl0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGlmICh0eXBlb2YgbWF0Y2hbMl0gPT09IFwidW5kZWZpbmVkXCIgJiYgbWF0Y2hbMV0ubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFncy5wdXNoKG1hdGNoWzFdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLmlzVXBsb2FkaW5nID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICBuYXZpZ2F0b3IuZ2VvbG9jYXRpb24uZ2V0Q3VycmVudFBvc2l0aW9uKChwb3NpdGlvbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHVwbG9hZFRhc2sgPSBzdG9yYWdlUmVmLmNoaWxkKGBzb3VuZHMvJHtzZWxmLmdlbmVyYXRlVXVpZCgpfWApLnB1dChuZXcgQmxvYihzZWxmLnJlY29yZGVkRGF0YS5ibG9icywgeyAndHlwZSc6IHNlbGYucmVjb3JkZWREYXRhLnR5cGUgfSkpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB1cGxvYWRUYXNrLm9uKCdzdGF0ZV9jaGFuZ2VkJywgZnVuY3Rpb24gKHNuYXBzaG90KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYucHJvZ3Jlc3MgPSBzbmFwc2hvdC5ieXRlc1RyYW5zZmVycmVkIC8gc25hcHNob3QudG90YWxCeXRlcztcclxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5ub3RpZnkoeyB0ZXh0OiBlcnJvci5tZXNzYWdlLCBhY2NlbnQ6IHNlbGYuY2hhcmFjdGVyLmFjY2VudCwgaW1hZ2U6IHNlbGYuY2hhcmFjdGVyLmltYWdlIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5wcm9ncmVzcyA9IDAuMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5pc1VwbG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc291bmQgPSB7IG5hbWU6IHVwbG9hZFRhc2suc25hcHNob3QucmVmLm5hbWUsIHR5cGU6IHNlbGYucmVjb3JkZWREYXRhLnR5cGUsIGxvY2F0aW9uOiB7IGxhdGl0dWRlOiBwb3NpdGlvbi5jb29yZHMubGF0aXR1ZGUsIGxvbmdpdHVkZTogcG9zaXRpb24uY29vcmRzLmxvbmdpdHVkZSB9LCBnZW9oYXNoOiBzZWxmLmVuY29kZUdlb2hhc2gocG9zaXRpb24uY29vcmRzLmxhdGl0dWRlLCBwb3NpdGlvbi5jb29yZHMubG9uZ2l0dWRlKSwgdGFnczogdGFncywgdGltZXN0YW1wOiBNYXRoLmZsb29yKG5ldyBEYXRlKCkgLyAxMDAwKSwgdXNlcjogeyBpZDogc2VsZi51c2VyLnVpZCwgbmFtZTogc2VsZi51c2VyLmRpc3BsYXlOYW1lLCBpbWFnZTogc2VsZi51c2VyLnBob3RvVVJMIH0gfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5ld1Bvc3RSZWYgPSBkYXRhYmFzZS5yZWYoZGF0YWJhc2VSb290ICsgJy9zb3VuZHMnKS5wdXNoKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdQb3N0UmVmLnNldChzb3VuZCwgZnVuY3Rpb24gKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLm5vdGlmeSh7IHRleHQ6IGVycm9yLm1lc3NhZ2UsIGFjY2VudDogc2VsZi5jaGFyYWN0ZXIuYWNjZW50LCBpbWFnZTogc2VsZi5jaGFyYWN0ZXIuaW1hZ2UgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YWJhc2UucmVmKGRhdGFiYXNlUm9vdCArIFwiL3N0YXJzXCIpLnRyYW5zYWN0aW9uKGZ1bmN0aW9uIChjb3VudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChjb3VudCB8fCAwKSArIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGl0bGUgPSB0YWdzLmxlbmd0aCA+IDAgPyB0YWdzLmpvaW4oXCIvXCIpIDogXCJcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaG91cnMgPSBuZXcgRGF0ZShzb3VuZC50aW1lc3RhbXAgKiAxMDAwKS5nZXRIb3VycygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpY29uVXJsID0gaG91cnMgPj0gNiAmJiBob3VycyA8IDE4ID8gXCIvaW1hZ2VzL01hcmtlci1MaWdodC1TZWxlY3RlZC5zdmdcIiA6IFwiL2ltYWdlcy9NYXJrZXItRGFyay1TZWxlY3RlZC5zdmdcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcHVzaHBpbiA9IG5ldyBNaWNyb3NvZnQuTWFwcy5QdXNocGluKG5ldyBNaWNyb3NvZnQuTWFwcy5Mb2NhdGlvbihzb3VuZC5sb2NhdGlvbi5sYXRpdHVkZSwgc291bmQubG9jYXRpb24ubG9uZ2l0dWRlKSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IHRpdGxlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogaWNvblVybFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc2V0SW1hZ2UocHVzaHBpbiwgaWNvblVybCwgc291bmQpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5yZWNvcmRlZERhdGEgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zb3VuZHNbcHVzaHBpbi5pZF0gPSBzb3VuZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zb3VuZHNbcHVzaHBpbi5pZF1bXCJpZFwiXSA9IG5ld1Bvc3RSZWYua2V5O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnNvdW5kc1twdXNocGluLmlkXVtcInB1c2hwaW5cIl0gPSBwdXNocGluO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnNvdW5kc1twdXNocGluLmlkXVtcImhhbmRsZXJzXCJdID0gW01pY3Jvc29mdC5NYXBzLkV2ZW50cy5hZGRIYW5kbGVyKHB1c2hwaW4sICdjbGljaycsIGFzeW5jIChhcmdzKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBob3VycyA9IG5ldyBEYXRlKHNlbGYuc291bmRzW2FyZ3MudGFyZ2V0LmlkXS50aW1lc3RhbXAgKiAxMDAwKS5nZXRIb3VycygpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSBzZWxmLnBsYXliYWNrUXVldWUubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoXCJnZW5lcmF0b3JcIiBpbiBzZWxmLnBsYXliYWNrUXVldWVbaV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5wbGF5YmFja1F1ZXVlLnNwbGljZShpLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGYucGxheURhdGEgIT09IG51bGwgJiYgXCJpZFwiIGluIHNlbGYucGxheURhdGEgJiYgc2VsZi5wbGF5RGF0YS5pZCBpbiBzZWxmLnNvdW5kcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGggPSBuZXcgRGF0ZShzZWxmLnNvdW5kc1tzZWxmLnBsYXlEYXRhLmlkXS50aW1lc3RhbXAgKiAxMDAwKS5nZXRIb3VycygpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnNldEltYWdlKHNlbGYuc291bmRzW3NlbGYucGxheURhdGEuaWRdLnB1c2hwaW4sIGggPj0gNiAmJiBoIDwgMTggPyBcIi9pbWFnZXMvTWFya2VyLUxpZ2h0LnN2Z1wiIDogXCIvaW1hZ2VzL01hcmtlci1EYXJrLnN2Z1wiLCBzZWxmLnNvdW5kc1tzZWxmLnBsYXlEYXRhLmlkXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFyZ3MudGFyZ2V0LmlkIGluIHNlbGYuc291bmRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zZXRJbWFnZShzZWxmLnNvdW5kc1thcmdzLnRhcmdldC5pZF0ucHVzaHBpbiwgaG91cnMgPj0gNiAmJiBob3VycyA8IDE4ID8gXCIvaW1hZ2VzL01hcmtlci1MaWdodC1TZWxlY3RlZC5zdmdcIiA6IFwiL2ltYWdlcy9NYXJrZXItRGFyay1TZWxlY3RlZC5zdmdcIiwgc2VsZi5zb3VuZHNbYXJncy50YXJnZXQuaWRdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnBsYXlEYXRhID0geyBpZDogYXJncy50YXJnZXQuaWQsIHR5cGU6IHNlbGYuc291bmRzW2FyZ3MudGFyZ2V0LmlkXS50eXBlLCB1cmw6IGF3YWl0IHN0b3JhZ2UucmVmKCkuY2hpbGQoXCJzb3VuZHMvXCIgKyBzZWxmLnNvdW5kc1thcmdzLnRhcmdldC5pZF0ubmFtZSkuZ2V0RG93bmxvYWRVUkwoKSB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLiRyZWZzLnBsYXllci5zcmMgPSBzZWxmLnBsYXlEYXRhLnVybDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi4kcmVmcy5wbGF5ZXIucGxheSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSksIE1pY3Jvc29mdC5NYXBzLkV2ZW50cy5hZGRIYW5kbGVyKHB1c2hwaW4sICdkYmxjbGljaycsIChhcmdzKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaGFzaCA9IHNlbGYuc291bmRzW2FyZ3MudGFyZ2V0LmlkXS5pZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSldO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5tYXAuZW50aXRpZXMucHVzaChwdXNocGluKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5tYXAuc2V0Vmlldyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZW50ZXI6IG5ldyBNaWNyb3NvZnQuTWFwcy5Mb2NhdGlvbihzb3VuZC5sb2NhdGlvbi5sYXRpdHVkZSwgc291bmQubG9jYXRpb24ubG9uZ2l0dWRlKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHpvb206IHNlbGYubWFwLmdldFpvb20oKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc291bmQuZ2VvaGFzaC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZ2VvaGFzaCA9IHNvdW5kLmdlb2hhc2guc3Vic3RyaW5nKDAsIHNvdW5kLmdlb2hhc2gubGVuZ3RoIC0gaSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGdlb2hhc2ggaW4gc2VsZi5zb3VuZENhY2hlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHNlbGYuc291bmRDYWNoZVtnZW9oYXNoXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5wcm9ncmVzcyA9IDAuMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5pc1VwbG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmlzQmxpbmRlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9LCAoZXJyb3IpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLm5vdGlmeSh7IHRleHQ6IGVycm9yLm1lc3NhZ2UsIGFjY2VudDogc2VsZi5jaGFyYWN0ZXIuYWNjZW50LCBpbWFnZTogc2VsZi5jaGFyYWN0ZXIuaW1hZ2UgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5pc1VwbG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZUhpZ2hBY2N1cmFjeTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICB0aW1lb3V0OiA1MDAwLFxyXG4gICAgICAgICAgICAgICAgICAgIG1heGltdW1BZ2U6IDBcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBub3RpZnk6IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcclxuXHJcbiAgICAgICAgICAgICAgICBkYXRhWydpZCddID0gd2luZG93LnNldFRpbWVvdXQoKGQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNlbGYubm90aWZpY2F0aW9ucy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZi5ub3RpZmljYXRpb25zW2ldLmlkID09IGQuaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubm90aWZpY2F0aW9ucy5zcGxpY2UoaSwgMSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LCAzMDAwLCBkYXRhKTtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLm5vdGlmaWNhdGlvbnMudW5zaGlmdChkYXRhKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgaW5wdXRDaGFuZ2VkOiBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlucHV0Lmxlbmd0aCA+IDAgJiYgdGhpcy5pbnB1dC5zcGxpdCgvXFxzLykubGVuZ3RoID4gMTApIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmlucHV0SGFzRXJyb3IgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmlucHV0SGFzRXJyb3IgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgYmxpbmRlZDogYXN5bmMgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gX3JhbmRvbShtaW4sIG1heCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG1pbiA9IE1hdGguY2VpbChtaW4pO1xyXG4gICAgICAgICAgICAgICAgICAgIG1heCA9IE1hdGguZmxvb3IobWF4KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4pKSArIG1pbjtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBzaHVmZmxlKGFycmF5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gX3JhbmRvbShtaW4sIG1heCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtaW4gPSBNYXRoLmNlaWwobWluKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4ID0gTWF0aC5mbG9vcihtYXgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4pKSArIG1pbjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBhID0gW10uY29uY2F0KGFycmF5KTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgbiA9IGFycmF5Lmxlbmd0aDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKG4gPiAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGsgPSBfcmFuZG9tKDAsIG4pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbi0tO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGVtcCA9IGFbbl07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhW25dID0gYVtrXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYVtrXSA9IHRlbXA7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLnByZWxvYWRJbWFnZXMuc3BsaWNlKDApO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5iYWNrZ3JvdW5kSW1hZ2VzLnNwbGljZSgwKTtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBzaHVmZmxlZEltYWdlcyA9IHNodWZmbGUodGhpcy5wcmVzZXRJbWFnZXMpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHNldCBvZiBzaHVmZmxlZEltYWdlcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoXCJkZW5zaXR5XCIgaW4gc2V0ICYmIHNldC5kZW5zaXR5ID09PSBNYXRoLmZsb29yKHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvKSAmJiBzZXQuZGFyayA9PT0gdGhpcy5pc0RhcmtNb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGltYWdlIG9mIHNldC5pbWFnZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoXCJ3aWR0aFwiIGluIGltYWdlICYmIFwiaGVpZ2h0XCIgaW4gaW1hZ2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcmVsb2FkSW1hZ2VzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IGltYWdlLndpZHRoLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBpbWFnZS5oZWlnaHQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IGltYWdlLnNvdXJjZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByZWxvYWRJbWFnZXMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IGltYWdlLnNvdXJjZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucHJlbG9hZEltYWdlcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHNldCBvZiBzaHVmZmxlZEltYWdlcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoXCJkZW5zaXR5XCIgaW4gc2V0ID09PSBmYWxzZSAmJiBzZXQuZGFyayAhPT0gdGhpcy5pc0RhcmtNb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGltYWdlIG9mIHNldC5pbWFnZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoXCJ3aWR0aFwiIGluIGltYWdlICYmIFwiaGVpZ2h0XCIgaW4gaW1hZ2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcmVsb2FkSW1hZ2VzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IGltYWdlLndpZHRoLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBpbWFnZS5oZWlnaHQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IGltYWdlLnNvdXJjZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByZWxvYWRJbWFnZXMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IGltYWdlLnNvdXJjZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGxvYWQ6IGZ1bmN0aW9uICh1cmwpIHtcclxuICAgICAgICAgICAgICAgIGxldCBpc0NvbXBsZXRlZCA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaW1hZ2Ugb2YgdGhpcy5wcmVsb2FkSW1hZ2VzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGltYWdlLnVybCA9PSB1cmwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2VbXCJpc0xvYWRlZFwiXSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICghKFwiaXNMb2FkZWRcIiBpbiBpbWFnZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXNDb21wbGV0ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGlzQ29tcGxldGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGluZGV4ID0gMDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBpbWFnZSBvZiB0aGlzLnByZWxvYWRJbWFnZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGltYWdlLmlzTG9hZGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoXCJ3aWR0aFwiIGluIGltYWdlICYmIFwiaGVpZ2h0XCIgaW4gaW1hZ2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJhY2tncm91bmRJbWFnZXMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4OiBpbmRleCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IGltYWdlLndpZHRoLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IGltYWdlLmhlaWdodCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBpbWFnZS51cmxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5iYWNrZ3JvdW5kSW1hZ2VzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleDogaW5kZXgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogaW1hZ2UudXJsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXgrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcmVsb2FkSW1hZ2VzLnNwbGljZSgwKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmlzQmxpbmRlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJHJlZnMuc3VucmlzZS5hbmltYXRlKFtcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtOiBcInJvdGF0ZSgwZGVnKVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogXCJyb3RhdGUoMzYwZGVnKVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBdLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAxMCAqIDEwMDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZXJhdGlvbnM6IDFcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmlzQ29tcGxldGVkID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgd2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmlzQ29tcGxldGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgNTAwMCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAodXJsKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgaXNDb21wbGV0ZWQgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGltYWdlIG9mIHRoaXMucHJlbG9hZEltYWdlcykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbWFnZS51cmwgPT0gdXJsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlW1wiaXNMb2FkZWRcIl0gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIShcImlzTG9hZGVkXCIgaW4gaW1hZ2UpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzQ29tcGxldGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChpc0NvbXBsZXRlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaW1hZ2Ugb2YgdGhpcy5wcmVsb2FkSW1hZ2VzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbWFnZS5pc0xvYWRlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5iYWNrZ3JvdW5kSW1hZ2VzLnB1c2goaW1hZ2UudXJsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcmVsb2FkSW1hZ2VzLnNwbGljZSgwKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmlzQmxpbmRlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzZXRJbWFnZTogZnVuY3Rpb24ocHVzaHBpbiwgaWNvblVybCwgc291bmQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGltYWdlMSA9IG5ldyBJbWFnZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgIGltYWdlMS5zcmMgPSBpY29uVXJsO1xyXG4gICAgICAgICAgICAgICAgaW1hZ2UxLm9ubG9hZCA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoXCJpbWFnZVwiIGluIHNvdW5kLnVzZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaW1hZ2UyID0gbmV3IEltYWdlKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbWFnZTIuY3Jvc3NPcmlnaW4gPSBcIkFub255bW91c1wiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbWFnZTIuc3JjID0gc291bmQudXNlci5pbWFnZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2UyLm9ubG9hZCA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGN0eCA9IGMuZ2V0Q29udGV4dCgnMmQnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGltYWdlV2lkdGggPSAyNDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGltYWdlSGVpZ2h0ID0gMjQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYy53aWR0aCA9IGltYWdlMS53aWR0aDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMuaGVpZ2h0ID0gaW1hZ2UxLmhlaWdodCArIGltYWdlSGVpZ2h0ICsgNDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHguc2F2ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3R4LmFyYyhjLndpZHRoIC8gMiwgYy5oZWlnaHQgLSBpbWFnZUhlaWdodCAvIDIsIGltYWdlV2lkdGggLyAyLCAwLCAyICogTWF0aC5QSSwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3R4LmNsaXAoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5kcmF3SW1hZ2UoaW1hZ2UyLCAoYy53aWR0aCAtIGltYWdlV2lkdGgpIC8gMiwgYy5oZWlnaHQgLSBpbWFnZUhlaWdodCwgaW1hZ2VXaWR0aCwgaW1hZ2VIZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3R4LnJlc3RvcmUoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHguZHJhd0ltYWdlKGltYWdlMSwgMCwgMCwgaW1hZ2UxLndpZHRoLCBpbWFnZTEuaGVpZ2h0KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwdXNocGluLnNldE9wdGlvbnMoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb246IGMudG9EYXRhVVJMKClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY3R4ID0gYy5nZXRDb250ZXh0KCcyZCcpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgYy53aWR0aCA9IGltYWdlMS53aWR0aDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYy5oZWlnaHQgPSBpbWFnZTEuaGVpZ2h0O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY3R4LmRyYXdJbWFnZShpbWFnZTEsIDAsIDAsIGltYWdlMS53aWR0aCwgaW1hZ2UxLmhlaWdodCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwdXNocGluLnNldE9wdGlvbnMoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogYy50b0RhdGFVUkwoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBmb3JtYXRUaW1lOiBmdW5jdGlvbiAodGltZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IE1hdGguZmxvb3IodGltZSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBtaW51dGVzID0gTWF0aC5mbG9vcih0IC8gNjApO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2Vjb25kcyA9IHQgJSA2MDtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKCcwJyArIG1pbnV0ZXMpLnNsaWNlKC0xKSArIFwiOlwiICsgKCcwMCcgKyBzZWNvbmRzKS5zbGljZSgtMik7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGFuaW1hdGlvblN0YXJ0OiBmdW5jdGlvbiAoZWwpIHtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgYW5pbWF0aW9uRW5kOiBmdW5jdGlvbiAoZWwpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuJG5leHRUaWNrKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLm5vdGlmaWNhdGlvbnNIZWlnaHQgPSBzZWxmLiRyZWZzLm5vdGlmaWNhdGlvbnMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHRpY2tlclVwZGF0ZWQ6IGZ1bmN0aW9uIChlbCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy4kbmV4dFRpY2soKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgY2xpcCBvZiBkb2N1bWVudC5ib2R5LnF1ZXJ5U2VsZWN0b3JBbGwoXCIjdGlja2VyPi5jb2x1bW5zPi5jb2x1bW4+LmNvbnRyb2wgLmNsaXBcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHdpZHRoID0gMDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZWxlbWVudCBvZiBjbGlwLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6c2NvcGUgLnRpY2tlci13cmFwIC50aWNrZXIgLml0ZW1cIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoICs9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh3aWR0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYudGlja2VyV2lkdGggPSBNYXRoLm1pbih3aWR0aCAvIDIsIGRvY3VtZW50LmJvZHkucXVlcnlTZWxlY3RvcihcIiN0aWNrZXI+LmNvbHVtbnM+LmNvbHVtbj4uY29udHJvbCAubGV2ZWw6Zmlyc3QtY2hpbGRcIikuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpcC5xdWVyeVNlbGVjdG9yKFwiOnNjb3BlIC50aWNrZXItd3JhcCAudGlja2VyXCIpLnN0eWxlLndpZHRoID0gd2lkdGggKyAncHgnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHRha2U6IGZ1bmN0aW9uIChjb2xsZWN0aW9uLCBjb3VudCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGNvbGxlY3Rpb24ubGVuZ3RoID4gY291bnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdGVtcCA9IFtdLmNvbmNhdChjb2xsZWN0aW9uKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcC5zcGxpY2UoY291bnQpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGVtcDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY29sbGVjdGlvbjtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgcmV2ZXJzZTogZnVuY3Rpb24gKGNvbGxlY3Rpb24pIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbXS5jb25jYXQoY29sbGVjdGlvbikucmV2ZXJzZSgpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBnZXREaXN0YW5jZTogZnVuY3Rpb24gKGxhdDEsIGxvbjEsIGxhdDIsIGxvbjIpIHtcclxuICAgICAgICAgICAgICAgIHZhciBSID0gNjM3MTsgLy8gUmFkaXVzIG9mIHRoZSBlYXJ0aCBpbiBrbVxyXG4gICAgICAgICAgICAgICAgdmFyIGRMYXQgPSB0aGlzLmRlZzJyYWQobGF0MiAtIGxhdDEpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGRMb24gPSB0aGlzLmRlZzJyYWQobG9uMiAtIGxvbjEpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGEgPVxyXG4gICAgICAgICAgICAgICAgICAgIE1hdGguc2luKGRMYXQgLyAyKSAqIE1hdGguc2luKGRMYXQgLyAyKSArXHJcbiAgICAgICAgICAgICAgICAgICAgTWF0aC5jb3ModGhpcy5kZWcycmFkKGxhdDEpKSAqIE1hdGguY29zKHRoaXMuZGVnMnJhZChsYXQyKSkgKlxyXG4gICAgICAgICAgICAgICAgICAgIE1hdGguc2luKGRMb24gLyAyKSAqIE1hdGguc2luKGRMb24gLyAyKTtcclxuICAgICAgICAgICAgICAgIHZhciBjID0gMiAqIE1hdGguYXRhbjIoTWF0aC5zcXJ0KGEpLCBNYXRoLnNxcnQoMSAtIGEpKTtcclxuICAgICAgICAgICAgICAgIHZhciBkID0gUiAqIGM7IC8vIERpc3RhbmNlIGluIGttXHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQ7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGRlZzJyYWQ6IGZ1bmN0aW9uIChkZWcpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBkZWcgKiAoTWF0aC5QSSAvIDE4MClcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZW5jb2RlR2VvaGFzaDogZnVuY3Rpb24gKGxhdGl0dWRlLCBsb25naXR1ZGUsIHByZWNpc2lvbiA9IDEyKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBCSVRTID0gWzE2LCA4LCA0LCAyLCAxXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IEJBU0UzMiA9IFwiMDEyMzQ1Njc4OWJjZGVmZ2hqa21ucHFyc3R1dnd4eXpcIjtcclxuICAgICAgICAgICAgICAgIHZhciBpc19ldmVuID0gMTtcclxuICAgICAgICAgICAgICAgIHZhciBsYXQgPSBbXTtcclxuICAgICAgICAgICAgICAgIHZhciBsb24gPSBbXTtcclxuICAgICAgICAgICAgICAgIHZhciBiaXQgPSAwO1xyXG4gICAgICAgICAgICAgICAgdmFyIGNoID0gMDtcclxuICAgICAgICAgICAgICAgIGxldCBnZW9oYXNoID0gXCJcIjtcclxuXHJcbiAgICAgICAgICAgICAgICBsYXRbMF0gPSAtOTAuMDsgbGF0WzFdID0gOTAuMDtcclxuICAgICAgICAgICAgICAgIGxvblswXSA9IC0xODAuMDsgbG9uWzFdID0gMTgwLjA7XHJcblxyXG4gICAgICAgICAgICAgICAgd2hpbGUgKGdlb2hhc2gubGVuZ3RoIDwgcHJlY2lzaW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzX2V2ZW4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWlkID0gKGxvblswXSArIGxvblsxXSkgLyAyO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxvbmdpdHVkZSA+IG1pZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2ggfD0gQklUU1tiaXRdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9uWzBdID0gbWlkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvblsxXSA9IG1pZDtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtaWQgPSAobGF0WzBdICsgbGF0WzFdKSAvIDI7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobGF0aXR1ZGUgPiBtaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoIHw9IEJJVFNbYml0XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhdFswXSA9IG1pZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXRbMV0gPSBtaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpc19ldmVuID0gIWlzX2V2ZW47XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChiaXQgPCA0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJpdCsrO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdlb2hhc2ggKz0gQkFTRTMyW2NoXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYml0ID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2ggPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2VvaGFzaDtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZGVjb2RlR2VvaGFzaDogZnVuY3Rpb24gKGdlb2hhc2gpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IEJJVFMgPSBbMTYsIDgsIDQsIDIsIDFdO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgQkFTRTMyID0gXCIwMTIzNDU2Nzg5YmNkZWZnaGprbW5wcXJzdHV2d3h5elwiO1xyXG4gICAgICAgICAgICAgICAgdmFyIGlzX2V2ZW4gPSAxO1xyXG4gICAgICAgICAgICAgICAgdmFyIGxhdCA9IFtdO1xyXG4gICAgICAgICAgICAgICAgdmFyIGxvbiA9IFtdO1xyXG4gICAgICAgICAgICAgICAgdmFyIGxhdF9lcnIgPSA5MC4wO1xyXG4gICAgICAgICAgICAgICAgdmFyIGxvbl9lcnIgPSAxODAuMDtcclxuXHJcbiAgICAgICAgICAgICAgICBsYXRbMF0gPSAtOTAuMDtcclxuICAgICAgICAgICAgICAgIGxhdFsxXSA9IDkwLjA7XHJcbiAgICAgICAgICAgICAgICBsb25bMF0gPSAtMTgwLjA7XHJcbiAgICAgICAgICAgICAgICBsb25bMV0gPSAxODAuMDtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGdlb2hhc2gubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgYyA9IGdlb2hhc2hbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNkID0gQkFTRTMyLmluZGV4T2YoYyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgNTsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1hc2sgPSBCSVRTW2pdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzX2V2ZW4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvbl9lcnIgLz0gMjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2QgJiBtYXNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9uWzBdID0gKGxvblswXSArIGxvblsxXSkgLyAyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb25bMV0gPSAobG9uWzBdICsgbG9uWzFdKSAvIDI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXRfZXJyIC89IDI7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNkICYgbWFzaykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhdFswXSA9IChsYXRbMF0gKyBsYXRbMV0pIC8gMjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF0WzFdID0gKGxhdFswXSArIGxhdFsxXSkgLyAyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpc19ldmVuID0gIWlzX2V2ZW47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGxhdFsyXSA9IChsYXRbMF0gKyBsYXRbMV0pIC8gMjtcclxuICAgICAgICAgICAgICAgIGxvblsyXSA9IChsb25bMF0gKyBsb25bMV0pIC8gMjtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGxhdGl0dWRlOiBsYXRbMl0sXHJcbiAgICAgICAgICAgICAgICAgICAgbG9uZ2l0dWRlOiBsb25bMl0sXHJcbiAgICAgICAgICAgICAgICAgICAgdG9wbGVmdDogeyBsYXRpdHVkZTogbGF0WzBdLCBsb25naXR1ZGU6IGxvblswXSB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHRvcHJpZ2h0OiB7IGxhdGl0dWRlOiBsYXRbMV0sIGxvbmdpdHVkZTogbG9uWzBdIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgYm90dG9tcmlnaHQ6IHsgbGF0aXR1ZGU6IGxhdFsxXSwgbG9uZ2l0dWRlOiBsb25bMV0gfSxcclxuICAgICAgICAgICAgICAgICAgICBib3R0b21sZWZ0OiB7IGxhdGl0dWRlOiBsYXRbMF0sIGxvbmdpdHVkZTogbG9uWzFdIH1cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdldE5laWdoYm9yczogZnVuY3Rpb24gKGdlb2hhc2gpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJpZ2h0R2VvaGFzaCA9IHRoaXMuY2FsY3VsYXRlQWRqYWNlbnQoZ2VvaGFzaCwgJ3JpZ2h0Jyk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBsZWZ0R2VvaGFzaCA9IHRoaXMuY2FsY3VsYXRlQWRqYWNlbnQoZ2VvaGFzaCwgJ2xlZnQnKTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRvcDogdGhpcy5jYWxjdWxhdGVBZGphY2VudChnZW9oYXNoLCAndG9wJyksXHJcbiAgICAgICAgICAgICAgICAgICAgYm90dG9tOiB0aGlzLmNhbGN1bGF0ZUFkamFjZW50KGdlb2hhc2gsICdib3R0b20nKSxcclxuICAgICAgICAgICAgICAgICAgICByaWdodDogcmlnaHRHZW9oYXNoLFxyXG4gICAgICAgICAgICAgICAgICAgIGxlZnQ6IGxlZnRHZW9oYXNoLFxyXG4gICAgICAgICAgICAgICAgICAgIHRvcGxlZnQ6IHRoaXMuY2FsY3VsYXRlQWRqYWNlbnQobGVmdEdlb2hhc2gsICd0b3AnKSxcclxuICAgICAgICAgICAgICAgICAgICB0b3ByaWdodDogdGhpcy5jYWxjdWxhdGVBZGphY2VudChyaWdodEdlb2hhc2gsICd0b3AnKSxcclxuICAgICAgICAgICAgICAgICAgICBib3R0b21yaWdodDogdGhpcy5jYWxjdWxhdGVBZGphY2VudChyaWdodEdlb2hhc2gsICdib3R0b20nKSxcclxuICAgICAgICAgICAgICAgICAgICBib3R0b21sZWZ0OiB0aGlzLmNhbGN1bGF0ZUFkamFjZW50KGxlZnRHZW9oYXNoLCAnYm90dG9tJylcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGNhbGN1bGF0ZUFkamFjZW50OiBmdW5jdGlvbiAoc3JjSGFzaCwgZGlyKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBCQVNFMzIgPSBcIjAxMjM0NTY3ODliY2RlZmdoamttbnBxcnN0dXZ3eHl6XCI7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBORUlHSEJPUlMgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmlnaHQ6IHsgZXZlbjogXCJiYzAxZmc0NTIzODk2N2RldXZoanl6bnBrbXN0cXJ3eFwiIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgbGVmdDogeyBldmVuOiBcIjIzODk2N2RlYmMwMWZnNDVrbXN0cXJ3eHV2aGp5em5wXCIgfSxcclxuICAgICAgICAgICAgICAgICAgICB0b3A6IHsgZXZlbjogXCJwMHIyMTQzNng4emI5ZGNmNWg3a2pubXFlc2d1dHd2eVwiIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgYm90dG9tOiB7IGV2ZW46IFwiMTQzNjVoN2s5ZGNmZXNndWpubXFwMHIydHd2eXg4emJcIiB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgQk9SREVSUyA9IHtcclxuICAgICAgICAgICAgICAgICAgICByaWdodDogeyBldmVuOiBcImJjZmd1dnl6XCIgfSxcclxuICAgICAgICAgICAgICAgICAgICBsZWZ0OiB7IGV2ZW46IFwiMDE0NWhqbnBcIiB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHRvcDogeyBldmVuOiBcInByeHpcIiB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGJvdHRvbTogeyBldmVuOiBcIjAyOGJcIiB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIE5FSUdIQk9SUy5ib3R0b20ub2RkID0gTkVJR0hCT1JTLmxlZnQuZXZlbjtcclxuICAgICAgICAgICAgICAgIE5FSUdIQk9SUy50b3Aub2RkID0gTkVJR0hCT1JTLnJpZ2h0LmV2ZW47XHJcbiAgICAgICAgICAgICAgICBORUlHSEJPUlMubGVmdC5vZGQgPSBORUlHSEJPUlMuYm90dG9tLmV2ZW47XHJcbiAgICAgICAgICAgICAgICBORUlHSEJPUlMucmlnaHQub2RkID0gTkVJR0hCT1JTLnRvcC5ldmVuO1xyXG5cclxuICAgICAgICAgICAgICAgIEJPUkRFUlMuYm90dG9tLm9kZCA9IEJPUkRFUlMubGVmdC5ldmVuO1xyXG4gICAgICAgICAgICAgICAgQk9SREVSUy50b3Aub2RkID0gQk9SREVSUy5yaWdodC5ldmVuO1xyXG4gICAgICAgICAgICAgICAgQk9SREVSUy5sZWZ0Lm9kZCA9IEJPUkRFUlMuYm90dG9tLmV2ZW47XHJcbiAgICAgICAgICAgICAgICBCT1JERVJTLnJpZ2h0Lm9kZCA9IEJPUkRFUlMudG9wLmV2ZW47XHJcblxyXG4gICAgICAgICAgICAgICAgc3JjSGFzaCA9IHNyY0hhc2gudG9Mb3dlckNhc2UoKTtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgbGFzdENociA9IHNyY0hhc2guY2hhckF0KHNyY0hhc2gubGVuZ3RoIC0gMSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgdHlwZSA9IChzcmNIYXNoLmxlbmd0aCAlIDIpID8gJ29kZCcgOiAnZXZlbic7XHJcbiAgICAgICAgICAgICAgICB2YXIgYmFzZSA9IHNyY0hhc2guc3Vic3RyaW5nKDAsIHNyY0hhc2gubGVuZ3RoIC0gMSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKEJPUkRFUlNbZGlyXVt0eXBlXS5pbmRleE9mKGxhc3RDaHIpICE9IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYmFzZSA9IHRoaXMuY2FsY3VsYXRlQWRqYWNlbnQoYmFzZSwgZGlyKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYmFzZSArIEJBU0UzMltORUlHSEJPUlNbZGlyXVt0eXBlXS5pbmRleE9mKGxhc3RDaHIpXTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZ2VuZXJhdGVVdWlkOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vR29vZ2xlQ2hyb21lL2Nocm9tZS1wbGF0Zm9ybS1hbmFseXRpY3MvYmxvYi9tYXN0ZXIvc3JjL2ludGVybmFsL2lkZW50aWZpZXIuanNcclxuICAgICAgICAgICAgICAgIC8vIGNvbnN0IEZPUk1BVDogc3RyaW5nID0gXCJ4eHh4eHh4eC14eHh4LTR4eHgteXh4eC14eHh4eHh4eHh4eHhcIjtcclxuICAgICAgICAgICAgICAgIGxldCBjaGFycyA9IFwieHh4eHh4eHgteHh4eC00eHh4LXl4eHgteHh4eHh4eHh4eHh4XCIuc3BsaXQoXCJcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGNoYXJzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChjaGFyc1tpXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwieFwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnNbaV0gPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxNikudG9TdHJpbmcoMTYpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJ5XCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFyc1tpXSA9IChNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiA0KSArIDgpLnRvU3RyaW5nKDE2KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY2hhcnMuam9pbihcIlwiKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgcHJlcGFyZTogZnVuY3Rpb24gKHNlcXVlbmNlcywgc3RhdGUgPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBfcmFuZG9tKG1pbiwgbWF4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWluID0gTWF0aC5jZWlsKG1pbik7XHJcbiAgICAgICAgICAgICAgICAgICAgbWF4ID0gTWF0aC5mbG9vcihtYXgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbikpICsgbWluO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGxldCBjaG9vc2VkU2VxdWVuY2VzID0gW107XHJcbiAgICAgICAgICAgICAgICBsZXQgZmxhdHRlbmVkU2VxdWVuY2UgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHMgb2Ygc2VxdWVuY2VzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGVtcFN0YXRlID0gc3RhdGU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGF0ZSA9PT0gbnVsbCAmJiBzLm5hbWUgaW4gdGhpcy5zdGF0ZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcFN0YXRlID0gdGhpcy5zdGF0ZXNbcy5uYW1lXTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ZW1wU3RhdGUgIT09IG51bGwgJiYgJ3N0YXRlJyBpbiBzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCByZWdleCA9IG5ldyBSZWdFeHAocy5zdGF0ZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXJlZ2V4LnRlc3QodGVtcFN0YXRlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNob29zZWRTZXF1ZW5jZXMucHVzaChzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY2hvb3NlZFNlcXVlbmNlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHF1ZXVlID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgcyBvZiBjaG9vc2VkU2VxdWVuY2VzW19yYW5kb20oMCwgY2hvb3NlZFNlcXVlbmNlcy5sZW5ndGgpXS5zZXF1ZW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGVzW3MubmFtZV0gPSBzdGF0ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcXVldWUucHVzaChzKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChxdWV1ZS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG9iaiA9IHF1ZXVlLnNoaWZ0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob2JqLnR5cGUgPT0gXCJTZXF1ZW5jZVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJ3NlcXVlbmNlJyBpbiBvYmogPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRyYWNlZFNlcXVlbmNlcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjYWxsYWJsZVNlcXVlbmNlcyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHMgb2YgdGhpcy5jaGFyYWN0ZXIuc2VxdWVuY2VzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzZXF1ZW5jZVN0YWNrID0gdGhpcy5nZXRTZXF1ZW5jZVN0YWNrKHMsIG9iaik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VxdWVuY2VTdGFjay5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgc3RhY2sgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkbyB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHBvcHBlZFNlcXVlbmNlID0gc2VxdWVuY2VTdGFjay5wb3AoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlcXVlbmNlU3RhY2subGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdGVtcFN0YWNrID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IG8gb2Ygc2VxdWVuY2VTdGFja1tzZXF1ZW5jZVN0YWNrLmxlbmd0aCAtIDFdLnNlcXVlbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoby50eXBlID09IFwiU2VxdWVuY2VcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgnc2VxdWVuY2UnIGluIG8pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGlzTmV3ID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdGVtcFNlcXVlbmNlIG9mIHN0YWNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGVtcFNlcXVlbmNlID09PSBvKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNOZXcgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc05ldykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcFN0YWNrLnB1c2gobyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvID09PSBwb3BwZWRTZXF1ZW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICh0ZW1wU3RhY2subGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhY2sucHVzaCh0ZW1wU3RhY2sucG9wKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJ3NlcXVlbmNlJyBpbiBwb3BwZWRTZXF1ZW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgaXNOZXcgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCB0ZW1wU2VxdWVuY2Ugb2Ygc3RhY2spIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0ZW1wU2VxdWVuY2UgPT09IHBvcHBlZFNlcXVlbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNOZXcgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc05ldykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhY2sucHVzaChwb3BwZWRTZXF1ZW5jZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IHdoaWxlIChzZXF1ZW5jZVN0YWNrLmxlbmd0aCA+IDApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChzdGFjay5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhY2VkU2VxdWVuY2VzLnB1c2goc3RhY2sucG9wKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhY2VkU2VxdWVuY2VzLnB1c2gocyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgnc3RhdGUnIGluIG9iaikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlc1tvYmoubmFtZV0gPSBvYmouc3RhdGU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHMgb2YgdHJhY2VkU2VxdWVuY2VzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocy5uYW1lID09IG9iai5uYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJlZ2V4ID0gbmV3IFJlZ0V4cChzLnN0YXRlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFyZWdleC50ZXN0KG9iai5zdGF0ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYWJsZVNlcXVlbmNlcy5wdXNoKHMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBzIG9mIHRyYWNlZFNlcXVlbmNlcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMubmFtZSA9PSBvYmoubmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgnc3RhdGUnIGluIHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMubmFtZSBpbiB0aGlzLnN0YXRlcyA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgcmVnZXggPSBuZXcgUmVnRXhwKHMuc3RhdGUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFyZWdleC50ZXN0KHRoaXMuc3RhdGVzW3MubmFtZV0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGFibGVTZXF1ZW5jZXMucHVzaChzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNhbGxhYmxlU2VxdWVuY2VzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGluZGV4ID0gMDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgbyBvZiBjYWxsYWJsZVNlcXVlbmNlc1tfcmFuZG9tKDAsIGNhbGxhYmxlU2VxdWVuY2VzLmxlbmd0aCldLnNlcXVlbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWV1ZS5zcGxpY2UoaW5kZXgsIDAsIG8pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXgrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZsYXR0ZW5lZFNlcXVlbmNlLnB1c2gob2JqKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmxhdHRlbmVkU2VxdWVuY2U7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdldFNlcXVlbmNlU3RhY2s6IGZ1bmN0aW9uIChzb3VyY2VTZXF1ZW5jZSwgdGFyZ2V0U2VxdWVuY2UpIHtcclxuICAgICAgICAgICAgICAgIGxldCBzZXF1ZW5jZVN0YWNrID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgc2VxdWVuY2VTdGFjay5wdXNoKHNvdXJjZVNlcXVlbmNlKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoc2VxdWVuY2VTdGFja1tzZXF1ZW5jZVN0YWNrLmxlbmd0aCAtIDFdICE9PSB0YXJnZXRTZXF1ZW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgnc2VxdWVuY2UnIGluIHNvdXJjZVNlcXVlbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgbyBvZiBzb3VyY2VTZXF1ZW5jZS5zZXF1ZW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG8udHlwZSA9PSBcIlNlcXVlbmNlXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgc3RhY2sgPSB0aGlzLmdldFNlcXVlbmNlU3RhY2sobywgdGFyZ2V0U2VxdWVuY2UpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RhY2subGVuZ3RoID4gMCAmJiBzdGFja1tzdGFjay5sZW5ndGggLSAxXSA9PT0gdGFyZ2V0U2VxdWVuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRlbXBTdGFjayA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG8ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcFN0YWNrLnB1c2goc3RhY2sucG9wKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IHdoaWxlIChzdGFjay5sZW5ndGggPiAwKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcXVlbmNlU3RhY2sucHVzaCh0ZW1wU3RhY2sucG9wKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IHdoaWxlICh0ZW1wU3RhY2subGVuZ3RoID4gMCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2VxdWVuY2VTdGFjaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHNlcXVlbmNlU3RhY2sucG9wKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlcXVlbmNlU3RhY2s7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIHVwZGF0ZWQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBjbGlwIG9mIGRvY3VtZW50LmJvZHkucXVlcnlTZWxlY3RvckFsbChcIiN0aWNrZXI+LmNvbHVtbnM+LmNvbHVtbj4uY29udHJvbCAuY2xpcFwiKSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IHdpZHRoID0gMDtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGVsZW1lbnQgb2YgY2xpcC5xdWVyeVNlbGVjdG9yQWxsKFwiOnNjb3BlIC50aWNrZXItd3JhcCAudGlja2VyIC5pdGVtXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2lkdGggKz0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAod2lkdGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50aWNrZXJXaWR0aCA9IE1hdGgubWluKHdpZHRoIC8gMiwgZG9jdW1lbnQuYm9keS5xdWVyeVNlbGVjdG9yKFwiI3RpY2tlcj4uY29sdW1ucz4uY29sdW1uPi5jb250cm9sIC5sZXZlbDpmaXJzdC1jaGlsZFwiKS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xpcC5xdWVyeVNlbGVjdG9yKFwiOnNjb3BlIC50aWNrZXItd3JhcCAudGlja2VyXCIpLnN0eWxlLndpZHRoID0gd2lkdGggKyAncHgnO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBtb3VudGVkOiBhc3luYyBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xyXG4gICAgICAgICAgICBjb25zdCBzdG9yYWdlSXRlbSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd3b25kZXJsYW5kJyk7XHJcbiAgICAgICAgICAgIGNvbnN0IGNyZWRlbnRpYWxTdG9yYWdlSXRlbSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdjcmVkZW50aWFsJyk7XHJcbiAgICAgICAgICAgIGxldCBjcmVkZW50aWFsID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgIGlmIChzdG9yYWdlSXRlbSkge1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBib3QgPSBKU09OLnBhcnNlKHN0b3JhZ2VJdGVtKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJvdCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlzTXV0ZWQgPSBib3QubXV0ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oJ2JvdCcpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoY3JlZGVudGlhbFN0b3JhZ2VJdGVtKSB7XHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNyZWRlbnRpYWwgPSBKU09OLnBhcnNlKGNyZWRlbnRpYWxTdG9yYWdlSXRlbSk7XHJcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oJ2NyZWRlbnRpYWwnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy4kcmVmcy5wbGF5ZXIuYWRkRXZlbnRMaXN0ZW5lcigncGxheScsIChldmVudCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgc2VsZi5pc1BsYXlpbmcgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChcImlkXCIgaW4gc2VsZi5wbGF5RGF0YSAmJiBzZWxmLnBsYXlEYXRhLmlkIGluIHNlbGYuc291bmRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKFwibmFtZVwiIGluIHNlbGYuc291bmRzW3NlbGYucGxheURhdGEuaWRdLnVzZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5ub3RpZnkoeyB0ZXh0OiBzZWxmLnNvdW5kc1tzZWxmLnBsYXlEYXRhLmlkXS51c2VyLm5hbWUsIGFjY2VudDogc2VsZi5jaGFyYWN0ZXIuYWNjZW50LCBpbWFnZTogXCJpbWFnZVwiIGluIHNlbGYuc291bmRzW3NlbGYucGxheURhdGEuaWRdLnVzZXIgPyBzZWxmLnNvdW5kc1tzZWxmLnBsYXlEYXRhLmlkXS51c2VyLnVzZXIgOiBudWxsIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YWJhc2UucmVmKGRhdGFiYXNlUm9vdCArIFwiL3NvdW5kcy9cIiArIHNlbGYuc291bmRzW3NlbGYucGxheURhdGEuaWRdLmlkICsgXCIvcGxheXNcIikudHJhbnNhY3Rpb24oZnVuY3Rpb24gKGNvdW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoY291bnQgfHwgMCkgKyAxO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdGhpcy4kcmVmcy5wbGF5ZXIuYWRkRXZlbnRMaXN0ZW5lcigncGF1c2UnLCAoZXZlbnQpID0+IHtcclxuICAgICAgICAgICAgICAgIHNlbGYuaXNQbGF5aW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBzZWxmLnRpbWVFbGFwc2VkID0gMDtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHRoaXMuJHJlZnMucGxheWVyLmFkZEV2ZW50TGlzdGVuZXIoJ2VuZGVkJywgKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5wbGF5YmFja1F1ZXVlLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLmZvcndhcmQoKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5pc1BsYXlpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLnRpbWVFbGFwc2VkID0gMDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHRoaXMuJHJlZnMucGxheWVyLmFkZEV2ZW50TGlzdGVuZXIoJ3RpbWV1cGRhdGUnLCAoZXZlbnQpID0+IHtcclxuICAgICAgICAgICAgICAgIHNlbGYudGltZUVsYXBzZWQgPSBzZWxmLiRyZWZzLnBsYXllci5jdXJyZW50VGltZTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLm1hcCA9IG5ldyBNaWNyb3NvZnQuTWFwcy5NYXAodGhpcy4kcmVmcy5tYXAsIHtcclxuICAgICAgICAgICAgICAgIG1hcFR5cGVJZDogTWljcm9zb2Z0Lk1hcHMuTWFwVHlwZUlkLmdyYXlzY2FsZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdGhpcy5tYXAuc2V0T3B0aW9ucyh7XHJcbiAgICAgICAgICAgICAgICBlbmFibGVIaWdoRHBpOiB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyA+IDEgPyB0cnVlIDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBzaG93TG9jYXRlTWVCdXR0b246IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgc2hvd01hcFR5cGVTZWxlY3RvcjogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBzaG93Wm9vbUJ1dHRvbnM6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgc2hvd1NjYWxlYmFyOiBmYWxzZVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMubGF5ZXIgPSBuZXcgTWljcm9zb2Z0Lk1hcHMuTGF5ZXIoKTtcclxuICAgICAgICAgICAgdGhpcy5sYXllci5zZXRWaXNpYmxlKGZhbHNlKTtcclxuICAgICAgICAgICAgdGhpcy5tYXAubGF5ZXJzLmluc2VydCh0aGlzLmxheWVyKTtcclxuXHJcbiAgICAgICAgICAgIE1pY3Jvc29mdC5NYXBzLkV2ZW50cy5hZGRIYW5kbGVyKHRoaXMubWFwLCAndmlld2NoYW5nZWVuZCcsICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChzZWxmLnVzZXIgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLnVwZGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKCcvYXNzZXRzL3dvbmRlcmxhbmQuanNvbicsIHtcclxuICAgICAgICAgICAgICAgICAgICBtb2RlOiBcImNvcnNcIixcclxuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IFwiR0VUXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLm9rKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGFyYWN0ZXIgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IocmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChjcmVkZW50aWFsICE9PSBudWxsICYmIGNyZWRlbnRpYWwucHJvdmlkZXJJZCA9PT0gXCJ0d2l0dGVyLmNvbVwiKSB7XHJcbiAgICAgICAgICAgICAgICBmaXJlYmFzZS5hdXRoKCkuc2lnbkluV2l0aENyZWRlbnRpYWwoZmlyZWJhc2UuYXV0aC5Ud2l0dGVyQXV0aFByb3ZpZGVyLmNyZWRlbnRpYWwoY3JlZGVudGlhbC5hY2Nlc3NUb2tlbiwgY3JlZGVudGlhbC5zZWNyZXQpKS5jYXRjaCgoZXJyb3IpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yLmNvZGUsIGVycm9yLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBmaXJlYmFzZS5hdXRoKCkuc2lnbkluQW5vbnltb3VzbHkoKS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yLmNvZGUsIGVycm9yLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZpcmViYXNlLmF1dGgoKS5vbkF1dGhTdGF0ZUNoYW5nZWQoYXN5bmMgZnVuY3Rpb24gKHVzZXIpIHtcclxuICAgICAgICAgICAgICAgIGlmICh1c2VyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gVXNlciBpcyBzaWduZWQgaW4uXHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi51c2VyID0gdXNlcjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc291bmRJZCA9IGRlY29kZVVSSUNvbXBvbmVudCh3aW5kb3cubG9jYXRpb24uaGFzaC5zdWJzdHJpbmcoMSkpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoc291bmRJZC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNuYXBzaG90ID0gYXdhaXQgZGF0YWJhc2UucmVmKGRhdGFiYXNlUm9vdCArIFwiL3NvdW5kcy9cIiArIHNvdW5kSWQpLm9uY2UoJ3ZhbHVlJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc25hcHNob3QuZXhpc3RzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNvdW5kID0gc25hcHNob3QudmFsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBob3VycyA9IG5ldyBEYXRlKHNvdW5kLnRpbWVzdGFtcCAqIDEwMDApLmdldEhvdXJzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgc291bmRLZXkgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIHNlbGYuc291bmRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNvdW5kSWQgPT09IHNlbGYuc291bmRzW2tleV0uaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291bmRLZXkgPSBrZXk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNvdW5kS2V5ID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaWNvblVybCA9IGhvdXJzID49IDYgJiYgaG91cnMgPCAxOCA/IFwiL2ltYWdlcy9NYXJrZXItTGlnaHQtU2VsZWN0ZWQuc3ZnXCIgOiBcIi9pbWFnZXMvTWFya2VyLURhcmstU2VsZWN0ZWQuc3ZnXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcHVzaHBpbiA9IG5ldyBNaWNyb3NvZnQuTWFwcy5QdXNocGluKG5ldyBNaWNyb3NvZnQuTWFwcy5Mb2NhdGlvbihzb3VuZC5sb2NhdGlvbi5sYXRpdHVkZSwgc291bmQubG9jYXRpb24ubG9uZ2l0dWRlKSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogXCJ0YWdzXCIgaW4gc291bmQgPyBzb3VuZC50YWdzLmpvaW4oXCIvXCIpIDogXCJcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogaWNvblVybFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnNldEltYWdlKHB1c2hwaW4sIGljb25VcmwsIHNvdW5kKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291bmRLZXkgPSBwdXNocGluLmlkO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnNvdW5kc1twdXNocGluLmlkXSA9IHNvdW5kO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc291bmRzW3B1c2hwaW4uaWRdW1wiaWRcIl0gPSBzb3VuZElkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc291bmRzW3B1c2hwaW4uaWRdW1wicHVzaHBpblwiXSA9IHB1c2hwaW47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zb3VuZHNbcHVzaHBpbi5pZF1bXCJoYW5kbGVyc1wiXSA9IFtNaWNyb3NvZnQuTWFwcy5FdmVudHMuYWRkSGFuZGxlcihwdXNocGluLCAnY2xpY2snLCBhc3luYyAoYXJncykgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBob3VycyA9IG5ldyBEYXRlKHNlbGYuc291bmRzW2FyZ3MudGFyZ2V0LmlkXS50aW1lc3RhbXAgKiAxMDAwKS5nZXRIb3VycygpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IHNlbGYucGxheWJhY2tRdWV1ZS5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFwiZ2VuZXJhdG9yXCIgaW4gc2VsZi5wbGF5YmFja1F1ZXVlW2ldKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5wbGF5YmFja1F1ZXVlLnNwbGljZShpLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGYucGxheURhdGEgIT09IG51bGwgJiYgXCJpZFwiIGluIHNlbGYucGxheURhdGEgJiYgc2VsZi5wbGF5RGF0YS5pZCBpbiBzZWxmLnNvdW5kcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaCA9IG5ldyBEYXRlKHNlbGYuc291bmRzW3NlbGYucGxheURhdGEuaWRdLnRpbWVzdGFtcCAqIDEwMDApLmdldEhvdXJzKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zZXRJbWFnZShzZWxmLnNvdW5kc1tzZWxmLnBsYXlEYXRhLmlkXS5wdXNocGluLCBoID49IDYgJiYgaCA8IDE4ID8gXCIvaW1hZ2VzL01hcmtlci1MaWdodC5zdmdcIiA6IFwiL2ltYWdlcy9NYXJrZXItRGFyay5zdmdcIiwgc2VsZi5zb3VuZHNbc2VsZi5wbGF5RGF0YS5pZF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXJncy50YXJnZXQuaWQgaW4gc2VsZi5zb3VuZHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc2V0SW1hZ2Uoc2VsZi5zb3VuZHNbYXJncy50YXJnZXQuaWRdLnB1c2hwaW4sIGhvdXJzID49IDYgJiYgaG91cnMgPCAxOCA/IFwiL2ltYWdlcy9NYXJrZXItTGlnaHQtU2VsZWN0ZWQuc3ZnXCIgOiBcIi9pbWFnZXMvTWFya2VyLURhcmstU2VsZWN0ZWQuc3ZnXCIsIHNlbGYuc291bmRzW2FyZ3MudGFyZ2V0LmlkXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5wbGF5RGF0YSA9IHsgaWQ6IGFyZ3MudGFyZ2V0LmlkLCB0eXBlOiBzZWxmLnNvdW5kc1thcmdzLnRhcmdldC5pZF0udHlwZSwgdXJsOiBhd2FpdCBzdG9yYWdlLnJlZigpLmNoaWxkKFwic291bmRzL1wiICsgc2VsZi5zb3VuZHNbYXJncy50YXJnZXQuaWRdLm5hbWUpLmdldERvd25sb2FkVVJMKCkgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLiRyZWZzLnBsYXllci5zcmMgPSBzZWxmLnBsYXlEYXRhLnVybDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLiRyZWZzLnBsYXllci5wbGF5KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksIE1pY3Jvc29mdC5NYXBzLkV2ZW50cy5hZGRIYW5kbGVyKHB1c2hwaW4sICdkYmxjbGljaycsIChhcmdzKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gc2VsZi5zb3VuZHNbYXJncy50YXJnZXQuaWRdLmlkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5tYXAuZW50aXRpZXMucHVzaChwdXNocGluKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zZXRJbWFnZShzZWxmLnNvdW5kc1tzb3VuZEtleV0ucHVzaHBpbiwgaG91cnMgPj0gNiAmJiBob3VycyA8IDE4ID8gXCIvaW1hZ2VzL01hcmtlci1MaWdodC1TZWxlY3RlZC5zdmdcIiA6IFwiL2ltYWdlcy9NYXJrZXItRGFyay1TZWxlY3RlZC5zdmdcIiwgc2VsZi5zb3VuZHNbc291bmRLZXldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnBsYXlEYXRhID0geyBpZDogc291bmRLZXksIHR5cGU6IHNvdW5kLnR5cGUsIHVybDogYXdhaXQgc3RvcmFnZS5yZWYoKS5jaGlsZChcInNvdW5kcy9cIiArIHNvdW5kLm5hbWUpLmdldERvd25sb2FkVVJMKCkgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuJHJlZnMucGxheWVyLnNyYyA9IHNlbGYucGxheURhdGEudXJsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5tYXAuc2V0Vmlldyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VudGVyOiBuZXcgTWljcm9zb2Z0Lk1hcHMuTG9jYXRpb24oc291bmQubG9jYXRpb24ubGF0aXR1ZGUsIHNvdW5kLmxvY2F0aW9uLmxvbmdpdHVkZSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgem9vbTogMTZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmF2aWdhdG9yLmdlb2xvY2F0aW9uLmdldEN1cnJlbnRQb3NpdGlvbigocG9zaXRpb24pID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubWFwLnNldFZpZXcoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbnRlcjogbmV3IE1pY3Jvc29mdC5NYXBzLkxvY2F0aW9uKHBvc2l0aW9uLmNvb3Jkcy5sYXRpdHVkZSwgcG9zaXRpb24uY29vcmRzLmxvbmdpdHVkZSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgem9vbTogc2VsZi5tYXAuZ2V0Wm9vbSgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgKGVycm9yKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnVwZGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5ub3RpZnkoeyB0ZXh0OiBlcnJvci5tZXNzYWdlLCBhY2NlbnQ6IHNlbGYuY2hhcmFjdGVyLmFjY2VudCwgaW1hZ2U6IHNlbGYuY2hhcmFjdGVyLmltYWdlIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuYWJsZUhpZ2hBY2N1cmFjeTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVvdXQ6IDUwMDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXhpbXVtQWdlOiAwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YWJhc2UucmVmKGRhdGFiYXNlUm9vdCArIFwiL3NvdW5kc1wiKS5vcmRlckJ5Q2hpbGQoXCJ0aW1lc3RhbXBcIikubGltaXRUb0xhc3QoMTAwKS5vbihcInZhbHVlXCIsIGFzeW5jIHNuYXBzaG90ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNuYXBzaG90LmV4aXN0cygpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzb3VuZHMgPSBzbmFwc2hvdC52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpc05ldyA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIHNvdW5kcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc2VsZi5yZWNlbnRTb3VuZHMuc29tZSh4ID0+IHguaWQgPT09IGtleSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNOZXcgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc05ldykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYucmVjZW50U291bmRzLnNwbGljZSgwKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gc291bmRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdW5kc1trZXldW1wiaWRcIl0gPSBrZXk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYucmVjZW50U291bmRzLnB1c2goc291bmRzW2tleV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGRhdGFiYXNlLnJlZihkYXRhYmFzZVJvb3QgKyBcIi9zdGFyc1wiKS5vbihcInZhbHVlXCIsIHNuYXBzaG90ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY291bnQgPSBzbmFwc2hvdC52YWwoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb3VudCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zdGFycyA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnN0YXJzID0gY291bnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gVXNlciBpcyBzaWduZWQgb3V0LlxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGFiYXNlLnJlZihkYXRhYmFzZVJvb3QgKyBcIi9zb3VuZHNcIikub2ZmKFwidmFsdWVcIilcclxuICAgICAgICAgICAgICAgICAgICBkYXRhYmFzZS5yZWYoZGF0YWJhc2VSb290ICsgXCIvc3RhcnNcIikub2ZmKFwidmFsdWVcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYudXNlciA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH0pLm1vdW50KCcjYXBwJyk7XHJcblxyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIChldmVudCkgPT4ge1xyXG4gICAgICAgIC8qICAgIGxldCBjb250YWluZXIgPSBhcHAuJHJlZnMuY29udGFpbmVyO1xyXG4gICAgICAgICAgICBsZXQgcG9wdXAgPSBkb2N1bWVudC5ib2R5LnF1ZXJ5U2VsZWN0b3IoXCIubmF2YmFyOm50aC1vZi10eXBlKDIpIC5uYXZiYXItaXRlbSAuY29udHJvbDpsYXN0LWNoaWxkIC5sZXZlbDpudGgtbGFzdC1vZi10eXBlKDEpXCIpO1xyXG4gICAgICAgIFxyXG4gICAgICAgICAgICBjb250YWluZXIuc3R5bGUucGFkZGluZ1RvcCA9IGFwcC4kcmVmcy5pbmRpY2F0b3IuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0ICsgJ3B4J1xyXG4gICAgICAgICAgICBjb250YWluZXIuc3R5bGUucGFkZGluZ0JvdHRvbSA9IGFwcC4kcmVmcy5pbnB1dC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQgKyAncHgnXHJcbiAgICAgICAgKi9cclxuICAgICAgICAvL2FwcC4kcmVmcy50aWNrZXIuc3R5bGUud2lkdGggPSBkb2N1bWVudC5ib2R5LnF1ZXJ5U2VsZWN0b3IoXCIjaW5wdXQgLmNvbHVtbnM+LmNvbHVtbiAuY29udHJvbDpudGgtbGFzdC1vZi10eXBlKDEpIC5sZXZlbDpudGgtbGFzdC1vZi10eXBlKDEpIGZvcm1cIikuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggKyAncHgnO1xyXG5cclxuICAgICAgICAvKmlmIChwb3B1cCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBwb3B1cC5zdHlsZS5wYWRkaW5nQm90dG9tID0gY29udGFpbmVyLnN0eWxlLnBhZGRpbmdCb3R0b207XHJcbiAgICAgICAgfSovXHJcblxyXG4gICAgICAgIGFwcC4kbmV4dFRpY2soKCkgPT4ge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGNsaXAgb2YgZG9jdW1lbnQuYm9keS5xdWVyeVNlbGVjdG9yQWxsKFwiI3RpY2tlcj4uY29sdW1ucz4uY29sdW1uPi5jb250cm9sIC5jbGlwXCIpKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgd2lkdGggPSAwO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZWxlbWVudCBvZiBjbGlwLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6c2NvcGUgLnRpY2tlci13cmFwIC50aWNrZXIgLml0ZW1cIikpIHtcclxuICAgICAgICAgICAgICAgICAgICB3aWR0aCArPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICh3aWR0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBhcHAudGlja2VyV2lkdGggPSBNYXRoLm1pbih3aWR0aCAvIDIsIGRvY3VtZW50LmJvZHkucXVlcnlTZWxlY3RvcihcIiN0aWNrZXI+LmNvbHVtbnM+LmNvbHVtbj4uY29udHJvbCAubGV2ZWw6Zmlyc3QtY2hpbGRcIikuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNsaXAucXVlcnlTZWxlY3RvcihcIjpzY29wZSAudGlja2VyLXdyYXAgLnRpY2tlclwiKS5zdHlsZS53aWR0aCA9IHdpZHRoICsgJ3B4JztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvKmxldCB3aWR0aCA9IDA7XHJcblxyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGVsZW1lbnQgb2YgZG9jdW1lbnQuYm9keS5xdWVyeVNlbGVjdG9yQWxsKFwiLmNvbHVtbnMgLmNvbHVtbiAudGlja2VyLXdyYXAgLnRpY2tlciAuaXRlbVwiKSkge1xyXG4gICAgICAgICAgICAgICAgd2lkdGggKz0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5xdWVyeVNlbGVjdG9yKFwiLmNvbHVtbnMgLmNvbHVtbiAuY2xpcFwiKS5zdHlsZS53aWR0aCA9IE1hdGgubWluKHdpZHRoIC8gMiwgZG9jdW1lbnQuYm9keS5xdWVyeVNlbGVjdG9yKFwiI2lucHV0Pi5jb2x1bW5zOmxhc3Qtb2YtdHlwZT4uY29sdW1uPi5jb250cm9sIC5sZXZlbDpmaXJzdC1jaGlsZFwiKS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCkgKyAncHgnO1xyXG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LnF1ZXJ5U2VsZWN0b3IoXCIuY29sdW1ucyAuY29sdW1uIC50aWNrZXItd3JhcCAudGlja2VyXCIpLnN0eWxlLndpZHRoID0gd2lkdGggKyAncHgnOyovXHJcbiAgICAgICAgICAgIC8qZG9jdW1lbnQuYm9keS5xdWVyeVNlbGVjdG9yKFwiLmNvbHVtbnMgLmNvbHVtbiAudGlja2VyLXdyYXAgLnRpY2tlclwiKS5hbmltYXRlKFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IFwidHJhbnNsYXRlM2QoMCwgMCwgMClcIlxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IFwidHJhbnNsYXRlM2QoLVwiICsgd2lkdGggLyAyICsgXCJweCwgMCwgMClcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLCB7XHJcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogMzAgKiAxMDAwLFxyXG4gICAgICAgICAgICAgICAgaXRlcmF0aW9uczogSW5maW5pdHlcclxuICAgICAgICAgICAgfSk7Ki9cclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgd2luZG93Lm1hdGNoTWVkaWEoJyhwcmVmZXJzLWNvbG9yLXNjaGVtZTogZGFyayknKS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBlID0+IHtcclxuICAgICAgICBpZiAoZS5tYXRjaGVzKSB7XHJcbiAgICAgICAgICAgIGFwcC5pc0RhcmtNb2RlID0gdHJ1ZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBhcHAuaXNEYXJrTW9kZSA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59KTsiXSwic291cmNlUm9vdCI6IiJ9