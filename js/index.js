!function(e){var t={};function n(a){if(t[a])return t[a].exports;var r=t[a]={i:a,l:!1,exports:{}};return e[a].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,a){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(n.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(a,r,function(t){return e[t]}.bind(null,r));return a},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/js",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);var a={update:null,begin:null,loopBegin:null,changeBegin:null,change:null,changeComplete:null,loopComplete:null,complete:null,loop:1,direction:"normal",autoplay:!0,timelineOffset:0},r={duration:1e3,delay:0,endDelay:0,easing:"easeOutElastic(1, .5)",round:0},i=["translateX","translateY","translateZ","rotate","rotateX","rotateY","rotateZ","scale","scaleX","scaleY","scaleZ","skew","skewX","skewY","perspective","matrix","matrix3d"],o={CSS:{},springs:{}};function s(e,t,n){return Math.min(Math.max(e,t),n)}function c(e,t){return e.indexOf(t)>-1}function l(e,t){return e.apply(null,t)}var u={arr:function(e){return Array.isArray(e)},obj:function(e){return c(Object.prototype.toString.call(e),"Object")},pth:function(e){return u.obj(e)&&e.hasOwnProperty("totalLength")},svg:function(e){return e instanceof SVGElement},inp:function(e){return e instanceof HTMLInputElement},dom:function(e){return e.nodeType||u.svg(e)},str:function(e){return"string"==typeof e},fnc:function(e){return"function"==typeof e},und:function(e){return void 0===e},nil:function(e){return u.und(e)||null===e},hex:function(e){return/(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(e)},rgb:function(e){return/^rgb/.test(e)},hsl:function(e){return/^hsl/.test(e)},col:function(e){return u.hex(e)||u.rgb(e)||u.hsl(e)},key:function(e){return!a.hasOwnProperty(e)&&!r.hasOwnProperty(e)&&"targets"!==e&&"keyframes"!==e}};function d(e){var t=/\(([^)]+)\)/.exec(e);return t?t[1].split(",").map((function(e){return parseFloat(e)})):[]}function h(e,t){var n=d(e),a=s(u.und(n[0])?1:n[0],.1,100),r=s(u.und(n[1])?100:n[1],.1,100),i=s(u.und(n[2])?10:n[2],.1,100),c=s(u.und(n[3])?0:n[3],.1,100),l=Math.sqrt(r/a),h=i/(2*Math.sqrt(r*a)),p=h<1?l*Math.sqrt(1-h*h):0,f=h<1?(h*l-c)/p:-c+l;function g(e){var n=t?t*e/1e3:e;return n=h<1?Math.exp(-n*h*l)*(1*Math.cos(p*n)+f*Math.sin(p*n)):(1+f*n)*Math.exp(-n*l),0===e||1===e?e:1-n}return t?g:function(){var t=o.springs[e];if(t)return t;for(var n=0,a=0;;)if(1===g(n+=1/6)){if(++a>=16)break}else a=0;var r=n*(1/6)*1e3;return o.springs[e]=r,r}}function p(e){return void 0===e&&(e=10),function(t){return Math.ceil(s(t,1e-6,1)*e)*(1/e)}}var f,g,m=function(){function e(e,t){return 1-3*t+3*e}function t(e,t){return 3*t-6*e}function n(e){return 3*e}function a(a,r,i){return((e(r,i)*a+t(r,i))*a+n(r))*a}function r(a,r,i){return 3*e(r,i)*a*a+2*t(r,i)*a+n(r)}return function(e,t,n,i){if(0<=e&&e<=1&&0<=n&&n<=1){var o=new Float32Array(11);if(e!==t||n!==i)for(var s=0;s<11;++s)o[s]=a(.1*s,e,n);return function(r){return e===t&&n===i||0===r||1===r?r:a(c(r),t,i)}}function c(t){for(var i=0,s=1;10!==s&&o[s]<=t;++s)i+=.1;--s;var c=i+.1*((t-o[s])/(o[s+1]-o[s])),l=r(c,e,n);return l>=.001?function(e,t,n,i){for(var o=0;o<4;++o){var s=r(t,n,i);if(0===s)return t;t-=(a(t,n,i)-e)/s}return t}(t,c,e,n):0===l?c:function(e,t,n,r,i){var o,s,c=0;do{(o=a(s=t+(n-t)/2,r,i)-e)>0?n=s:t=s}while(Math.abs(o)>1e-7&&++c<10);return s}(t,i,i+.1,e,n)}}}(),y=(f={linear:function(){return function(e){return e}}},g={Sine:function(){return function(e){return 1-Math.cos(e*Math.PI/2)}},Circ:function(){return function(e){return 1-Math.sqrt(1-e*e)}},Back:function(){return function(e){return e*e*(3*e-2)}},Bounce:function(){return function(e){for(var t,n=4;e<((t=Math.pow(2,--n))-1)/11;);return 1/Math.pow(4,3-n)-7.5625*Math.pow((3*t-2)/22-e,2)}},Elastic:function(e,t){void 0===e&&(e=1),void 0===t&&(t=.5);var n=s(e,1,10),a=s(t,.1,2);return function(e){return 0===e||1===e?e:-n*Math.pow(2,10*(e-1))*Math.sin((e-1-a/(2*Math.PI)*Math.asin(1/n))*(2*Math.PI)/a)}}},["Quad","Cubic","Quart","Quint","Expo"].forEach((function(e,t){g[e]=function(){return function(e){return Math.pow(e,t+2)}}})),Object.keys(g).forEach((function(e){var t=g[e];f["easeIn"+e]=t,f["easeOut"+e]=function(e,n){return function(a){return 1-t(e,n)(1-a)}},f["easeInOut"+e]=function(e,n){return function(a){return a<.5?t(e,n)(2*a)/2:1-t(e,n)(-2*a+2)/2}},f["easeOutIn"+e]=function(e,n){return function(a){return a<.5?(1-t(e,n)(1-2*a))/2:(t(e,n)(2*a-1)+1)/2}}})),f);function v(e,t){if(u.fnc(e))return e;var n=e.split("(")[0],a=y[n],r=d(e);switch(n){case"spring":return h(e,t);case"cubicBezier":return l(m,r);case"steps":return l(p,r);default:return l(a,r)}}function w(e){try{return document.querySelectorAll(e)}catch(e){return}}function b(e,t){for(var n=e.length,a=arguments.length>=2?arguments[1]:void 0,r=[],i=0;i<n;i++)if(i in e){var o=e[i];t.call(a,o,i,e)&&r.push(o)}return r}function k(e){return e.reduce((function(e,t){return e.concat(u.arr(t)?k(t):t)}),[])}function M(e){return u.arr(e)?e:(u.str(e)&&(e=w(e)||e),e instanceof NodeList||e instanceof HTMLCollection?[].slice.call(e):[e])}function x(e,t){return e.some((function(e){return e===t}))}function D(e){var t={};for(var n in e)t[n]=e[n];return t}function L(e,t){var n=D(e);for(var a in e)n[a]=t.hasOwnProperty(a)?t[a]:e[a];return n}function I(e,t){var n=D(e);for(var a in t)n[a]=u.und(e[a])?t[a]:e[a];return n}function S(e){return u.rgb(e)?(n=/rgb\((\d+,\s*[\d]+,\s*[\d]+)\)/g.exec(t=e))?"rgba("+n[1]+",1)":t:u.hex(e)?function(e){var t=e.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i,(function(e,t,n,a){return t+t+n+n+a+a})),n=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(t);return"rgba("+parseInt(n[1],16)+","+parseInt(n[2],16)+","+parseInt(n[3],16)+",1)"}(e):u.hsl(e)?function(e){var t,n,a,r=/hsl\((\d+),\s*([\d.]+)%,\s*([\d.]+)%\)/g.exec(e)||/hsla\((\d+),\s*([\d.]+)%,\s*([\d.]+)%,\s*([\d.]+)\)/g.exec(e),i=parseInt(r[1],10)/360,o=parseInt(r[2],10)/100,s=parseInt(r[3],10)/100,c=r[4]||1;function l(e,t,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?e+6*(t-e)*n:n<.5?t:n<2/3?e+(t-e)*(2/3-n)*6:e}if(0==o)t=n=a=s;else{var u=s<.5?s*(1+o):s+o-s*o,d=2*s-u;t=l(d,u,i+1/3),n=l(d,u,i),a=l(d,u,i-1/3)}return"rgba("+255*t+","+255*n+","+255*a+","+c+")"}(e):void 0;var t,n}function R(e){var t=/[+-]?\d*\.?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?(%|px|pt|em|rem|in|cm|mm|ex|ch|pc|vw|vh|vmin|vmax|deg|rad|turn)?$/.exec(e);if(t)return t[1]}function P(e,t){return u.fnc(e)?e(t.target,t.id,t.total):e}function T(e,t){return e.getAttribute(t)}function C(e,t,n){if(x([n,"deg","rad","turn"],R(t)))return t;var a=o.CSS[t+n];if(!u.und(a))return a;var r=document.createElement(e.tagName),i=e.parentNode&&e.parentNode!==document?e.parentNode:document.body;i.appendChild(r),r.style.position="absolute",r.style.width=100+n;var s=100/r.offsetWidth;i.removeChild(r);var c=s*parseFloat(t);return o.CSS[t+n]=c,c}function E(e,t,n){if(t in e.style){var a=t.replace(/([a-z])([A-Z])/g,"$1-$2").toLowerCase(),r=e.style[t]||getComputedStyle(e).getPropertyValue(a)||"0";return n?C(e,r,n):r}}function A(e,t){return u.dom(e)&&!u.inp(e)&&(!u.nil(T(e,t))||u.svg(e)&&e[t])?"attribute":u.dom(e)&&x(i,t)?"transform":u.dom(e)&&"transform"!==t&&E(e,t)?"css":null!=e[t]?"object":void 0}function O(e){if(u.dom(e)){for(var t,n=e.style.transform||"",a=/(\w+)\(([^)]*)\)/g,r=new Map;t=a.exec(n);)r.set(t[1],t[2]);return r}}function j(e,t,n,a){var r=c(t,"scale")?1:0+function(e){return c(e,"translate")||"perspective"===e?"px":c(e,"rotate")||c(e,"skew")?"deg":void 0}(t),i=O(e).get(t)||r;return n&&(n.transforms.list.set(t,i),n.transforms.last=t),a?C(e,i,a):i}function q(e,t,n,a){switch(A(e,t)){case"transform":return j(e,t,a,n);case"css":return E(e,t,n);case"attribute":return T(e,t);default:return e[t]||0}}function U(e,t){var n=/^(\*=|\+=|-=)/.exec(e);if(!n)return e;var a=R(e)||0,r=parseFloat(t),i=parseFloat(e.replace(n[0],""));switch(n[0][0]){case"+":return r+i+a;case"-":return r-i+a;case"*":return r*i+a}}function H(e,t){if(u.col(e))return S(e);if(/\s/g.test(e))return e;var n=R(e),a=n?e.substr(0,e.length-n.length):e;return t?a+t:a}function B(e,t){return Math.sqrt(Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2))}function $(e){for(var t,n=e.points,a=0,r=0;r<n.numberOfItems;r++){var i=n.getItem(r);r>0&&(a+=B(t,i)),t=i}return a}function Q(e){if(e.getTotalLength)return e.getTotalLength();switch(e.tagName.toLowerCase()){case"circle":return function(e){return 2*Math.PI*T(e,"r")}(e);case"rect":return function(e){return 2*T(e,"width")+2*T(e,"height")}(e);case"line":return function(e){return B({x:T(e,"x1"),y:T(e,"y1")},{x:T(e,"x2"),y:T(e,"y2")})}(e);case"polyline":return $(e);case"polygon":return function(e){var t=e.points;return $(e)+B(t.getItem(t.numberOfItems-1),t.getItem(0))}(e)}}function W(e,t){var n=t||{},a=n.el||function(e){for(var t=e.parentNode;u.svg(t)&&u.svg(t.parentNode);)t=t.parentNode;return t}(e),r=a.getBoundingClientRect(),i=T(a,"viewBox"),o=r.width,s=r.height,c=n.viewBox||(i?i.split(" "):[0,0,o,s]);return{el:a,viewBox:c,x:c[0]/1,y:c[1]/1,w:o,h:s,vW:c[2],vH:c[3]}}function G(e,t,n){function a(n){void 0===n&&(n=0);var a=t+n>=1?t+n:0;return e.el.getPointAtLength(a)}var r=W(e.el,e.svg),i=a(),o=a(-1),s=a(1),c=n?1:r.w/r.vW,l=n?1:r.h/r.vH;switch(e.property){case"x":return(i.x-r.x)*c;case"y":return(i.y-r.y)*l;case"angle":return 180*Math.atan2(s.y-o.y,s.x-o.x)/Math.PI}}function N(e,t){var n=/[+-]?\d*\.?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?/g,a=H(u.pth(e)?e.totalLength:e,t)+"";return{original:a,numbers:a.match(n)?a.match(n).map(Number):[0],strings:u.str(e)||t?a.split(n):[]}}function F(e){return b(e?k(u.arr(e)?e.map(M):M(e)):[],(function(e,t,n){return n.indexOf(e)===t}))}function V(e){var t=F(e);return t.map((function(e,n){return{target:e,id:n,total:t.length,transforms:{list:O(e)}}}))}function _(e,t){var n=D(t);if(/^spring/.test(n.easing)&&(n.duration=h(n.easing)),u.arr(e)){var a=e.length;2===a&&!u.obj(e[0])?e={value:e}:u.fnc(t.duration)||(n.duration=t.duration/a)}var r=u.arr(e)?e:[e];return r.map((function(e,n){var a=u.obj(e)&&!u.pth(e)?e:{value:e};return u.und(a.delay)&&(a.delay=n?0:t.delay),u.und(a.endDelay)&&(a.endDelay=n===r.length-1?t.endDelay:0),a})).map((function(e){return I(e,n)}))}function z(e,t){var n=[],a=t.keyframes;for(var r in a&&(t=I(function(e){for(var t=b(k(e.map((function(e){return Object.keys(e)}))),(function(e){return u.key(e)})).reduce((function(e,t){return e.indexOf(t)<0&&e.push(t),e}),[]),n={},a=function(a){var r=t[a];n[r]=e.map((function(e){var t={};for(var n in e)u.key(n)?n==r&&(t.value=e[n]):t[n]=e[n];return t}))},r=0;r<t.length;r++)a(r);return n}(a),t)),t)u.key(r)&&n.push({name:r,tweens:_(t[r],e)});return n}function J(e,t){var n;return e.tweens.map((function(a){var r=function(e,t){var n={};for(var a in e){var r=P(e[a],t);u.arr(r)&&1===(r=r.map((function(e){return P(e,t)}))).length&&(r=r[0]),n[a]=r}return n.duration=parseFloat(n.duration),n.delay=parseFloat(n.delay),n}(a,t),i=r.value,o=u.arr(i)?i[1]:i,s=R(o),c=q(t.target,e.name,s,t),l=n?n.to.original:c,d=u.arr(i)?i[0]:l,h=R(d)||R(c),p=s||h;return u.und(o)&&(o=l),r.from=N(d,p),r.to=N(U(o,d),p),r.start=n?n.end:0,r.end=r.start+r.delay+r.duration+r.endDelay,r.easing=v(r.easing,r.duration),r.isPath=u.pth(i),r.isPathTargetInsideSVG=r.isPath&&u.svg(t.target),r.isColor=u.col(r.from.original),r.isColor&&(r.round=1),n=r,r}))}var Z={css:function(e,t,n){return e.style[t]=n},attribute:function(e,t,n){return e.setAttribute(t,n)},object:function(e,t,n){return e[t]=n},transform:function(e,t,n,a,r){if(a.list.set(t,n),t===a.last||r){var i="";a.list.forEach((function(e,t){i+=t+"("+e+") "})),e.style.transform=i}}};function X(e,t){V(e).forEach((function(e){for(var n in t){var a=P(t[n],e),r=e.target,i=R(a),o=q(r,n,i,e),s=U(H(a,i||R(o)),o),c=A(r,n);Z[c](r,n,s,e.transforms,!0)}}))}function Y(e,t){return b(k(e.map((function(e){return t.map((function(t){return function(e,t){var n=A(e.target,t.name);if(n){var a=J(t,e),r=a[a.length-1];return{type:n,property:t.name,animatable:e,tweens:a,duration:r.end,delay:a[0].delay,endDelay:r.endDelay}}}(e,t)}))}))),(function(e){return!u.und(e)}))}function K(e,t){var n=e.length,a=function(e){return e.timelineOffset?e.timelineOffset:0},r={};return r.duration=n?Math.max.apply(Math,e.map((function(e){return a(e)+e.duration}))):t.duration,r.delay=n?Math.min.apply(Math,e.map((function(e){return a(e)+e.delay}))):t.delay,r.endDelay=n?r.duration-Math.max.apply(Math,e.map((function(e){return a(e)+e.duration-e.endDelay}))):t.endDelay,r}var ee=0;var te=[],ne=function(){var e;function t(n){for(var a=te.length,r=0;r<a;){var i=te[r];i.paused?(te.splice(r,1),a--):(i.tick(n),r++)}e=r>0?requestAnimationFrame(t):void 0}return"undefined"!=typeof document&&document.addEventListener("visibilitychange",(function(){re.suspendWhenDocumentHidden&&(ae()?e=cancelAnimationFrame(e):(te.forEach((function(e){return e._onDocumentVisibility()})),ne()))})),function(){e||ae()&&re.suspendWhenDocumentHidden||!(te.length>0)||(e=requestAnimationFrame(t))}}();function ae(){return!!document&&document.hidden}function re(e){void 0===e&&(e={});var t,n=0,i=0,o=0,c=0,l=null;function u(e){var t=window.Promise&&new Promise((function(e){return l=e}));return e.finished=t,t}var d=function(e){var t=L(a,e),n=L(r,e),i=z(n,e),o=V(e.targets),s=Y(o,i),c=K(s,n),l=ee;return ee++,I(t,{id:l,children:[],animatables:o,animations:s,duration:c.duration,delay:c.delay,endDelay:c.endDelay})}(e);u(d);function h(){var e=d.direction;"alternate"!==e&&(d.direction="normal"!==e?"normal":"reverse"),d.reversed=!d.reversed,t.forEach((function(e){return e.reversed=d.reversed}))}function p(e){return d.reversed?d.duration-e:e}function f(){n=0,i=p(d.currentTime)*(1/re.speed)}function g(e,t){t&&t.seek(e-t.timelineOffset)}function m(e){for(var t=0,n=d.animations,a=n.length;t<a;){var r=n[t],i=r.animatable,o=r.tweens,c=o.length-1,l=o[c];c&&(l=b(o,(function(t){return e<t.end}))[0]||l);for(var u=s(e-l.start-l.delay,0,l.duration)/l.duration,h=isNaN(u)?1:l.easing(u),p=l.to.strings,f=l.round,g=[],m=l.to.numbers.length,y=void 0,v=0;v<m;v++){var w=void 0,k=l.to.numbers[v],M=l.from.numbers[v]||0;w=l.isPath?G(l.value,h*k,l.isPathTargetInsideSVG):M+h*(k-M),f&&(l.isColor&&v>2||(w=Math.round(w*f)/f)),g.push(w)}var x=p.length;if(x){y=p[0];for(var D=0;D<x;D++){p[D];var L=p[D+1],I=g[D];isNaN(I)||(y+=L?I+L:I+" ")}}else y=g[0];Z[r.type](i.target,r.property,y,i.transforms),r.currentValue=y,t++}}function y(e){d[e]&&!d.passThrough&&d[e](d)}function v(e){var a=d.duration,r=d.delay,f=a-d.endDelay,v=p(e);d.progress=s(v/a*100,0,100),d.reversePlayback=v<d.currentTime,t&&function(e){if(d.reversePlayback)for(var n=c;n--;)g(e,t[n]);else for(var a=0;a<c;a++)g(e,t[a])}(v),!d.began&&d.currentTime>0&&(d.began=!0,y("begin")),!d.loopBegan&&d.currentTime>0&&(d.loopBegan=!0,y("loopBegin")),v<=r&&0!==d.currentTime&&m(0),(v>=f&&d.currentTime!==a||!a)&&m(a),v>r&&v<f?(d.changeBegan||(d.changeBegan=!0,d.changeCompleted=!1,y("changeBegin")),y("change"),m(v)):d.changeBegan&&(d.changeCompleted=!0,d.changeBegan=!1,y("changeComplete")),d.currentTime=s(v,0,a),d.began&&y("update"),e>=a&&(i=0,d.remaining&&!0!==d.remaining&&d.remaining--,d.remaining?(n=o,y("loopComplete"),d.loopBegan=!1,"alternate"===d.direction&&h()):(d.paused=!0,d.completed||(d.completed=!0,y("loopComplete"),y("complete"),!d.passThrough&&"Promise"in window&&(l(),u(d)))))}return d.reset=function(){var e=d.direction;d.passThrough=!1,d.currentTime=0,d.progress=0,d.paused=!0,d.began=!1,d.loopBegan=!1,d.changeBegan=!1,d.completed=!1,d.changeCompleted=!1,d.reversePlayback=!1,d.reversed="reverse"===e,d.remaining=d.loop,t=d.children;for(var n=c=t.length;n--;)d.children[n].reset();(d.reversed&&!0!==d.loop||"alternate"===e&&1===d.loop)&&d.remaining++,m(d.reversed?d.duration:0)},d._onDocumentVisibility=f,d.set=function(e,t){return X(e,t),d},d.tick=function(e){o=e,n||(n=o),v((o+(i-n))*re.speed)},d.seek=function(e){v(p(e))},d.pause=function(){d.paused=!0,f()},d.play=function(){d.paused&&(d.completed&&d.reset(),d.paused=!1,te.push(d),f(),ne())},d.reverse=function(){h(),d.completed=!d.reversed,f()},d.restart=function(){d.reset(),d.play()},d.remove=function(e){oe(F(e),d)},d.reset(),d.autoplay&&d.play(),d}function ie(e,t){for(var n=t.length;n--;)x(e,t[n].animatable.target)&&t.splice(n,1)}function oe(e,t){var n=t.animations,a=t.children;ie(e,n);for(var r=a.length;r--;){var i=a[r],o=i.animations;ie(e,o),o.length||i.children.length||a.splice(r,1)}n.length||a.length||t.pause()}re.version="3.2.1",re.speed=1,re.suspendWhenDocumentHidden=!0,re.running=te,re.remove=function(e){for(var t=F(e),n=te.length;n--;){oe(t,te[n])}},re.get=q,re.set=X,re.convertPx=C,re.path=function(e,t){var n=u.str(e)?w(e)[0]:e,a=t||100;return function(e){return{property:e,el:n,svg:W(n),totalLength:Q(n)*(a/100)}}},re.setDashoffset=function(e){var t=Q(e);return e.setAttribute("stroke-dasharray",t),t},re.stagger=function(e,t){void 0===t&&(t={});var n=t.direction||"normal",a=t.easing?v(t.easing):null,r=t.grid,i=t.axis,o=t.from||0,s="first"===o,c="center"===o,l="last"===o,d=u.arr(e),h=d?parseFloat(e[0]):parseFloat(e),p=d?parseFloat(e[1]):0,f=R(d?e[1]:e)||0,g=t.start||0+(d?h:0),m=[],y=0;return function(e,t,u){if(s&&(o=0),c&&(o=(u-1)/2),l&&(o=u-1),!m.length){for(var v=0;v<u;v++){if(r){var w=c?(r[0]-1)/2:o%r[0],b=c?(r[1]-1)/2:Math.floor(o/r[0]),k=w-v%r[0],M=b-Math.floor(v/r[0]),x=Math.sqrt(k*k+M*M);"x"===i&&(x=-k),"y"===i&&(x=-M),m.push(x)}else m.push(Math.abs(o-v));y=Math.max.apply(Math,m)}a&&(m=m.map((function(e){return a(e/y)*y}))),"reverse"===n&&(m=m.map((function(e){return i?e<0?-1*e:-e:Math.abs(y-e)})))}return g+(d?(p-h)/y:h)*(Math.round(100*m[t])/100)+f}},re.timeline=function(e){void 0===e&&(e={});var t=re(e);return t.duration=0,t.add=function(n,a){var i=te.indexOf(t),o=t.children;function s(e){e.passThrough=!0}i>-1&&te.splice(i,1);for(var c=0;c<o.length;c++)s(o[c]);var l=I(n,L(r,e));l.targets=l.targets||e.targets;var d=t.duration;l.autoplay=!1,l.direction=t.direction,l.timelineOffset=u.und(a)?d:U(a,d),s(t),t.seek(l.timelineOffset);var h=re(l);s(h),o.push(h);var p=K(o,e);return t.delay=p.delay,t.endDelay=p.endDelay,t.duration=p.duration,t.seek(0),t.reset(),t.autoplay&&t.play(),t},t},re.easing=v,re.penner=y,re.random=function(e,t){return Math.floor(Math.random()*(t-e+1))+e};var se=re;firebase.initializeApp({apiKey:"AIzaSyDTVxDJj7rqG9L-Clvba2Tao9B0hkcxjcE",authDomain:"milchchan.firebaseapp.com",databaseURL:"https://milchchan.firebaseio.com",projectId:"milchchan",storageBucket:"milchchan.appspot.com",messagingSenderId:"355698971889",appId:"1:355698971889:web:e3653c5c31bd7289cd4550",measurementId:"G-3998FJYNWX"}),firebase.analytics();let ce=firebase.database(),le=firebase.storage();window.addEventListener("load",e=>{var t=Vue.createApp({data:()=>({user:null,isDebug:!1,isDarkMode:!1,page:null,capturedStream:null,mediaRecorder:null,isRecording:!1,recordedData:null,maxRecordTime:60,isPlaying:!1,playbackQueue:[],playData:null,timeElapsed:0,isUploading:!1,progress:0,isCompleted:!1,isBlinded:!1,presetImages:[{fps:3,dark:!1,images:[{width:64,height:64,source:"/images/PixelatedLuna-Lolita-Glad1.png"},{width:64,height:64,source:"/images/PixelatedLuna-Lolita-Glad2.png"},{width:64,height:64,source:"/images/PixelatedLuna-Lolita-Glad1.png"}]},{fps:3,density:2,dark:!1,images:[{width:64,height:64,source:"/images/PixelatedLuna-Lolita-Glad1@2x.png"},{width:64,height:64,source:"/images/PixelatedLuna-Lolita-Glad2@2x.png"},{width:64,height:64,source:"/images/PixelatedLuna-Lolita-Glad1@2x.png"}]},{fps:3,density:3,dark:!1,images:[{width:64,height:64,source:"/images/PixelatedLuna-Lolita-Glad1@3x.png"},{width:64,height:64,source:"/images/PixelatedLuna-Lolita-Glad2@3x.png"},{width:64,height:64,source:"/images/PixelatedLuna-Lolita-Glad1@3x.png"}]},{fps:3,dark:!0,images:[{width:64,height:64,source:"/images/PixelatedLuna-Witch-Glad1.png"},{width:64,height:64,source:"/images/PixelatedLuna-Witch-Glad2.png"},{width:64,height:64,source:"/images/PixelatedLuna-Witch-Glad1.png"}]},{fps:3,density:2,dark:!0,images:[{width:64,height:64,source:"/images/PixelatedLuna-Witch-Glad1@2x.png"},{width:64,height:64,source:"/images/PixelatedLuna-Witch-Glad2@2x.png"},{width:64,height:64,source:"/images/PixelatedLuna-Witch-Glad1@2x.png"}]},{fps:3,density:3,dark:!0,images:[{width:64,height:64,source:"/images/PixelatedLuna-Witch-Glad1@3x.png"},{width:64,height:64,source:"/images/PixelatedLuna-Witch-Glad2@3x.png"},{width:64,height:64,source:"/images/PixelatedLuna-Witch-Glad1@3x.png"}]}],backgroundImages:[],preloadImages:[],queryQueue:[],sounds:{},soundCache:{},recentSounds:[],isRevealed:!1,input:"",inputHasError:!1,notifications:[],notificationsHeight:0,animatedNotificationsHeight:0,tickerWidth:0,animatedTickerWidth:0,stars:-1,animatedStars:0,words:[],character:null,states:{},map:null,layer:null,isExpanded:!1,isLoading:!1,isMuted:!1,isCollapsed:!0,isUpdating:!1,backgroundImagesQueue:[],isPopup:!1,isLearning:!0,isAnimating:!1,mode:null,feedQueue:[],animatedInputLength:0,maxInputLength:100,messages:[],maxMessages:10,word:null,tags:[],maxTags:10,scrollTimeoutID:void 0,tickIntervalID:void 0,screenshot:null}),watch:{isMuted(e){try{localStorage.setItem("bot",JSON.stringify({mute:e}))}catch(e){localStorage.removeItem("bot")}},words:{handler:()=>{t.$nextTick(()=>{for(const e of document.body.querySelectorAll("#ticker>.columns>.column>.control .clip")){let n=0;for(const t of e.querySelectorAll(":scope .ticker-wrap .ticker .item"))n+=t.getBoundingClientRect().width;n>0&&(t.tickerWidth=Math.min(n/2,document.body.querySelector("#ticker>.columns>.column>.control .level:first-child").getBoundingClientRect().width),e.querySelector(":scope .ticker-wrap .ticker").style.width=n+"px")}})},deep:!0},tickerWidth(e){const t=this,n={width:this.animatedTickerWidth};se({targets:n,width:e,round:1,duration:500,easing:"linear",update:()=>{t.animatedTickerWidth=n.width}})},backgroundImages:{handler:()=>{t.$nextTick(()=>{const e=document.body.querySelectorAll(".background>div");if(e.length>1){const t=e.length-1,n=3;for(const a of e)a.animate([{transform:"translate3d(0, 0, 0)"},{transform:"translate3d(-"+100*t+"%, 0, 0)"}],{fill:"forwards",easing:"steps("+t+")",duration:1e3/n*e.length,iterations:1/0})}})},deep:!0},notifications:{handler:()=>{t.$nextTick(()=>{t.notificationsHeight=t.$refs.notifications.getBoundingClientRect().height})},deep:!0},notificationsHeight(e){if(e>this.animatedNotificationsHeight){const t={height:this.animatedNotificationsHeight};se({targets:t,height:e,round:1,duration:500,easing:"linear",update:()=>{this.animatedNotificationsHeight=t.height}})}else this.animatedNotificationsHeight=e},stars(e){const t={count:this.animatedStars};se({targets:t,count:e,round:1,duration:500,easing:"linear",update:()=>{this.animatedStars=t.count}})},input:{handler:()=>{t.$nextTick(()=>{const e={count:t.animatedInputLength};se({targets:e,count:t.input.length,round:1,duration:500,easing:"linear",update:()=>{t.animatedInputLength=e.count}})})},deep:!0}},methods:{signIn:function(e){const t=this;if(e===firebase.auth.GoogleAuthProvider.PROVIDER_ID)firebase.auth().signInWithPopup(new firebase.auth.GoogleAuthProvider).then(e=>{var n=e.credential;for(const n of e.user.providerData){firebase.auth().currentUser.updateProfile({displayName:n.displayName,photoURL:n.photoURL}).then((function(){t.user.resolvedPhotoURL=n.photoURL})).catch((function(e){console.error(e.code,e.message)}));break}try{localStorage.setItem("credential",JSON.stringify({providerId:n.providerId,accessToken:n.accessToken,idToken:n.idToken})),t.page=null}catch(e){localStorage.removeItem("credential")}}).catch(e=>{console.error(e.code,e.message)});else if(e===firebase.auth.FacebookAuthProvider.PROVIDER_ID){const e=new firebase.auth.FacebookAuthProvider;e.addScope("public_profile"),firebase.auth().signInWithPopup(e).then(e=>{var n=e.credential;try{localStorage.setItem("credential",JSON.stringify({providerId:n.providerId,accessToken:n.accessToken})),t.page=null}catch(e){localStorage.removeItem("credential")}}).catch(e=>{console.error(e.code,e.message)})}else e===firebase.auth.TwitterAuthProvider.PROVIDER_ID&&firebase.auth().signInWithPopup(new firebase.auth.TwitterAuthProvider).then(e=>{var n=e.credential;for(const n of e.user.providerData){const e=n.photoURL.replace(/_normal\.jpg$/,".jpg");firebase.auth().currentUser.updateProfile({displayName:n.displayName,photoURL:e}).then((function(){t.user.resolvedPhotoURL=e})).catch((function(e){console.error(e.code,e.message)}));break}try{localStorage.setItem("credential",JSON.stringify({providerId:n.providerId,accessToken:n.accessToken,secret:n.secret})),t.page=null}catch(e){localStorage.removeItem("credential")}}).catch(e=>{console.error(e.code,e.message)})},signOut:function(e){firebase.auth().signOut().then(()=>{localStorage.removeItem("credential"),firebase.auth().signInAnonymously().catch(e=>{console.error(e.code,e.message)})}).catch(e=>{console.error(e.code,e.message)})},update:async function(){const e=this,t=this.map.getCenter(),n=this.encodeGeohash(t.latitude,t.longitude,{1:2,2:2,3:2,4:2,5:2,6:2,7:2,8:2,9:2,10:3,11:3,12:4,13:4,14:4,15:5,16:5,17:5,18:6,19:6,20:6}[this.map.getZoom()]);let a=[n],r=[],i=[],o=this.decodeGeohash(n);const s=Math.floor(new Date/1e3);let c={},l=!1,u=[];if(i.push(new Microsoft.Maps.Polygon([new Microsoft.Maps.Location(o.topleft.latitude,o.topleft.longitude),new Microsoft.Maps.Location(o.topright.latitude,o.topright.longitude),new Microsoft.Maps.Location(o.bottomright.latitude,o.bottomright.longitude),new Microsoft.Maps.Location(o.bottomleft.latitude,o.bottomleft.longitude),new Microsoft.Maps.Location(o.topleft.latitude,o.topleft.longitude)],{fillColor:"rgba(255, 0, 0, 0.5)",strokeColor:"red",strokeThickness:1})),n.length>2){const e=this.getNeighbors(n);for(const t in e)a.push(e[t]),o=this.decodeGeohash(e[t]),i.push(new Microsoft.Maps.Polygon([new Microsoft.Maps.Location(o.topleft.latitude,o.topleft.longitude),new Microsoft.Maps.Location(o.topright.latitude,o.topright.longitude),new Microsoft.Maps.Location(o.bottomright.latitude,o.bottomright.longitude),new Microsoft.Maps.Location(o.bottomleft.latitude,o.bottomleft.longitude),new Microsoft.Maps.Location(o.topleft.latitude,o.topleft.longitude)],{fillColor:"rgba(255, 0, 0, 0.5)",strokeColor:"red",strokeThickness:1}))}this.layer.setPrimitives(i),this.queryQueue.push(t);for(const e of a){if(e in this.soundCache&&s-this.soundCache[e].timestamp<60){for(const t of this.soundCache[e].sounds)r.push(t);continue}const t=await ce.ref("wonderland/sounds").orderByChild("geohash").limitToLast(50).startAt(e).endAt(e+"").once("value");if(c[e]={timestamp:s,sounds:[]},t.exists()){const n=t.val();for(const t in n)n[t].id=t,r.push(n[t]),c[e].sounds.push(n[t])}}if(this.queryQueue.shift(),!(this.queryQueue.length>0)){for(const e in c)this.soundCache[e]=c[e];for(const t of this.take(r.sort((e,t)=>t.timestamp-e.timestamp),100)){let n=!0;for(const e in this.sounds)if(t.id===this.sounds[e].id){n=!1;break}if(n){let n;const a=new Date(1e3*t.timestamp).getHours(),r=a>=6&&a<18?"/images/Marker-Light.svg":"/images/Marker-Dark.svg";"tags"in t&&t.tags.length>0?(n=t.tags.join("/"),u.push({tokens:t.tags,timestamp:t.timestamp})):n="";const i=new Microsoft.Maps.Pushpin(new Microsoft.Maps.Location(t.location.latitude,t.location.longitude),{title:n,icon:r});this.setImage(i,r,t),this.sounds[i.id]=t,this.sounds[i.id].pushpin=i,this.sounds[i.id].handlers=[Microsoft.Maps.Events.addHandler(i,"click",async t=>{const n=new Date(1e3*e.sounds[t.target.id].timestamp).getHours();for(let t=e.playbackQueue.length-1;t>=0;t--)"generator"in e.playbackQueue[t]&&e.playbackQueue.splice(t,1);if(null!==e.playData&&"id"in e.playData&&e.playData.id in e.sounds){const t=new Date(1e3*e.sounds[e.playData.id].timestamp).getHours();e.setImage(e.sounds[e.playData.id].pushpin,t>=6&&t<18?"/images/Marker-Light.svg":"/images/Marker-Dark.svg",e.sounds[e.playData.id])}if(t.target.id in e.sounds){e.setImage(e.sounds[t.target.id].pushpin,n>=6&&n<18?"/images/Marker-Light-Selected.svg":"/images/Marker-Dark-Selected.svg",e.sounds[t.target.id]);try{e.playData={id:t.target.id,type:e.sounds[t.target.id].type,url:await le.ref().child("sounds/"+e.sounds[t.target.id].name).getDownloadURL()},"plays"in e.sounds[t.target.id]&&(e.playData.plays=e.sounds[t.target.id].plays),e.$refs.player.src=e.playData.url,e.$refs.player.play()}catch(e){console.error(e.message)}}}),Microsoft.Maps.Events.addHandler(i,"dblclick",t=>{window.location.hash=e.sounds[t.target.id].id})],this.map.entities.push(i),l=!0}else"tags"in t&&t.tags.length>0&&u.push({tokens:t.tags,timestamp:t.timestamp})}if(Object.keys(this.sounds).forEach((function(t){if(!r.some(n=>n.id===e.sounds[t].id)&&(null===e.playData||"id"in e.playData==!1||e.playData.id!==t)){for(const n of e.sounds[t].handlers)Microsoft.Maps.Events.removeHandler(n);e.map.entities.remove(e.sounds[t].pushpin),delete e.sounds[t],l=!0}})),Object.keys(this.soundCache).forEach((function(t){s-e.soundCache[t].timestamp>=60&&delete e.soundCache[t]})),!this.isPlaying&&null!==this.playData&&"id"in this.playData&&this.playData.id in this.sounds==!1&&(this.playData=null),l)try{const e=await new Promise(e=>{const t=Math.pow(10,-6);let n=[],a=[],r={};const i=Math.floor((new Date).getTime()/1e3)-86400;let o={},s=[],c=t;for(const e of u){let t=[];for(const n of e.tokens)t.includes(n)||(n in r?r[n]+=1:r[n]=1,t.push(n))}for(const e in r)r[e]=Math.log(u.length/(r[e]+t));for(const e of u)e.timestamp>i&&n.push(e);if(n.length<10){const e=Math.max(u.length-10,0);n.splice(0);for(let t=u.length-1;t>=e;t--)n.unshift(u[t])}for(const e of n){let t={};for(const n of e.tokens)n in t?t[n]+=1:t[n]=1;for(const n in t)t[n]/=e.tokens.length,n in o||(o[n]=0);a.push(t)}for(const e in o)for(const t of a)if(e in t){const n=t[e]*r[e];n>o[e]&&(o[e]=n)}for(const e in o)s.push({term:e,value:o[e]});s.sort((e,t)=>t.value-e.value);for(const e of s)e.value>c&&(c=e.value);for(const e of s)e.value/=c;e(s)});let t=0,n=!1;for(const n of this.prepare(this.character.ticker.filter(e=>"Alert"===e.name),e.length))"Message"===n.type&&(e.splice(t,0,{term:n.text,image:this.character.image,value:null}),t++);if(0===t&&(e.splice(t,0,{term:null,image:this.character.icon,value:null}),t++),this.words.length===e.length){for(let t=0;t<e.length;t++)if(e[t].term!==this.words[t].name){n=!0;break}}else n=!0;if(n){this.words.splice(0);for(let t=0;t<e.length;t++)"image"in e[t]?this.words.push({index:t,name:e[t].term,image:e[t].image,score:e[t].value}):this.words.push({index:t,name:e[t].term,score:e[t].value})}}catch(e){console.error(e)}}},locate:function(e){const t=this;navigator.geolocation.getCurrentPosition(e=>{t.map.setView({center:new Microsoft.Maps.Location(e.coords.latitude,e.coords.longitude),zoom:16})},e=>{t.notify({text:e.message,accent:t.character.accent,image:t.character.image}),console.error(e)},{enableHighAccuracy:!0,timeout:5e3,maximumAge:0})},backward:function(e){for(let e=this.playbackQueue.length-1;e>=0;e--)"generator"in this.playbackQueue[e]&&"recent"!==this.playbackQueue[e].generator&&this.playbackQueue.splice(e,1);if(0===this.playbackQueue.length){const e=25;for(let t=this.recentSounds.length-1,n=Math.max(0,this.recentSounds.length-e);t>=n;t--){const e=Object.assign({},this.recentSounds[t]);e.generator="recent",this.playbackQueue.push(e)}}this.forward()},forward:async function(){const e=this.playbackQueue.shift();let t=null;if(null!==this.playData&&"id"in this.playData&&this.playData.id in this.sounds){const e=new Date(1e3*this.sounds[this.playData.id].timestamp).getHours();this.setImage(this.sounds[this.playData.id].pushpin,e>=6&&e<18?"/images/Marker-Light.svg":"/images/Marker-Dark.svg",this.sounds[this.playData.id])}for(const n in this.sounds)if(e.id===this.sounds[n].id){const e=new Date(1e3*this.sounds[n].timestamp).getHours();this.setImage(this.sounds[n].pushpin,e>=6&&e<18?"/images/Marker-Light-Selected.svg":"/images/Marker-Dark-Selected.svg",this.sounds[n]),t=n;break}if(null===t){const n=this,a=new Date(1e3*e.timestamp).getHours(),r=a>=6&&a<18?"/images/Marker-Light-Selected.svg":"/images/Marker-Dark-Selected.svg",i=new Microsoft.Maps.Pushpin(new Microsoft.Maps.Location(e.location.latitude,e.location.longitude),{title:"tags"in e?e.tags.join("/"):"",icon:r});this.setImage(i,r,e),t=i.id,this.sounds[i.id]=e,this.sounds[i.id].id=e.id,this.sounds[i.id].pushpin=i,this.sounds[i.id].handlers=[Microsoft.Maps.Events.addHandler(i,"click",async e=>{const t=new Date(1e3*n.sounds[e.target.id].timestamp).getHours();for(let e=n.playbackQueue.length-1;e>=0;e--)"generator"in n.playbackQueue[e]&&n.playbackQueue.splice(e,1);if(null!==n.playData&&"id"in n.playData&&n.playData.id in n.sounds){const e=new Date(1e3*n.sounds[n.playData.id].timestamp).getHours();n.setImage(n.sounds[n.playData.id].pushpin,e>=6&&e<18?"/images/Marker-Light.svg":"/images/Marker-Dark.svg",n.sounds[n.playData.id])}if(e.target.id in n.sounds){n.setImage(n.sounds[e.target.id].pushpin,t>=6&&t<18?"/images/Marker-Light-Selected.svg":"/images/Marker-Dark-Selected.svg",n.sounds[e.target.id]);try{n.playData={id:e.target.id,type:n.sounds[e.target.id].type,url:await le.ref().child("sounds/"+n.sounds[e.target.id].name).getDownloadURL()},"plays"in n.sounds[e.target.id]&&(n.playData.plays=n.sounds[e.target.id].plays),n.$refs.player.src=n.playData.url,n.$refs.player.play()}catch(e){console.error(e.message)}}}),Microsoft.Maps.Events.addHandler(i,"dblclick",e=>{window.location.hash=n.sounds[e.target.id].id})],this.map.entities.push(i)}this.playData={id:t,type:e.type,url:await le.ref().child("sounds/"+e.name).getDownloadURL()},"plays"in e&&(this.playData.plays=e.plays),this.$refs.player.src=this.playData.url,this.$refs.player.play(),this.map.setView({center:new Microsoft.Maps.Location(e.location.latitude,e.location.longitude),zoom:16})},shuffle:function(e){for(let e=this.playbackQueue.length-1;e>=0;e--)"generator"in this.playbackQueue[e]&&"shuffle"!==this.playbackQueue[e].generator&&this.playbackQueue.splice(e,1);if(0===this.playbackQueue.length){const e=25;for(const t of this.take(function(e){let t=[].concat(e),n=e.length;for(;n>1;){const e=(a=0,r=n,a=Math.ceil(a),r=Math.floor(r),Math.floor(Math.random()*(r-a))+a);n--;const i=t[n];t[n]=t[e],t[e]=i}var a,r;return t}(this.recentSounds),e)){const e=Object.assign({},t);e.generator="shuffle",this.playbackQueue.push(e)}}this.forward()},playSound:async function(e){if(this.playbackQueue.length>0)this.forward();else{if(null===this.playData){const e=this.map.getCenter();let t=Number.MAX_SAFE_INTEGER,n=null;for(const a in this.sounds){const r=this.getDistance(e.latitude,e.longitude,this.sounds[a].location.latitude,this.sounds[a].location.longitude);r<t&&(n=a,t=r)}if(null===n)return void this.$refs.playback.animate([{transform:"translate3d(0, 0, 0)"},{transform:"translate3d(8px, 0, 0)"},{transform:"translate3d(-8px, 0, 0)"},{transform:"translate3d(7px, 0, 0)"},{transform:"translate3d(-7px, 0, 0)"},{transform:"translate3d(6px, 0, 0)"},{transform:"translate3d(-6px, 0, 0)"},{transform:"translate3d(5px, 0, 0)"},{transform:"translate3d(-5px, 0, 0)"},{transform:"translate3d(4px, 0, 0)"},{transform:"translate3d(-4px, 0, 0)"},{transform:"translate3d(3px, 0, 0)"},{transform:"translate3d(-3px, 0, 0)"},{transform:"translate3d(2px, 0, 0)"},{transform:"translate3d(-2px, 0, 0)"},{transform:"translate3d(1px, 0, 0)"},{transform:"translate3d(-1px, 0, 0)"},{transform:"translate3d(0, 0, 0)"}],{duration:1e3,iterations:1});{const e=new Date(1e3*this.sounds[n].timestamp).getHours();this.setImage(this.sounds[n].pushpin,e>=6&&e<18?"/images/Marker-Light-Selected.svg":"/images/Marker-Dark-Selected.svg",this.sounds[n]),this.playData={id:n,type:this.sounds[n].type,url:await le.ref().child("sounds/"+this.sounds[n].name).getDownloadURL()},"plays"in this.sounds[n]&&(this.playData.plays=this.sounds[n].plays),this.$refs.player.src=this.playData.url}}this.$refs.player.play()}},stopSound:function(e){this.$refs.player.pause(),this.$refs.player.currentTime=0},startRecording:async function(e){const t=this;if(null!==this.playData&&"id"in this.playData&&this.playData.id in this.sounds){const e=new Date(1e3*this.sounds[this.playData.id].timestamp).getHours();this.setImage(this.sounds[this.playData.id].pushpin,e>=6&&e<18?"/images/Marker-Light.svg":"/images/Marker-Dark.svg",this.sounds[this.playData.id])}try{this.capturedStream=await navigator.mediaDevices.getUserMedia({video:!1,audio:{echoCancellation:!0,volume:.5}})}catch(e){return void console.error(e)}if(MediaRecorder.isTypeSupported("audio/mp4"))this.mediaRecorder=new MediaRecorder(this.capturedStream,{mimeType:"audio/mp4"}),this.mediaRecorder.onstop=e=>{t.playData={type:t.recordedData.type,url:window.URL.createObjectURL(new Blob(t.recordedData.blobs,{type:t.recordedData.type}))},t.$refs.player.src=t.playData.url,t.isRecording=!1,t.timeElapsed=0,t.capturedStream.getTracks().forEach(e=>{e.stop()})},this.mediaRecorder.ondataavailable=e=>{const n=Math.floor(new Date/1e3);e.data&&(t.recordedData.blobs.push(e.data),"recording"===t.mediaRecorder.state&&(t.timeElapsed+=n-t.recordedData.timestamp,t.timeElapsed>=t.maxRecordTime&&t.mediaRecorder.stop())),t.recordedData.timestamp=n};else{const e=new AudioContext,t=e.createMediaStreamSource(this.capturedStream);e.resume(),this.mediaRecorder=new Recorder(t,{})}if(this.isPlaying&&(this.$refs.player.pause(),this.$refs.player.currentTime=0),this.isRecording=!0,this.mediaRecorder instanceof MediaRecorder)this.recordedData={timestamp:Math.floor(new Date/1e3),type:this.mediaRecorder.mimeType,blobs:[]},this.mediaRecorder.start(1e3);else{const e=()=>{if(t.isRecording){const n=Math.floor(new Date/1e3);t.timeElapsed+=n-t.recordedData.timestamp,t.recordedData.timestamp=n,t.timeElapsed>=t.maxRecordTime?(t.mediaRecorder.stop(),t.mediaRecorder.exportWAV(e=>{t.recordedData.blobs.push(e),t.playData={type:t.recordedData.type,url:window.URL.createObjectURL(new Blob(t.recordedData.blobs,{type:t.recordedData.type}))},t.$refs.player.src=t.playData.url}),t.mediaRecorder.clear(),t.isRecording=!1,t.timeElapsed=0,t.capturedStream.getTracks().forEach(e=>{e.stop()})):window.setTimeout(e,1e3)}};this.recordedData={timestamp:Math.floor(new Date/1e3),type:"audio/wav",blobs:[]},this.mediaRecorder.record(),window.setTimeout(e,1e3)}},stopRecording:function(e){if(this.mediaRecorder.stop(),this.mediaRecorder instanceof Recorder){const e=this;this.mediaRecorder.exportWAV(t=>{e.recordedData.blobs.push(t),e.playData={type:e.recordedData.type,url:window.URL.createObjectURL(new Blob(e.recordedData.blobs,{type:e.recordedData.type}))},e.$refs.player.src=e.playData.url}),this.mediaRecorder.clear(),this.isRecording=!1,this.timeElapsed=0,this.capturedStream.getTracks().forEach(e=>{e.stop()})}},uploadSound:function(e){const t=this,n=le.ref();let a=[];if(this.input.length>0){let e,t=/(?:(?:"(.*?)")|([^\s]+))\s*/g;for(;null!==(e=t.exec(this.input));)void 0===e[1]&&a.push(e[2]),void 0===e[2]&&e[1].length>0&&a.push(e[1])}this.isUploading=!0,navigator.geolocation.getCurrentPosition(e=>{const r=n.child("sounds/"+t.generateUuid()).put(new Blob(t.recordedData.blobs,{type:t.recordedData.type}));r.on("state_changed",(function(e){t.progress=e.bytesTransferred/e.totalBytes}),(function(e){t.notify({text:e.message,accent:t.character.accent,image:t.character.image}),console.error(e),t.progress=0,t.isUploading=!1}),(function(){const n={name:r.snapshot.ref.name,type:t.recordedData.type,location:{latitude:e.coords.latitude,longitude:e.coords.longitude},geohash:t.encodeGeohash(e.coords.latitude,e.coords.longitude),tags:a,timestamp:Math.floor(new Date/1e3),user:{id:t.user.uid,name:t.user.displayName,image:t.user.photoURL}};var i=ce.ref("wonderland/sounds").push();i.set(n,(function(e){e&&(t.notify({text:e.message,accent:t.character.accent,image:t.character.image}),console.error(e))})),ce.ref("wonderland/stars").transaction((function(e){return(e||0)+1}));const o=a.length>0?a.join("/"):"",s=new Date(1e3*n.timestamp).getHours(),c=s>=6&&s<18?"/images/Marker-Light-Selected.svg":"/images/Marker-Dark-Selected.svg",l=new Microsoft.Maps.Pushpin(new Microsoft.Maps.Location(n.location.latitude,n.location.longitude),{title:o,icon:c});t.setImage(l,c,n),t.recordedData=null,t.sounds[l.id]=n,t.sounds[l.id].id=i.key,t.sounds[l.id].pushpin=l,t.sounds[l.id].handlers=[Microsoft.Maps.Events.addHandler(l,"click",async e=>{const n=new Date(1e3*t.sounds[e.target.id].timestamp).getHours();for(let e=t.playbackQueue.length-1;e>=0;e--)"generator"in t.playbackQueue[e]&&t.playbackQueue.splice(e,1);if(null!==t.playData&&"id"in t.playData&&t.playData.id in t.sounds){const e=new Date(1e3*t.sounds[t.playData.id].timestamp).getHours();t.setImage(t.sounds[t.playData.id].pushpin,e>=6&&e<18?"/images/Marker-Light.svg":"/images/Marker-Dark.svg",t.sounds[t.playData.id])}if(e.target.id in t.sounds){t.setImage(t.sounds[e.target.id].pushpin,n>=6&&n<18?"/images/Marker-Light-Selected.svg":"/images/Marker-Dark-Selected.svg",t.sounds[e.target.id]);try{t.playData={id:e.target.id,type:t.sounds[e.target.id].type,url:await le.ref().child("sounds/"+t.sounds[e.target.id].name).getDownloadURL()},"plays"in t.sounds[e.target.id]&&(t.playData.plays=t.sounds[e.target.id].plays),t.$refs.player.src=t.playData.url,t.$refs.player.play()}catch(e){console.error(e.message)}}}),Microsoft.Maps.Events.addHandler(l,"dblclick",e=>{window.location.hash=t.sounds[e.target.id].id})],t.map.entities.push(l),t.map.setView({center:new Microsoft.Maps.Location(n.location.latitude,n.location.longitude),zoom:t.map.getZoom()});for(let e=0;e<n.geohash.length;e++){const a=n.geohash.substring(0,n.geohash.length-e);a in t.soundCache&&delete t.soundCache[a]}t.progress=0,t.isUploading=!1,t.isBlinded=!0}))},e=>{t.notify({text:e.message,accent:t.character.accent,image:t.character.image}),console.error(e),t.isUploading=!1},{enableHighAccuracy:!0,timeout:5e3,maximumAge:0})},uploadImage:function(e){const t=this,n=le.ref();for(const a of e.target.files){const e=n.child("images/"+t.generateUuid()).put(a);e.on("state_changed",(function(e){t.progress=e.bytesTransferred/e.totalBytes}),(function(e){t.notify({text:e.message,accent:t.character.accent,image:t.character.image}),console.error(e),t.progress=0}),(function(){const n="gs://milchchan.appspot.com/"+e.snapshot.ref.fullPath;firebase.auth().currentUser.updateProfile({photoURL:n}).then((async function(){t.user.resolvedPhotoURL=await le.refFromURL(n).getDownloadURL()})).catch((function(e){console.error(e.code,e.message)})),t.progress=0}))}},notify:function(e){const t=this;e.id=window.setTimeout(e=>{for(let n=0;n<t.notifications.length;n++)if(t.notifications[n].id==e.id){t.notifications.splice(n,1);break}},3e3,e),this.notifications.unshift(e)},inputChanged:function(e){this.input.length>0&&this.input.split(/\s/).length>10?this.inputHasError=!0:this.inputHasError=!1},blinded:async function(){this.preloadImages.splice(0),this.backgroundImages.splice(0);const e=function(e){let t=[].concat(e),n=e.length;for(;n>1;){const e=(a=0,r=n,a=Math.ceil(a),r=Math.floor(r),Math.floor(Math.random()*(r-a))+a);n--;const i=t[n];t[n]=t[e],t[e]=i}var a,r;return t}(this.presetImages);if(window.devicePixelRatio>0)for(const t of e)if("density"in t&&t.density===Math.floor(window.devicePixelRatio)&&t.dark===this.isDarkMode){for(const e of t.images)"width"in e&&"height"in e?this.preloadImages.push({width:e.width,height:e.height,url:e.source}):this.preloadImages.push({url:e.source});break}if(0===this.preloadImages.length)for(const t of e)if("density"in t==!1&&t.dark!==this.isDarkMode){for(const e of t.images)"width"in e&&"height"in e?this.preloadImages.push({width:e.width,height:e.height,url:e.source}):this.preloadImages.push({url:e.source});break}},load:function(e){let t=!0;for(let n of this.preloadImages)n.url==e?n.isLoaded=!0:"isLoaded"in n||(t=!1);if(t){const e=this;let t=0;for(const e of this.preloadImages)e.isLoaded&&("width"in e&&"height"in e?this.backgroundImages.push({index:t,width:e.width,height:e.height,url:e.url}):this.backgroundImages.push({index:t,url:e.url}),t++);this.preloadImages.splice(0),this.isBlinded=!1,this.$refs.sunrise.animate([{transform:"rotate(0deg)"},{transform:"rotate(360deg)"}],{duration:1e4,iterations:1}),this.isCompleted=!0,window.setTimeout(()=>{e.isCompleted=!1},5e3)}},error:function(e){let t=!0;for(let n of this.preloadImages)n.url==e?n.isLoaded=!0:"isLoaded"in n||(t=!1);if(t){for(const e of this.preloadImages)e.isLoaded&&this.backgroundImages.push(e.url);this.preloadImages.splice(0),this.isBlinded=!1}},setImage:function(e,t,n){const a=this,r=new Image;r.src=t,r.onload=async()=>{if("image"in n.user){const t=new Image;n.user.image.startsWith("gs://")?t.src=await le.refFromURL(n.user.image).getDownloadURL():(t.crossOrigin="Anonymous",t.src=n.user.image),t.onload=()=>{const i=document.createElement("canvas"),o=i.getContext("2d"),s=r.width,c=r.height+24+4+1;i.width=s*window.devicePixelRatio,i.height=c*window.devicePixelRatio,i.style.width=s+"px",i.style.height=c+"px",o.save(),o.scale(window.devicePixelRatio,window.devicePixelRatio),o.arc(i.width/2,i.height-12,12,0,2*Math.PI,!1),o.clip(),o.drawImage(t,(i.width-24)/2,i.height-24-1,24,24),o.restore(),o.save(),o.scale(window.devicePixelRatio,window.devicePixelRatio),o.beginPath(),a.user.uid===n.user.id?o.strokeStyle=a.character.accent:o.strokeStyle="#ffffff",o.lineWidth=2,o.arc(i.width/2,i.height-12-1,12,0,2*Math.PI,!1),o.stroke(),o.restore(),o.drawImage(r,0,0,r.width*window.devicePixelRatio,r.height*window.devicePixelRatio),e.setOptions({icon:i.toDataURL()})}}else{const t=document.createElement("canvas"),n=t.getContext("2d");t.width=r.width*window.devicePixelRatio,t.height=r.height*window.devicePixelRatio,t.style.width=r.width+"px",t.style.height=r.height+"px",n.drawImage(r,0,0,r.width*window.devicePixelRatio,r.height*window.devicePixelRatio),e.setOptions({icon:t.toDataURL()})}}},formatTime:function(e){const t=Math.floor(e),n=t%60;return("0"+Math.floor(t/60)).slice(-1)+":"+("00"+n).slice(-2)},animationStart:function(e){},animationEnd:function(e){const t=this;this.$nextTick(()=>{t.notificationsHeight=t.$refs.notifications.getBoundingClientRect().height})},tickerUpdated:function(e){const t=this;this.$nextTick(()=>{for(const e of document.body.querySelectorAll("#ticker>.columns>.column>.control .clip")){let n=0;for(const t of e.querySelectorAll(":scope .ticker-wrap .ticker .item"))n+=t.getBoundingClientRect().width;n>0&&(t.tickerWidth=Math.min(n/2,document.body.querySelector("#ticker>.columns>.column>.control .level:first-child").getBoundingClientRect().width),e.querySelector(":scope .ticker-wrap .ticker").style.width=n+"px")}})},take:function(e,t){if(e.length>t){let n=[].concat(e);return n.splice(t),n}return e},reverse:function(e){return[].concat(e).reverse()},getDistance:function(e,t,n,a){var r=this.deg2rad(n-e),i=this.deg2rad(a-t),o=Math.sin(r/2)*Math.sin(r/2)+Math.cos(this.deg2rad(e))*Math.cos(this.deg2rad(n))*Math.sin(i/2)*Math.sin(i/2);return 6371*(2*Math.atan2(Math.sqrt(o),Math.sqrt(1-o)))},deg2rad:function(e){return e*(Math.PI/180)},encodeGeohash:function(e,t,n=12){const a=[16,8,4,2,1];var r=1,i=[],o=[],s=0,c=0;let l="";for(i[0]=-90,i[1]=90,o[0]=-180,o[1]=180;l.length<n;){if(r){const e=(o[0]+o[1])/2;t>e?(c|=a[s],o[0]=e):o[1]=e}else{const t=(i[0]+i[1])/2;e>t?(c|=a[s],i[0]=t):i[1]=t}r=!r,s<4?s++:(l+="0123456789bcdefghjkmnpqrstuvwxyz"[c],s=0,c=0)}return l},decodeGeohash:function(e){const t=[16,8,4,2,1];var n=1,a=[],r=[];a[0]=-90,a[1]=90,r[0]=-180,r[1]=180;for(var i=0;i<e.length;i++)for(var o=e[i],s="0123456789bcdefghjkmnpqrstuvwxyz".indexOf(o),c=0;c<5;c++){const e=t[c];n?(2,s&e?r[0]=(r[0]+r[1])/2:r[1]=(r[0]+r[1])/2):(2,s&e?a[0]=(a[0]+a[1])/2:a[1]=(a[0]+a[1])/2),n=!n}return a[2]=(a[0]+a[1])/2,r[2]=(r[0]+r[1])/2,{latitude:a[2],longitude:r[2],topleft:{latitude:a[0],longitude:r[0]},topright:{latitude:a[1],longitude:r[0]},bottomright:{latitude:a[1],longitude:r[1]},bottomleft:{latitude:a[0],longitude:r[1]}}},getNeighbors:function(e){const t=this.calculateAdjacent(e,"right"),n=this.calculateAdjacent(e,"left");return{top:this.calculateAdjacent(e,"top"),bottom:this.calculateAdjacent(e,"bottom"),right:t,left:n,topleft:this.calculateAdjacent(n,"top"),topright:this.calculateAdjacent(t,"top"),bottomright:this.calculateAdjacent(t,"bottom"),bottomleft:this.calculateAdjacent(n,"bottom")}},calculateAdjacent:function(e,t){const n={right:{even:"bc01fg45238967deuvhjyznpkmstqrwx"},left:{even:"238967debc01fg45kmstqrwxuvhjyznp"},top:{even:"p0r21436x8zb9dcf5h7kjnmqesgutwvy"},bottom:{even:"14365h7k9dcfesgujnmqp0r2twvyx8zb"}},a={right:{even:"bcfguvyz"},left:{even:"0145hjnp"},top:{even:"prxz"},bottom:{even:"028b"}};n.bottom.odd=n.left.even,n.top.odd=n.right.even,n.left.odd=n.bottom.even,n.right.odd=n.top.even,a.bottom.odd=a.left.even,a.top.odd=a.right.even,a.left.odd=a.bottom.even,a.right.odd=a.top.even;var r=(e=e.toLowerCase()).charAt(e.length-1),i=e.length%2?"odd":"even",o=e.substring(0,e.length-1);return-1!=a[t][i].indexOf(r)&&(o=this.calculateAdjacent(o,t)),o+"0123456789bcdefghjkmnpqrstuvwxyz"[n[t][i].indexOf(r)]},generateUuid:function(){let e="xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".split("");for(let t=0,n=e.length;t<n;t++)switch(e[t]){case"x":e[t]=Math.floor(16*Math.random()).toString(16);break;case"y":e[t]=(Math.floor(4*Math.random())+8).toString(16)}return e.join("")},prepare:function(e,t=null){function n(e,t){return e=Math.ceil(e),t=Math.floor(t),Math.floor(Math.random()*(t-e))+e}let a=[],r=[];for(const n of e){const e=t;if(null===t&&n.name in this.states&&(e=this.states[n.name]),null!==e&&"state"in n){if(!new RegExp(n.state).test(e))continue}a.push(n)}if(a.length>0){let e=[];for(const r of a[n(0,a.length)].sequence)null!==t&&(this.states[r.name]=t),e.push(r);for(;e.length>0;){const t=e.shift();if("Sequence"==t.type){if("sequence"in t==!1){let a=[],r=[];for(const e of this.character.sequences){let n=this.getSequenceStack(e,t);if(n.length>0){let e=[];do{let t=n.pop();if(n.length>0){let a=[];for(const r of n[n.length-1].sequence)if("Sequence"==r.type){if("sequence"in r){let t=!0;for(const n of e)if(n===r){t=!1;break}t&&a.push(r)}if(r===t)break}for(;a.length>0;)e.push(a.pop())}if("sequence"in t){let n=!0;for(const a of e)if(a===t){n=!1;break}n&&e.push(t)}}while(n.length>0);for(;e.length>0;)a.push(e.pop())}else a.push(e)}if("state"in t){this.states[t.name]=t.state;for(const e of a)if(e.name==t.name){if(!new RegExp(e.state).test(t.state))continue;r.push(e)}}else for(const e of a)if(e.name==t.name){if("state"in e){if(e.name in this.states==!1)continue;if(!new RegExp(e.state).test(this.states[e.name]))continue}r.push(e)}if(r.length>0){let t=0;for(const a of r[n(0,r.length)].sequence)e.splice(t,0,a),t++}}}else r.push(t)}}return r},getSequenceStack:function(e,t){let n=[];if(n.push(e),n[n.length-1]!==t){if("sequence"in e)for(const a of e.sequence)if("Sequence"==a.type){let e=this.getSequenceStack(a,t);if(e.length>0&&e[e.length-1]===t){let t=[];do{t.push(e.pop())}while(e.length>0);do{n.push(t.pop())}while(t.length>0);return n}}n.pop()}return n}},updated:function(){for(const e of document.body.querySelectorAll("#ticker>.columns>.column>.control .clip")){let t=0;for(const n of e.querySelectorAll(":scope .ticker-wrap .ticker .item"))t+=n.getBoundingClientRect().width;t>0&&(this.tickerWidth=Math.min(t/2,document.body.querySelector("#ticker>.columns>.column>.control .level:first-child").getBoundingClientRect().width),e.querySelector(":scope .ticker-wrap .ticker").style.width=t+"px")}},mounted:async function(){const e=this,t=localStorage.getItem("wonderland"),n=localStorage.getItem("credential");let a=null;if(this.isDebug="debug"===decodeURIComponent(window.location.hash.substring(1)),t)try{const e=JSON.parse(t);null!==e&&(this.isMuted=e.mute)}catch(e){localStorage.removeItem("bot")}if(n)try{a=JSON.parse(n)}catch(e){localStorage.removeItem("credential")}this.$refs.player.addEventListener("play",t=>{e.isPlaying=!0,"id"in e.playData&&e.playData.id in e.sounds&&"name"in e.sounds[e.playData.id].user&&e.notify({text:e.sounds[e.playData.id].user.name,accent:e.character.accent,image:"image"in e.sounds[e.playData.id].user?e.sounds[e.playData.id].user.image:null})}),this.$refs.player.addEventListener("pause",t=>{e.isPlaying=!1,e.timeElapsed=0}),this.$refs.player.addEventListener("ended",t=>{e.playbackQueue.length>0?e.forward():(e.isPlaying=!1,e.timeElapsed=0),"id"in e.playData&&e.playData.id in e.sounds&&ce.ref("wonderland/sounds/"+e.sounds[e.playData.id].id+"/plays").transaction((function(e){return(e||0)+1}))}),this.$refs.player.addEventListener("timeupdate",t=>{e.timeElapsed=e.$refs.player.currentTime}),this.map=new Microsoft.Maps.Map(this.$refs.map,{mapTypeId:Microsoft.Maps.MapTypeId.canvasLight}),this.map.setOptions({enableHighDpi:window.devicePixelRatio>1,showLocateMeButton:!1,showMapTypeSelector:!1,showZoomButtons:!1,showScalebar:!1}),this.layer=new Microsoft.Maps.Layer,this.layer.setVisible(!1),this.map.layers.insert(this.layer),Microsoft.Maps.Events.addHandler(this.map,"viewchangeend",()=>{null!==e.user&&e.update()});try{const e=await fetch("/assets/wonderland.json",{mode:"cors",method:"GET",headers:{"Content-Type":"application/x-www-form-urlencoded"}});if(!e.ok)throw new Error(e.statusText);this.character=await e.json()}catch(e){console.error(e)}null!==a?a.providerId===firebase.auth.GoogleAuthProvider.PROVIDER_ID?firebase.auth().signInWithCredential(firebase.auth.GoogleAuthProvider.credential(a.idToken)).catch(e=>{console.error(e.code,e.message)}):a.providerId===firebase.auth.FacebookAuthProvider.PROVIDER_ID?firebase.auth().signInWithCredential(firebase.auth.FacebookAuthProvider.credential(a.accessToken)).catch(e=>{console.error(e.code,e.message)}):a.providerId===firebase.auth.TwitterAuthProvider.PROVIDER_ID?firebase.auth().signInWithCredential(firebase.auth.TwitterAuthProvider.credential(a.accessToken,a.secret)).catch(e=>{console.error(e.code,e.message)}):firebase.auth().signInAnonymously().catch((function(e){console.error(e.code,e.message)})):firebase.auth().signInAnonymously().catch((function(e){console.error(e.code,e.message)})),firebase.auth().onAuthStateChanged((async function(t){if(t){e.user=t;const n=decodeURIComponent(window.location.hash.substring(1));if(n.length>0){const t=await ce.ref("wonderland/sounds/"+n).once("value");if(t.exists()){const a=t.val(),r=new Date(1e3*a.timestamp).getHours();let i=null;for(const t in e.sounds)if(n===e.sounds[t].id){i=t;break}if(null===i){const t=r>=6&&r<18?"/images/Marker-Light-Selected.svg":"/images/Marker-Dark-Selected.svg",o=new Microsoft.Maps.Pushpin(new Microsoft.Maps.Location(a.location.latitude,a.location.longitude),{title:"tags"in a?a.tags.join("/"):"",icon:t});e.setImage(o,t,a),i=o.id,e.sounds[o.id]=a,e.sounds[o.id].id=n,e.sounds[o.id].pushpin=o,e.sounds[o.id].handlers=[Microsoft.Maps.Events.addHandler(o,"click",async t=>{const n=new Date(1e3*e.sounds[t.target.id].timestamp).getHours();for(let t=e.playbackQueue.length-1;t>=0;t--)"generator"in e.playbackQueue[t]&&e.playbackQueue.splice(t,1);if(null!==e.playData&&"id"in e.playData&&e.playData.id in e.sounds){const t=new Date(1e3*e.sounds[e.playData.id].timestamp).getHours();e.setImage(e.sounds[e.playData.id].pushpin,t>=6&&t<18?"/images/Marker-Light.svg":"/images/Marker-Dark.svg",e.sounds[e.playData.id])}if(t.target.id in e.sounds){e.setImage(e.sounds[t.target.id].pushpin,n>=6&&n<18?"/images/Marker-Light-Selected.svg":"/images/Marker-Dark-Selected.svg",e.sounds[t.target.id]);try{e.playData={id:t.target.id,type:e.sounds[t.target.id].type,url:await le.ref().child("sounds/"+e.sounds[t.target.id].name).getDownloadURL()},"plays"in e.sounds[t.target.id]&&(e.playData.plays=e.sounds[t.target.id].plays),e.$refs.player.src=e.playData.url,e.$refs.player.play()}catch(e){console.error(e.message)}}}),Microsoft.Maps.Events.addHandler(o,"dblclick",t=>{window.location.hash=e.sounds[t.target.id].id})],e.map.entities.push(o)}else e.setImage(e.sounds[i].pushpin,r>=6&&r<18?"/images/Marker-Light-Selected.svg":"/images/Marker-Dark-Selected.svg",e.sounds[i]);e.playData={id:i,type:a.type,url:await le.ref().child("sounds/"+a.name).getDownloadURL()},"plays"in a&&(e.playData.plays=a.plays),e.$refs.player.src=e.playData.url,e.map.setView({center:new Microsoft.Maps.Location(a.location.latitude,a.location.longitude),zoom:16})}}else navigator.geolocation.getCurrentPosition(t=>{e.map.setView({center:new Microsoft.Maps.Location(t.coords.latitude,t.coords.longitude),zoom:e.map.getZoom()})},t=>{e.update(),e.notify({text:t.message,accent:e.character.accent,image:e.character.image}),console.error(t)},{enableHighAccuracy:!0,timeout:5e3,maximumAge:0});null!==e.user.photoURL&&(e.user.photoURL.startsWith("gs://")?e.user.resolvedPhotoURL=await le.refFromURL(e.user.photoURL).getDownloadURL():e.user.resolvedPhotoURL=e.user.photoURL),ce.ref("wonderland/sounds").orderByChild("timestamp").limitToLast(100).on("value",async t=>{if(t.exists()){const n=t.val();let a=!1;for(const t in n)if(!e.recentSounds.some(e=>e.id===t)){a=!0;break}if(a){e.recentSounds.splice(0);for(const t in n)n[t].id=t,e.recentSounds.push(n[t])}}}),ce.ref("wonderland/stars").on("value",t=>{const n=t.val();e.stars=null===n?0:n})}else ce.ref("wonderland/sounds").off("value"),ce.ref("wonderland/stars").off("value"),e.user=null}))}}).mount("#app");window.addEventListener("resize",e=>{t.$nextTick(()=>{for(const e of document.body.querySelectorAll("#ticker>.columns>.column>.control .clip")){let n=0;for(const t of e.querySelectorAll(":scope .ticker-wrap .ticker .item"))n+=t.getBoundingClientRect().width;n>0&&(t.tickerWidth=Math.min(n/2,document.body.querySelector("#ticker>.columns>.column>.control .level:first-child").getBoundingClientRect().width),e.querySelector(":scope .ticker-wrap .ticker").style.width=n+"px")}})}),window.matchMedia("(prefers-color-scheme: dark)").addEventListener("change",e=>{e.matches?t.isDarkMode=!0:t.isDarkMode=!1})})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,